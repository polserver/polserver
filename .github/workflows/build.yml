name: Build

on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: "windows-latest"
            cxx-compiler: cl
            c-compiler: cl
            compiler-version: default
            build-type: Release

          - os: "ubuntu-latest"
            cxx-compiler: g++
            c-compiler: gcc
            compiler-version: 8
            build-type: Release

          - os: "ubuntu-latest"
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 8
            build-type: Release

    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - run: sudo apt-get update
        if: matrix.config.os == 'ubuntu-latest'

      - name: Install Compiler
        shell: pwsh
        run: |
          $compiler = '${{ matrix.config.cxx-compiler }}'
          $version = '${{ matrix.config.compiler-version }}'

          if ($version -ne 'default') {
            sudo apt-get install "$compiler-$version" -y
            Invoke-Expression "$compiler-$version --version"
          }
          sudo apt-get install mysql-client libmysqlclient-dev -y
        if: matrix.config.os == 'ubuntu-latest'

      - name: Set CXX and CC
        shell: pwsh
        run: |
          $cxx_compiler = '${{ matrix.config.cxx-compiler }}'
          $c_compiler = '${{ matrix.config.c-compiler }}'
          $version = '${{ matrix.config.compiler-version }}'

          if ($version -ne 'default') {
            $cxx_compiler = "$cxx_compiler-$version"
            $c_compiler = "$c_compiler-$version"
          }

          echo "::set-env name=CXX::$cxx_compiler"
          echo "::set-env name=CC::$c_compiler"
#        if: matrix.config.os == 'ubuntu-latest'

      - name: Download Ninja and CMake
        id: cmake_and_ninja
        shell: cmake -P {0}
        run: |
          set(ninja_version "1.9.0")
          set(cmake_version "3.16.2")
        
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
            set(cmake_suffix "win64-x64.zip")
            set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
            set(cmake_suffix "Linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
          endif()

          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./bin-build/ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip
            WORKING_DIRECTORY ./bin-build)

          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          message("::set-output name=cmake_dir::${cmake_dir}")
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_dir)
          message("::set-output name=ninja_path::${ninja_dir}")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x bin-build/ninja
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()
      - name: vcvars
        run: |
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
          less "%temp%\vcvars.txt"

        if: matrix.config.os != 'ubuntu-latest'
      - name: setenv
        run: |
          echo "::add-path::$GITHUB_WORKSPACE/bin-build"
          echo "::add-path::${{ steps.cmake_and_ninja.outputs.cmake_dir }}"
      - name: Build
        run: |
          cd bin-build
          ./ninja --version
          cmake --version

          cmake .. -G Ninja
          cmake --build . --config ${{ matrix.config.build-type }} -- -j 2

      - name: Test
        run: |
          cd bin-build
          ctest --output-on-failure -C ${{ matrix.config.build-type }}
