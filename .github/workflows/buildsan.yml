name: SanitizerBuild

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.config.name}} Build
    strategy:
      fail-fast: false
      matrix:
        config:
          - san: TSAN
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 14
            build-type: RelWithDebInfo
            name: ThreadSanitizer
          - san: ASAN
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 14
            build-type: RelWithDebInfo
            name: AddressSanitizer
          - san: USAN
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 14
            build-type: RelWithDebInfo
            name: UndefinedSanitizer

    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Cache curl
        uses: actions/cache@v4
        with:
          path: lib/curl-8.2.1
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-curl-8.2.1
      - name: Cache antlr
        uses: actions/cache@v4
        with:
          path: lib/antlr
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-antlr-4.13.1
      - name: Cache boost
        uses: actions/cache@v4
        with:
          path: lib/boost_1_83_0
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-boost-1.83.0-2
      - name: Cache cppdap
        uses: actions/cache@v4
        with:
          path: lib/cppdap-2a4c7cf
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-cppdap-2a4c7cf
      - name: Install Compiler and Dependencies
        shell: pwsh
        run: |
          sudo apt-get update

          $compiler = "${{ matrix.config.cxx-compiler }}"
          $version = "${{ matrix.config.compiler-version }}"

          if ($version -ne 'default') {
            sudo apt-get install "$compiler-$version" -y
          }
          sudo apt-get install libmysqlclient-dev -y
          sudo apt-get install kwstyle -y
          sudo apt-get install uuid-dev -y

          $ninja_version = "1.9.0"
          $cmake_version = "3.16.2"
          $cmake_archive = "cmake-$cmake_version-Linux-x86_64"
          wget -q "https://github.com/ninja-build/ninja/releases/download/v$ninja_version/ninja-linux.zip"
          unzip -q ninja-linux.zip -d bin-build
          wget -q "https://github.com/Kitware/CMake/releases/download/v$cmake_version/$cmake_archive.tar.gz"
          tar -xf "$cmake_archive.tar.gz"

          chmod +x bin-build/ninja
          chmod +x "$cmake_archive/bin/cmake"
          echo "$Env:GITHUB_WORKSPACE/bin-build" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$Env:GITHUB_WORKSPACE/$cmake_archive/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set CXX and CC
        shell: pwsh
        run: |
          $cxx_compiler = '${{ matrix.config.cxx-compiler }}'
          $c_compiler = '${{ matrix.config.c-compiler }}'
          $version = '${{ matrix.config.compiler-version }}'

          if ($version -ne 'default') {
            $cxx_compiler = "$cxx_compiler-$version"
            $c_compiler = "$c_compiler-$version"
          }
          echo "CXX=$cxx_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC=$c_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Register problem matcher
        run: echo "::add-matcher::.github/problem-matchers/${{ matrix.config.c-compiler }}.json"
      - name: Set mmap_rnd_bits
        run: |
          sudo sysctl vm.mmap_rnd_bits
          sudo sysctl vm.mmap_rnd_bits=28
      - name: Config
        run: |
          cd bin-build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config.build-type }} -DENABLE_${{ matrix.config.san }}=1
      - name: Build
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} -- -j 2

      - name: Start MySQL
        shell: pwsh
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS poltest;" -uroot -proot
          echo "POLCORE_TESTSQL=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Test (EScript)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_escript
      - name: Test (Shard Fixtures)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_pol_fixture
      - name: Test (UnitTests)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target unittest_pol
      - name: Test (Shard)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_pol_only
          #env:
          #POLCORE_TEST_FILTER: testitems
      - name: Test (Ecompile Watch)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_ecompile_watch
      - name: Upload shard test log
        uses: actions/upload-artifact@v4
        with:
          name: Testlog-${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.san }}
          path: bin-build/coretest/log/pol.log

  notify_on_failure:
    needs: build
    runs-on: "ubuntu-latest"
    if: failure()
    steps:
      - name: Discord notification failure
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: failure
          job: SanitizerBuilds
  notify_on_success:
    needs: build
    runs-on: "ubuntu-latest"
    if: success()
    steps:
      - name: Discord notification success
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: success
          job: SanitizerBuilds
  notify_on_cancel:
    needs: build
    runs-on: "ubuntu-latest"
    if: cancelled()
    steps:
      - name: Discord notification cancelled
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: cancelled
          job: SanitizerBuilds
