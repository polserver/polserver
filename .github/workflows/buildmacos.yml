name: Build MacOS

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: "macos-14"
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: default
            build-type: Release


    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Cache curl
        uses: actions/cache@v4
        with:
          path: lib/curl-8_14_1
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-curl-8.14.1-1
      - name: Cache antlr
        uses: actions/cache@v4
        with:
          path: lib/antlr-cb85012
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-antlr-cb85012
      - name: Cache boost
        uses: actions/cache@v4
        with:
          path: lib/boost_1_87_0
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-boost-1.87.0
      - name: Cache cppdap
        uses: actions/cache@v4
        with:
          path: lib/cppdap-82beeea
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-cppdap-82beeea
      - name: Install Dependencies
        shell: bash
        run: |
          set -e
          /opt/homebrew/bin/pip3.13 install --break-system-packages aiosmtpd
          brew bundle --file=bin-build/Brewfile
          # Update the Homebrew-installed shared library binaries with the other architecture (amd64) via `brew-universalize`.
          ./bin-build/brew-universalize mysql-client mysql-connector-c++ openssl@3 libssh2
          OPENSSL_VERSION_INSTALLED=$(brew info --json openssl@3 | jq -r '.[0].installed[0].version')
          MYSQL_CLIENT_VERSION_INSTALLED=$(brew info --json mysql-client | jq -r '.[0].installed[0].version')
          echo "PKG_CONFIG_PATH=/opt/homebrew/Cellar/openssl@3/$OPENSSL_VERSION_INSTALLED/lib/pkgconfig:/opt/homebrew/Cellar/mysql-client/$MYSQL_CLIENT_VERSION_INSTALLED/lib/pkgconfig:$Env:PKG_CONFIG_PATH" >> $GITHUB_ENV
          #env:
          #HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: '1'

      - name: Set CXX and CC
        shell: pwsh
        run: |
          $cxx_compiler = "${{ matrix.config.cxx-compiler }}"
          $c_compiler = "${{ matrix.config.c-compiler }}"
          $version = '${{ matrix.config.compiler-version }}'

          if ($version -ne 'default') {
            $cxx_compiler = "$cxx_compiler-$version"
            $c_compiler = "$c_compiler-$version"
          }

          echo "CXX=$cxx_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC=$c_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "MACOSX_DEPLOYMENT_TARGET=13.3" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Config
        run: |
          cd bin-build
          cmake .. -G Ninja -DREUSE_PCH=1 -DCMAKE_BUILD_TYPE=${{ matrix.config.build-type }} -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'
      - name: Build
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} -- -j 4

      - name: Test (EScript)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_escript
      - name: Test (Shard Fixtures)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_pol_fixture
      - name: Test (UnitTests)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target unittest_pol
      - name: Test (Shard)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_pol_only
      - name: Test (Ecompile Watch)
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target test_ecompile_watch
      - name: Upload shard test log
        uses: actions/upload-artifact@v4
        with:
          name: Testlog-${{ runner.os }}-${{ matrix.config.cxx-compiler }}
          path: bin-build/coretest/log/pol.log
      - name: Create Artefact
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target package
          cd ../bin
          mkdir release
          mv *.zip release

      - name: Upload Artefact
        uses: actions/upload-artifact@v4
        with:
          name: Nightly-${{ runner.os }}-${{ matrix.config.cxx-compiler }}
          path: bin/release

  notify_on_failure:
    needs: build
    runs-on: "ubuntu-latest"
    if: failure()
    steps:
      - name: Discord notification failure
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: failure
          job: Building (MacOS)
  notify_on_success:
    needs: build
    runs-on: "ubuntu-latest"
    if: success()
    steps:
      - name: Discord notification success
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: success
          job: Building (MacOS)
  notify_on_cancel:
    needs: build
    runs-on: "ubuntu-latest"
    if: cancelled()
    steps:
      - name: Discord notification cancelled
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: cancelled
          job: Building (MacOS)
