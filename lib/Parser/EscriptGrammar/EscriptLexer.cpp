
// Generated from EscriptLexer.g4 by ANTLR 4.13.1


#include "EscriptLexer.h"


using namespace antlr4;

using namespace EscriptGrammar;


using namespace antlr4;

namespace {

struct EscriptLexerStaticData final {
  EscriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EscriptLexerStaticData(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData(EscriptLexerStaticData&&) = delete;
  EscriptLexerStaticData& operator=(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData& operator=(EscriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag escriptlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
EscriptLexerStaticData *escriptlexerLexerStaticData = nullptr;

void escriptlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (escriptlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(escriptlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<EscriptLexerStaticData>(
    std::vector<std::string>{
      "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST",
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION",
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR",
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM",
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP",
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER",
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "ELLIPSIS",
      "AND_A", "AND_B", "AND", "OR_A", "OR_B", "OR", "BANG_A", "BANG_B",
      "BANG", "BYREF", "UNUSED", "TOK_ERROR", "HASH", "DICTIONARY", "STRUCT",
      "ARRAY", "STACK", "TOK_IN", "UNINIT", "BOOL_TRUE", "BOOL_FALSE", "DECIMAL_LITERAL",
      "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL",
      "STRING_LITERAL", "INTERPOLATED_STRING_START", "LPAREN", "RPAREN",
      "LBRACK", "RBRACK", "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV",
      "MOD", "ADD", "SUB", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN",
      "MOD_ASSIGN", "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND",
      "CARET", "BITOR", "NOTEQUAL_A", "NOTEQUAL_B", "NOTEQUAL", "EQUAL_DEPRECATED",
      "EQUAL", "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI",
      "COMMA", "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS",
      "QUESTION", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart",
      "EscapeSequence", "HexDigits", "HexDigit", "Digits", "LetterOrDigit",
      "Letter", "DOUBLE_LBRACE_INSIDE", "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE",
      "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE", "STRING_LITERAL_INSIDE", "DOUBLE_RBRACE_INSIDE",
      "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "INTERPOLATION_STRING", "INTERPOLATION_FORMAT"
    },
    std::vector<std::string>{
      "", "'if'", "'then'", "'elseif'", "'endif'", "'else'", "'goto'", "'return'",
      "'const'", "'var'", "'do'", "'dowhile'", "'while'", "'endwhile'",
      "'exit'", "'function'", "'endfunction'", "'exported'", "'use'", "'include'",
      "'break'", "'continue'", "'for'", "'endfor'", "'to'", "'foreach'",
      "'endforeach'", "'repeat'", "'until'", "'program'", "'endprogram'",
      "'case'", "'default'", "'endcase'", "'enum'", "'endenum'", "'downto'",
      "'step'", "'reference'", "'out'", "'inout'", "'ByVal'", "'string'",
      "'long'", "'integer'", "'unsigned'", "'signed'", "'real'", "'float'",
      "'double'", "'as'", "'is'", "'...'", "'&&'", "'and'", "'||'", "'or'",
      "'!'", "'not'", "'byref'", "'unused'", "'error'", "'hash'", "'dictionary'",
      "'struct'", "'array'", "'stack'", "'in'", "'uninit'", "'true'", "'false'",
      "", "", "", "", "", "", "", "", "'('", "')'", "'['", "']'", "'{'",
      "'}'", "'.'", "'->'", "'*'", "'/'", "'%'", "'+'", "'-'", "'+='", "'-='",
      "'*='", "'/='", "'%='", "'<='", "'<'", "'>='", "'>'", "'>>'", "'<<'",
      "'&'", "'^'", "'|'", "'<>'", "'!='", "'='", "'=='", "':='", "'.+'",
      "'.-'", "'.\\u003F'", "';'", "','", "'~'", "'@'", "'::'", "':'", "'++'",
      "'--'", "'\\u003F:'", "'\\u003F'", "", "", "", "", "'{{'"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST",
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION",
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR",
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM",
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP",
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER",
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "ELLIPSIS",
      "AND_A", "AND_B", "OR_A", "OR_B", "BANG_A", "BANG_B", "BYREF", "UNUSED",
      "TOK_ERROR", "HASH", "DICTIONARY", "STRUCT", "ARRAY", "STACK", "TOK_IN",
      "UNINIT", "BOOL_TRUE", "BOOL_FALSE", "DECIMAL_LITERAL", "HEX_LITERAL",
      "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL",
      "STRING_LITERAL", "INTERPOLATED_STRING_START", "LPAREN", "RPAREN",
      "LBRACK", "RBRACK", "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV",
      "MOD", "ADD", "SUB", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN",
      "MOD_ASSIGN", "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND",
      "CARET", "BITOR", "NOTEQUAL_A", "NOTEQUAL_B", "EQUAL_DEPRECATED",
      "EQUAL", "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI",
      "COMMA", "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS",
      "QUESTION", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "DOUBLE_LBRACE_INSIDE",
      "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE",
      "STRING_LITERAL_INSIDE", "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,135,1063,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,
  	5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
  	13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
  	20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
  	27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,
  	34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,
  	41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,
  	48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
  	55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,
  	62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,
  	69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,
  	76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
  	83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
  	90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,
  	97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
  	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
  	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
  	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
  	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
  	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
  	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
  	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
  	7,145,2,146,7,146,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
  	5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
  	1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
  	13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
  	30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
  	36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,
  	38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
  	40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,
  	47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
  	49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,
  	53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,647,8,54,1,55,1,55,1,55,1,56,1,
  	56,1,56,1,57,1,57,1,57,1,57,3,57,659,8,57,1,58,1,58,1,59,1,59,1,59,1,
  	59,1,60,1,60,1,60,1,60,3,60,671,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,
  	64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
  	68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,
  	70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,
  	73,1,73,3,73,751,8,73,3,73,753,8,73,1,74,1,74,1,74,1,74,1,75,1,75,4,75,
  	761,8,75,11,75,12,75,762,1,76,1,76,1,76,4,76,768,8,76,11,76,12,76,769,
  	1,77,1,77,1,77,3,77,775,8,77,1,77,1,77,3,77,779,8,77,1,77,3,77,782,8,
  	77,1,77,1,77,1,77,3,77,787,8,77,1,78,1,78,1,78,1,78,3,78,793,8,78,1,78,
  	3,78,796,8,78,1,78,1,78,3,78,800,8,78,1,78,1,78,3,78,804,8,78,1,78,1,
  	78,1,79,1,79,1,79,5,79,811,8,79,10,79,12,79,814,9,79,1,79,1,79,1,80,1,
  	80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,
  	85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,90,1,
  	90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,
  	96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,101,
  	1,101,1,101,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,104,1,105,1,105,
  	1,106,1,106,1,107,1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,110,1,110,
  	1,110,1,110,3,110,901,8,110,1,111,1,111,1,112,1,112,1,112,1,113,1,113,
  	1,113,1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,1,116,1,117,1,117,
  	1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,
  	1,123,1,123,1,123,1,124,1,124,1,124,1,125,1,125,1,125,1,126,1,126,1,127,
  	4,127,946,8,127,11,127,12,127,947,1,127,1,127,1,128,1,128,1,128,1,128,
  	5,128,956,8,128,10,128,12,128,959,9,128,1,128,1,128,1,128,1,128,1,128,
  	1,129,1,129,1,129,1,129,5,129,970,8,129,10,129,12,129,973,9,129,1,129,
  	1,129,1,130,1,130,5,130,979,8,130,10,130,12,130,982,9,130,1,131,1,131,
  	3,131,986,8,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
  	3,132,997,8,132,1,133,1,133,5,133,1001,8,133,10,133,12,133,1004,9,133,
  	1,134,1,134,1,135,1,135,5,135,1010,8,135,10,135,12,135,1013,9,135,1,136,
  	1,136,3,136,1017,8,136,1,137,1,137,1,137,1,137,3,137,1023,8,137,1,138,
  	1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,141,1,141,1,141,
  	1,141,1,141,1,142,1,142,1,142,1,143,4,143,1044,8,143,11,143,12,143,1045,
  	1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,1,146,
  	4,146,1060,8,146,11,146,12,146,1061,1,957,0,147,3,1,5,2,7,3,9,4,11,5,
  	13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,
  	18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,
  	61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,81,40,83,
  	41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,49,101,50,103,51,105,
  	52,107,53,109,54,111,0,113,55,115,56,117,0,119,57,121,58,123,0,125,59,
  	127,60,129,61,131,62,133,63,135,64,137,65,139,66,141,67,143,68,145,69,
  	147,70,149,71,151,72,153,73,155,74,157,75,159,76,161,77,163,78,165,79,
  	167,80,169,81,171,82,173,83,175,84,177,85,179,86,181,87,183,88,185,89,
  	187,90,189,91,191,92,193,93,195,94,197,95,199,96,201,97,203,98,205,99,
  	207,100,209,101,211,102,213,103,215,104,217,105,219,106,221,107,223,0,
  	225,108,227,109,229,110,231,111,233,112,235,113,237,114,239,115,241,116,
  	243,117,245,118,247,119,249,120,251,121,253,122,255,123,257,124,259,125,
  	261,126,263,127,265,0,267,0,269,0,271,0,273,0,275,0,277,0,279,128,281,
  	129,283,130,285,131,287,132,289,133,291,0,293,134,295,135,3,0,1,2,19,
  	1,0,49,57,2,0,88,88,120,120,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,80,
  	80,112,112,2,0,43,43,45,45,2,0,34,34,92,92,3,0,9,10,12,13,32,32,2,0,10,
  	10,13,13,2,0,69,69,101,101,3,0,48,57,65,70,97,102,1,0,48,57,4,0,36,36,
  	65,90,95,95,97,122,2,0,0,127,55296,56319,1,0,55296,56319,1,0,56320,57343,
  	4,0,34,34,92,92,123,123,125,125,1,0,125,125,1080,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
  	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,113,1,0,0,
  	0,0,115,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,
  	0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,
  	0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,
  	0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,
  	0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,
  	0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,
  	0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,
  	0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,
  	0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,0,
  	0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,0,
  	0,0,219,1,0,0,0,0,221,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,1,0,0,
  	0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,1,0,0,
  	0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,1,0,0,
  	0,0,251,1,0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,0,257,1,0,0,0,0,259,1,0,0,
  	0,0,261,1,0,0,0,0,263,1,0,0,0,1,279,1,0,0,0,1,281,1,0,0,0,1,283,1,0,0,
  	0,1,285,1,0,0,0,1,287,1,0,0,0,1,289,1,0,0,0,2,291,1,0,0,0,2,293,1,0,0,
  	0,2,295,1,0,0,0,3,297,1,0,0,0,5,300,1,0,0,0,7,305,1,0,0,0,9,312,1,0,0,
  	0,11,318,1,0,0,0,13,323,1,0,0,0,15,328,1,0,0,0,17,335,1,0,0,0,19,341,
  	1,0,0,0,21,345,1,0,0,0,23,348,1,0,0,0,25,356,1,0,0,0,27,362,1,0,0,0,29,
  	371,1,0,0,0,31,376,1,0,0,0,33,385,1,0,0,0,35,397,1,0,0,0,37,406,1,0,0,
  	0,39,410,1,0,0,0,41,418,1,0,0,0,43,424,1,0,0,0,45,433,1,0,0,0,47,437,
  	1,0,0,0,49,444,1,0,0,0,51,447,1,0,0,0,53,455,1,0,0,0,55,466,1,0,0,0,57,
  	473,1,0,0,0,59,479,1,0,0,0,61,487,1,0,0,0,63,498,1,0,0,0,65,503,1,0,0,
  	0,67,511,1,0,0,0,69,519,1,0,0,0,71,524,1,0,0,0,73,532,1,0,0,0,75,539,
  	1,0,0,0,77,544,1,0,0,0,79,554,1,0,0,0,81,558,1,0,0,0,83,564,1,0,0,0,85,
  	570,1,0,0,0,87,577,1,0,0,0,89,582,1,0,0,0,91,590,1,0,0,0,93,599,1,0,0,
  	0,95,606,1,0,0,0,97,611,1,0,0,0,99,617,1,0,0,0,101,624,1,0,0,0,103,627,
  	1,0,0,0,105,630,1,0,0,0,107,634,1,0,0,0,109,637,1,0,0,0,111,646,1,0,0,
  	0,113,648,1,0,0,0,115,651,1,0,0,0,117,658,1,0,0,0,119,660,1,0,0,0,121,
  	662,1,0,0,0,123,670,1,0,0,0,125,672,1,0,0,0,127,678,1,0,0,0,129,685,1,
  	0,0,0,131,691,1,0,0,0,133,696,1,0,0,0,135,707,1,0,0,0,137,714,1,0,0,0,
  	139,720,1,0,0,0,141,726,1,0,0,0,143,729,1,0,0,0,145,736,1,0,0,0,147,741,
  	1,0,0,0,149,752,1,0,0,0,151,754,1,0,0,0,153,758,1,0,0,0,155,764,1,0,0,
  	0,157,786,1,0,0,0,159,788,1,0,0,0,161,807,1,0,0,0,163,817,1,0,0,0,165,
  	824,1,0,0,0,167,826,1,0,0,0,169,828,1,0,0,0,171,830,1,0,0,0,173,832,1,
  	0,0,0,175,835,1,0,0,0,177,838,1,0,0,0,179,840,1,0,0,0,181,843,1,0,0,0,
  	183,845,1,0,0,0,185,847,1,0,0,0,187,849,1,0,0,0,189,851,1,0,0,0,191,853,
  	1,0,0,0,193,856,1,0,0,0,195,859,1,0,0,0,197,862,1,0,0,0,199,865,1,0,0,
  	0,201,868,1,0,0,0,203,871,1,0,0,0,205,873,1,0,0,0,207,876,1,0,0,0,209,
  	878,1,0,0,0,211,881,1,0,0,0,213,884,1,0,0,0,215,886,1,0,0,0,217,888,1,
  	0,0,0,219,890,1,0,0,0,221,893,1,0,0,0,223,900,1,0,0,0,225,902,1,0,0,0,
  	227,904,1,0,0,0,229,907,1,0,0,0,231,910,1,0,0,0,233,913,1,0,0,0,235,916,
  	1,0,0,0,237,919,1,0,0,0,239,921,1,0,0,0,241,923,1,0,0,0,243,925,1,0,0,
  	0,245,927,1,0,0,0,247,930,1,0,0,0,249,933,1,0,0,0,251,936,1,0,0,0,253,
  	939,1,0,0,0,255,942,1,0,0,0,257,945,1,0,0,0,259,951,1,0,0,0,261,965,1,
  	0,0,0,263,976,1,0,0,0,265,983,1,0,0,0,267,996,1,0,0,0,269,998,1,0,0,0,
  	271,1005,1,0,0,0,273,1007,1,0,0,0,275,1016,1,0,0,0,277,1022,1,0,0,0,279,
  	1024,1,0,0,0,281,1027,1,0,0,0,283,1032,1,0,0,0,285,1034,1,0,0,0,287,1039,
  	1,0,0,0,289,1043,1,0,0,0,291,1047,1,0,0,0,293,1052,1,0,0,0,295,1059,1,
  	0,0,0,297,298,5,105,0,0,298,299,5,102,0,0,299,4,1,0,0,0,300,301,5,116,
  	0,0,301,302,5,104,0,0,302,303,5,101,0,0,303,304,5,110,0,0,304,6,1,0,0,
  	0,305,306,5,101,0,0,306,307,5,108,0,0,307,308,5,115,0,0,308,309,5,101,
  	0,0,309,310,5,105,0,0,310,311,5,102,0,0,311,8,1,0,0,0,312,313,5,101,0,
  	0,313,314,5,110,0,0,314,315,5,100,0,0,315,316,5,105,0,0,316,317,5,102,
  	0,0,317,10,1,0,0,0,318,319,5,101,0,0,319,320,5,108,0,0,320,321,5,115,
  	0,0,321,322,5,101,0,0,322,12,1,0,0,0,323,324,5,103,0,0,324,325,5,111,
  	0,0,325,326,5,116,0,0,326,327,5,111,0,0,327,14,1,0,0,0,328,329,5,114,
  	0,0,329,330,5,101,0,0,330,331,5,116,0,0,331,332,5,117,0,0,332,333,5,114,
  	0,0,333,334,5,110,0,0,334,16,1,0,0,0,335,336,5,99,0,0,336,337,5,111,0,
  	0,337,338,5,110,0,0,338,339,5,115,0,0,339,340,5,116,0,0,340,18,1,0,0,
  	0,341,342,5,118,0,0,342,343,5,97,0,0,343,344,5,114,0,0,344,20,1,0,0,0,
  	345,346,5,100,0,0,346,347,5,111,0,0,347,22,1,0,0,0,348,349,5,100,0,0,
  	349,350,5,111,0,0,350,351,5,119,0,0,351,352,5,104,0,0,352,353,5,105,0,
  	0,353,354,5,108,0,0,354,355,5,101,0,0,355,24,1,0,0,0,356,357,5,119,0,
  	0,357,358,5,104,0,0,358,359,5,105,0,0,359,360,5,108,0,0,360,361,5,101,
  	0,0,361,26,1,0,0,0,362,363,5,101,0,0,363,364,5,110,0,0,364,365,5,100,
  	0,0,365,366,5,119,0,0,366,367,5,104,0,0,367,368,5,105,0,0,368,369,5,108,
  	0,0,369,370,5,101,0,0,370,28,1,0,0,0,371,372,5,101,0,0,372,373,5,120,
  	0,0,373,374,5,105,0,0,374,375,5,116,0,0,375,30,1,0,0,0,376,377,5,102,
  	0,0,377,378,5,117,0,0,378,379,5,110,0,0,379,380,5,99,0,0,380,381,5,116,
  	0,0,381,382,5,105,0,0,382,383,5,111,0,0,383,384,5,110,0,0,384,32,1,0,
  	0,0,385,386,5,101,0,0,386,387,5,110,0,0,387,388,5,100,0,0,388,389,5,102,
  	0,0,389,390,5,117,0,0,390,391,5,110,0,0,391,392,5,99,0,0,392,393,5,116,
  	0,0,393,394,5,105,0,0,394,395,5,111,0,0,395,396,5,110,0,0,396,34,1,0,
  	0,0,397,398,5,101,0,0,398,399,5,120,0,0,399,400,5,112,0,0,400,401,5,111,
  	0,0,401,402,5,114,0,0,402,403,5,116,0,0,403,404,5,101,0,0,404,405,5,100,
  	0,0,405,36,1,0,0,0,406,407,5,117,0,0,407,408,5,115,0,0,408,409,5,101,
  	0,0,409,38,1,0,0,0,410,411,5,105,0,0,411,412,5,110,0,0,412,413,5,99,0,
  	0,413,414,5,108,0,0,414,415,5,117,0,0,415,416,5,100,0,0,416,417,5,101,
  	0,0,417,40,1,0,0,0,418,419,5,98,0,0,419,420,5,114,0,0,420,421,5,101,0,
  	0,421,422,5,97,0,0,422,423,5,107,0,0,423,42,1,0,0,0,424,425,5,99,0,0,
  	425,426,5,111,0,0,426,427,5,110,0,0,427,428,5,116,0,0,428,429,5,105,0,
  	0,429,430,5,110,0,0,430,431,5,117,0,0,431,432,5,101,0,0,432,44,1,0,0,
  	0,433,434,5,102,0,0,434,435,5,111,0,0,435,436,5,114,0,0,436,46,1,0,0,
  	0,437,438,5,101,0,0,438,439,5,110,0,0,439,440,5,100,0,0,440,441,5,102,
  	0,0,441,442,5,111,0,0,442,443,5,114,0,0,443,48,1,0,0,0,444,445,5,116,
  	0,0,445,446,5,111,0,0,446,50,1,0,0,0,447,448,5,102,0,0,448,449,5,111,
  	0,0,449,450,5,114,0,0,450,451,5,101,0,0,451,452,5,97,0,0,452,453,5,99,
  	0,0,453,454,5,104,0,0,454,52,1,0,0,0,455,456,5,101,0,0,456,457,5,110,
  	0,0,457,458,5,100,0,0,458,459,5,102,0,0,459,460,5,111,0,0,460,461,5,114,
  	0,0,461,462,5,101,0,0,462,463,5,97,0,0,463,464,5,99,0,0,464,465,5,104,
  	0,0,465,54,1,0,0,0,466,467,5,114,0,0,467,468,5,101,0,0,468,469,5,112,
  	0,0,469,470,5,101,0,0,470,471,5,97,0,0,471,472,5,116,0,0,472,56,1,0,0,
  	0,473,474,5,117,0,0,474,475,5,110,0,0,475,476,5,116,0,0,476,477,5,105,
  	0,0,477,478,5,108,0,0,478,58,1,0,0,0,479,480,5,112,0,0,480,481,5,114,
  	0,0,481,482,5,111,0,0,482,483,5,103,0,0,483,484,5,114,0,0,484,485,5,97,
  	0,0,485,486,5,109,0,0,486,60,1,0,0,0,487,488,5,101,0,0,488,489,5,110,
  	0,0,489,490,5,100,0,0,490,491,5,112,0,0,491,492,5,114,0,0,492,493,5,111,
  	0,0,493,494,5,103,0,0,494,495,5,114,0,0,495,496,5,97,0,0,496,497,5,109,
  	0,0,497,62,1,0,0,0,498,499,5,99,0,0,499,500,5,97,0,0,500,501,5,115,0,
  	0,501,502,5,101,0,0,502,64,1,0,0,0,503,504,5,100,0,0,504,505,5,101,0,
  	0,505,506,5,102,0,0,506,507,5,97,0,0,507,508,5,117,0,0,508,509,5,108,
  	0,0,509,510,5,116,0,0,510,66,1,0,0,0,511,512,5,101,0,0,512,513,5,110,
  	0,0,513,514,5,100,0,0,514,515,5,99,0,0,515,516,5,97,0,0,516,517,5,115,
  	0,0,517,518,5,101,0,0,518,68,1,0,0,0,519,520,5,101,0,0,520,521,5,110,
  	0,0,521,522,5,117,0,0,522,523,5,109,0,0,523,70,1,0,0,0,524,525,5,101,
  	0,0,525,526,5,110,0,0,526,527,5,100,0,0,527,528,5,101,0,0,528,529,5,110,
  	0,0,529,530,5,117,0,0,530,531,5,109,0,0,531,72,1,0,0,0,532,533,5,100,
  	0,0,533,534,5,111,0,0,534,535,5,119,0,0,535,536,5,110,0,0,536,537,5,116,
  	0,0,537,538,5,111,0,0,538,74,1,0,0,0,539,540,5,115,0,0,540,541,5,116,
  	0,0,541,542,5,101,0,0,542,543,5,112,0,0,543,76,1,0,0,0,544,545,5,114,
  	0,0,545,546,5,101,0,0,546,547,5,102,0,0,547,548,5,101,0,0,548,549,5,114,
  	0,0,549,550,5,101,0,0,550,551,5,110,0,0,551,552,5,99,0,0,552,553,5,101,
  	0,0,553,78,1,0,0,0,554,555,5,111,0,0,555,556,5,117,0,0,556,557,5,116,
  	0,0,557,80,1,0,0,0,558,559,5,105,0,0,559,560,5,110,0,0,560,561,5,111,
  	0,0,561,562,5,117,0,0,562,563,5,116,0,0,563,82,1,0,0,0,564,565,5,66,0,
  	0,565,566,5,121,0,0,566,567,5,86,0,0,567,568,5,97,0,0,568,569,5,108,0,
  	0,569,84,1,0,0,0,570,571,5,115,0,0,571,572,5,116,0,0,572,573,5,114,0,
  	0,573,574,5,105,0,0,574,575,5,110,0,0,575,576,5,103,0,0,576,86,1,0,0,
  	0,577,578,5,108,0,0,578,579,5,111,0,0,579,580,5,110,0,0,580,581,5,103,
  	0,0,581,88,1,0,0,0,582,583,5,105,0,0,583,584,5,110,0,0,584,585,5,116,
  	0,0,585,586,5,101,0,0,586,587,5,103,0,0,587,588,5,101,0,0,588,589,5,114,
  	0,0,589,90,1,0,0,0,590,591,5,117,0,0,591,592,5,110,0,0,592,593,5,115,
  	0,0,593,594,5,105,0,0,594,595,5,103,0,0,595,596,5,110,0,0,596,597,5,101,
  	0,0,597,598,5,100,0,0,598,92,1,0,0,0,599,600,5,115,0,0,600,601,5,105,
  	0,0,601,602,5,103,0,0,602,603,5,110,0,0,603,604,5,101,0,0,604,605,5,100,
  	0,0,605,94,1,0,0,0,606,607,5,114,0,0,607,608,5,101,0,0,608,609,5,97,0,
  	0,609,610,5,108,0,0,610,96,1,0,0,0,611,612,5,102,0,0,612,613,5,108,0,
  	0,613,614,5,111,0,0,614,615,5,97,0,0,615,616,5,116,0,0,616,98,1,0,0,0,
  	617,618,5,100,0,0,618,619,5,111,0,0,619,620,5,117,0,0,620,621,5,98,0,
  	0,621,622,5,108,0,0,622,623,5,101,0,0,623,100,1,0,0,0,624,625,5,97,0,
  	0,625,626,5,115,0,0,626,102,1,0,0,0,627,628,5,105,0,0,628,629,5,115,0,
  	0,629,104,1,0,0,0,630,631,5,46,0,0,631,632,5,46,0,0,632,633,5,46,0,0,
  	633,106,1,0,0,0,634,635,5,38,0,0,635,636,5,38,0,0,636,108,1,0,0,0,637,
  	638,5,97,0,0,638,639,5,110,0,0,639,640,5,100,0,0,640,110,1,0,0,0,641,
  	642,5,38,0,0,642,647,5,38,0,0,643,644,5,97,0,0,644,645,5,110,0,0,645,
  	647,5,100,0,0,646,641,1,0,0,0,646,643,1,0,0,0,647,112,1,0,0,0,648,649,
  	5,124,0,0,649,650,5,124,0,0,650,114,1,0,0,0,651,652,5,111,0,0,652,653,
  	5,114,0,0,653,116,1,0,0,0,654,655,5,124,0,0,655,659,5,124,0,0,656,657,
  	5,111,0,0,657,659,5,114,0,0,658,654,1,0,0,0,658,656,1,0,0,0,659,118,1,
  	0,0,0,660,661,5,33,0,0,661,120,1,0,0,0,662,663,5,110,0,0,663,664,5,111,
  	0,0,664,665,5,116,0,0,665,122,1,0,0,0,666,671,5,33,0,0,667,668,5,110,
  	0,0,668,669,5,111,0,0,669,671,5,116,0,0,670,666,1,0,0,0,670,667,1,0,0,
  	0,671,124,1,0,0,0,672,673,5,98,0,0,673,674,5,121,0,0,674,675,5,114,0,
  	0,675,676,5,101,0,0,676,677,5,102,0,0,677,126,1,0,0,0,678,679,5,117,0,
  	0,679,680,5,110,0,0,680,681,5,117,0,0,681,682,5,115,0,0,682,683,5,101,
  	0,0,683,684,5,100,0,0,684,128,1,0,0,0,685,686,5,101,0,0,686,687,5,114,
  	0,0,687,688,5,114,0,0,688,689,5,111,0,0,689,690,5,114,0,0,690,130,1,0,
  	0,0,691,692,5,104,0,0,692,693,5,97,0,0,693,694,5,115,0,0,694,695,5,104,
  	0,0,695,132,1,0,0,0,696,697,5,100,0,0,697,698,5,105,0,0,698,699,5,99,
  	0,0,699,700,5,116,0,0,700,701,5,105,0,0,701,702,5,111,0,0,702,703,5,110,
  	0,0,703,704,5,97,0,0,704,705,5,114,0,0,705,706,5,121,0,0,706,134,1,0,
  	0,0,707,708,5,115,0,0,708,709,5,116,0,0,709,710,5,114,0,0,710,711,5,117,
  	0,0,711,712,5,99,0,0,712,713,5,116,0,0,713,136,1,0,0,0,714,715,5,97,0,
  	0,715,716,5,114,0,0,716,717,5,114,0,0,717,718,5,97,0,0,718,719,5,121,
  	0,0,719,138,1,0,0,0,720,721,5,115,0,0,721,722,5,116,0,0,722,723,5,97,
  	0,0,723,724,5,99,0,0,724,725,5,107,0,0,725,140,1,0,0,0,726,727,5,105,
  	0,0,727,728,5,110,0,0,728,142,1,0,0,0,729,730,5,117,0,0,730,731,5,110,
  	0,0,731,732,5,105,0,0,732,733,5,110,0,0,733,734,5,105,0,0,734,735,5,116,
  	0,0,735,144,1,0,0,0,736,737,5,116,0,0,737,738,5,114,0,0,738,739,5,117,
  	0,0,739,740,5,101,0,0,740,146,1,0,0,0,741,742,5,102,0,0,742,743,5,97,
  	0,0,743,744,5,108,0,0,744,745,5,115,0,0,745,746,5,101,0,0,746,148,1,0,
  	0,0,747,753,5,48,0,0,748,750,7,0,0,0,749,751,3,273,135,0,750,749,1,0,
  	0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,747,1,0,0,0,752,748,1,0,0,0,753,
  	150,1,0,0,0,754,755,5,48,0,0,755,756,7,1,0,0,756,757,3,269,133,0,757,
  	152,1,0,0,0,758,760,5,48,0,0,759,761,7,2,0,0,760,759,1,0,0,0,761,762,
  	1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,154,1,0,0,0,764,765,5,48,
  	0,0,765,767,7,3,0,0,766,768,7,4,0,0,767,766,1,0,0,0,768,769,1,0,0,0,769,
  	767,1,0,0,0,769,770,1,0,0,0,770,156,1,0,0,0,771,772,3,273,135,0,772,774,
  	5,46,0,0,773,775,3,273,135,0,774,773,1,0,0,0,774,775,1,0,0,0,775,779,
  	1,0,0,0,776,777,5,46,0,0,777,779,3,273,135,0,778,771,1,0,0,0,778,776,
  	1,0,0,0,779,781,1,0,0,0,780,782,3,265,131,0,781,780,1,0,0,0,781,782,1,
  	0,0,0,782,787,1,0,0,0,783,784,3,273,135,0,784,785,3,265,131,0,785,787,
  	1,0,0,0,786,778,1,0,0,0,786,783,1,0,0,0,787,158,1,0,0,0,788,789,5,48,
  	0,0,789,799,7,1,0,0,790,792,3,269,133,0,791,793,5,46,0,0,792,791,1,0,
  	0,0,792,793,1,0,0,0,793,800,1,0,0,0,794,796,3,269,133,0,795,794,1,0,0,
  	0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,5,46,0,0,798,800,3,269,133,
  	0,799,790,1,0,0,0,799,795,1,0,0,0,800,801,1,0,0,0,801,803,7,5,0,0,802,
  	804,7,6,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,3,
  	273,135,0,806,160,1,0,0,0,807,812,5,34,0,0,808,811,8,7,0,0,809,811,3,
  	267,132,0,810,808,1,0,0,0,810,809,1,0,0,0,811,814,1,0,0,0,812,810,1,0,
  	0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,812,1,0,0,0,815,816,5,34,0,0,
  	816,162,1,0,0,0,817,818,5,36,0,0,818,819,5,34,0,0,819,820,1,0,0,0,820,
  	821,6,80,0,0,821,822,1,0,0,0,822,823,6,80,1,0,823,164,1,0,0,0,824,825,
  	5,40,0,0,825,166,1,0,0,0,826,827,5,41,0,0,827,168,1,0,0,0,828,829,5,91,
  	0,0,829,170,1,0,0,0,830,831,5,93,0,0,831,172,1,0,0,0,832,833,5,123,0,
  	0,833,834,6,85,2,0,834,174,1,0,0,0,835,836,5,125,0,0,836,837,6,86,3,0,
  	837,176,1,0,0,0,838,839,5,46,0,0,839,178,1,0,0,0,840,841,5,45,0,0,841,
  	842,5,62,0,0,842,180,1,0,0,0,843,844,5,42,0,0,844,182,1,0,0,0,845,846,
  	5,47,0,0,846,184,1,0,0,0,847,848,5,37,0,0,848,186,1,0,0,0,849,850,5,43,
  	0,0,850,188,1,0,0,0,851,852,5,45,0,0,852,190,1,0,0,0,853,854,5,43,0,0,
  	854,855,5,61,0,0,855,192,1,0,0,0,856,857,5,45,0,0,857,858,5,61,0,0,858,
  	194,1,0,0,0,859,860,5,42,0,0,860,861,5,61,0,0,861,196,1,0,0,0,862,863,
  	5,47,0,0,863,864,5,61,0,0,864,198,1,0,0,0,865,866,5,37,0,0,866,867,5,
  	61,0,0,867,200,1,0,0,0,868,869,5,60,0,0,869,870,5,61,0,0,870,202,1,0,
  	0,0,871,872,5,60,0,0,872,204,1,0,0,0,873,874,5,62,0,0,874,875,5,61,0,
  	0,875,206,1,0,0,0,876,877,5,62,0,0,877,208,1,0,0,0,878,879,5,62,0,0,879,
  	880,5,62,0,0,880,210,1,0,0,0,881,882,5,60,0,0,882,883,5,60,0,0,883,212,
  	1,0,0,0,884,885,5,38,0,0,885,214,1,0,0,0,886,887,5,94,0,0,887,216,1,0,
  	0,0,888,889,5,124,0,0,889,218,1,0,0,0,890,891,5,60,0,0,891,892,5,62,0,
  	0,892,220,1,0,0,0,893,894,5,33,0,0,894,895,5,61,0,0,895,222,1,0,0,0,896,
  	897,5,60,0,0,897,901,5,62,0,0,898,899,5,33,0,0,899,901,5,61,0,0,900,896,
  	1,0,0,0,900,898,1,0,0,0,901,224,1,0,0,0,902,903,5,61,0,0,903,226,1,0,
  	0,0,904,905,5,61,0,0,905,906,5,61,0,0,906,228,1,0,0,0,907,908,5,58,0,
  	0,908,909,5,61,0,0,909,230,1,0,0,0,910,911,5,46,0,0,911,912,5,43,0,0,
  	912,232,1,0,0,0,913,914,5,46,0,0,914,915,5,45,0,0,915,234,1,0,0,0,916,
  	917,5,46,0,0,917,918,5,63,0,0,918,236,1,0,0,0,919,920,5,59,0,0,920,238,
  	1,0,0,0,921,922,5,44,0,0,922,240,1,0,0,0,923,924,5,126,0,0,924,242,1,
  	0,0,0,925,926,5,64,0,0,926,244,1,0,0,0,927,928,5,58,0,0,928,929,5,58,
  	0,0,929,246,1,0,0,0,930,931,5,58,0,0,931,932,6,122,4,0,932,248,1,0,0,
  	0,933,934,5,43,0,0,934,935,5,43,0,0,935,250,1,0,0,0,936,937,5,45,0,0,
  	937,938,5,45,0,0,938,252,1,0,0,0,939,940,5,63,0,0,940,941,5,58,0,0,941,
  	254,1,0,0,0,942,943,5,63,0,0,943,256,1,0,0,0,944,946,7,8,0,0,945,944,
  	1,0,0,0,946,947,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,
  	0,949,950,6,127,5,0,950,258,1,0,0,0,951,952,5,47,0,0,952,953,5,42,0,0,
  	953,957,1,0,0,0,954,956,9,0,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,958,
  	1,0,0,0,957,955,1,0,0,0,958,960,1,0,0,0,959,957,1,0,0,0,960,961,5,42,
  	0,0,961,962,5,47,0,0,962,963,1,0,0,0,963,964,6,128,6,0,964,260,1,0,0,
  	0,965,966,5,47,0,0,966,967,5,47,0,0,967,971,1,0,0,0,968,970,8,9,0,0,969,
  	968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,
  	0,0,0,973,971,1,0,0,0,974,975,6,129,6,0,975,262,1,0,0,0,976,980,3,277,
  	137,0,977,979,3,275,136,0,978,977,1,0,0,0,979,982,1,0,0,0,980,978,1,0,
  	0,0,980,981,1,0,0,0,981,264,1,0,0,0,982,980,1,0,0,0,983,985,7,10,0,0,
  	984,986,7,6,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,
  	3,273,135,0,988,266,1,0,0,0,989,990,5,92,0,0,990,991,7,1,0,0,991,992,
  	3,271,134,0,992,993,3,271,134,0,993,997,1,0,0,0,994,995,5,92,0,0,995,
  	997,9,0,0,0,996,989,1,0,0,0,996,994,1,0,0,0,997,268,1,0,0,0,998,1002,
  	3,271,134,0,999,1001,3,271,134,0,1000,999,1,0,0,0,1001,1004,1,0,0,0,1002,
  	1000,1,0,0,0,1002,1003,1,0,0,0,1003,270,1,0,0,0,1004,1002,1,0,0,0,1005,
  	1006,7,11,0,0,1006,272,1,0,0,0,1007,1011,7,12,0,0,1008,1010,7,12,0,0,
  	1009,1008,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,
  	0,1012,274,1,0,0,0,1013,1011,1,0,0,0,1014,1017,3,277,137,0,1015,1017,
  	7,12,0,0,1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,276,1,0,0,0,1018,1023,
  	7,13,0,0,1019,1023,8,14,0,0,1020,1021,7,15,0,0,1021,1023,7,16,0,0,1022,
  	1018,1,0,0,0,1022,1019,1,0,0,0,1022,1020,1,0,0,0,1023,278,1,0,0,0,1024,
  	1025,5,123,0,0,1025,1026,5,123,0,0,1026,280,1,0,0,0,1027,1028,5,123,0,
  	0,1028,1029,6,139,7,0,1029,1030,1,0,0,0,1030,1031,6,139,8,0,1031,282,
  	1,0,0,0,1032,1033,3,267,132,0,1033,284,1,0,0,0,1034,1035,5,34,0,0,1035,
  	1036,6,141,9,0,1036,1037,1,0,0,0,1037,1038,6,141,10,0,1038,286,1,0,0,
  	0,1039,1040,5,125,0,0,1040,1041,5,125,0,0,1041,288,1,0,0,0,1042,1044,
  	8,17,0,0,1043,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1043,1,0,0,0,1045,1046,
  	1,0,0,0,1046,290,1,0,0,0,1047,1048,5,125,0,0,1048,1049,5,125,0,0,1049,
  	1050,1,0,0,0,1050,1051,6,144,11,0,1051,292,1,0,0,0,1052,1053,5,125,0,
  	0,1053,1054,6,145,12,0,1054,1055,1,0,0,0,1055,1056,6,145,13,0,1056,1057,
  	6,145,10,0,1057,294,1,0,0,0,1058,1060,8,18,0,0,1059,1058,1,0,0,0,1060,
  	1061,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,296,1,0,0,0,33,
  	0,1,2,646,658,670,750,752,762,769,774,778,781,786,792,795,799,803,810,
  	812,900,947,957,971,980,985,996,1002,1011,1016,1022,1045,1061,14,1,80,
  	0,5,1,0,1,85,1,1,86,2,1,122,3,0,1,0,0,2,0,1,139,4,5,0,0,1,141,5,4,0,0,
  	7,135,0,1,145,6,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) {
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  escriptlexerLexerStaticData = staticData.release();
}

}

EscriptLexer::EscriptLexer(CharStream *input) : Lexer(input) {
  EscriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *escriptlexerLexerStaticData->atn, escriptlexerLexerStaticData->decisionToDFA, escriptlexerLexerStaticData->sharedContextCache);
}

EscriptLexer::~EscriptLexer() {
  delete _interpreter;
}

std::string EscriptLexer::getGrammarFileName() const {
  return "EscriptLexer.g4";
}

const std::vector<std::string>& EscriptLexer::getRuleNames() const {
  return escriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EscriptLexer::getChannelNames() const {
  return escriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EscriptLexer::getModeNames() const {
  return escriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EscriptLexer::getVocabulary() const {
  return escriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EscriptLexer::getSerializedATN() const {
  return escriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& EscriptLexer::getATN() const {
  return *escriptlexerLexerStaticData->atn;
}


void EscriptLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 80: INTERPOLATED_STRING_STARTAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 85: LBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 86: RBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 122: COLONAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 139: LBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 141: DOUBLE_QUOTE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 145: CLOSE_RBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void EscriptLexer::INTERPOLATED_STRING_STARTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  interpolatedStringLevel++;  break;

  default:
    break;
  }
}

void EscriptLexer::LBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel + 1 );
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::RBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2:
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel - 1 );
            if ( curlyLevels.top() == 0 )
            {
              curlyLevels.pop();
              skip();
              popMode();
            }
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::COLONAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3:
            if (interpolatedStringLevel > 0)
            {
                int ind = 1;
                bool switchToFormatString = true;

                while (_input->LA(ind) != '}')
                {
                    if (_input->LA(ind) == ':' || _input->LA(ind) == ')')
                    {
                        switchToFormatString = false;
                        break;
                    }
                    ind++;
                }
                if (switchToFormatString)
                {
                    setMode( INTERPOLATION_FORMAT );
                }
            }
     break;

  default:
    break;
  }
}

void EscriptLexer::LBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  curlyLevels.push(1);  break;

  default:
    break;
  }
}

void EscriptLexer::DOUBLE_QUOTE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  interpolatedStringLevel--;  break;

  default:
    break;
  }
}

void EscriptLexer::CLOSE_RBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 6:  curlyLevels.pop();  break;

  default:
    break;
  }
}



void EscriptLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  escriptlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(escriptlexerLexerOnceFlag, escriptlexerLexerInitialize);
#endif
}
