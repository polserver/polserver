
// Generated from EscriptLexer.g4 by ANTLR 4.13.1


#include "EscriptLexer.h"


using namespace antlr4;

using namespace EscriptGrammar;


using namespace antlr4;

namespace {

struct EscriptLexerStaticData final {
  EscriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EscriptLexerStaticData(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData(EscriptLexerStaticData&&) = delete;
  EscriptLexerStaticData& operator=(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData& operator=(EscriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag escriptlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
EscriptLexerStaticData *escriptlexerLexerStaticData = nullptr;

void escriptlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (escriptlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(escriptlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<EscriptLexerStaticData>(
    std::vector<std::string>{
      "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "CLASS", "ENDCLASS", 
      "DOWNTO", "STEP", "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", 
      "TOK_LONG", "INTEGER", "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", 
      "AS", "ELLIPSIS", "AND_A", "AND_B", "AND", "OR_A", "OR_B", "OR", "BANG_A", 
      "BANG_B", "BANG", "BYREF", "UNUSED", "TOK_ERROR", "HASH", "DICTIONARY", 
      "STRUCT", "ARRAY", "STACK", "TOK_IN", "UNINIT", "BOOL_TRUE", "BOOL_FALSE", 
      "IS", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "STRING_LITERAL", "REGEXP_LITERAL", 
      "INTERPOLATED_STRING_START", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
      "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV", "MOD", "ADD", "SUB", 
      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
      "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND", "CARET", "BITOR", 
      "NOTEQUAL_A", "NOTEQUAL_B", "NOTEQUAL", "EQUAL_DEPRECATED", "EQUAL", 
      "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI", "COMMA", 
      "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS", "QUESTION", 
      "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart", "EscapeSequence", 
      "HexDigits", "HexDigit", "Digits", "LetterOrDigit", "Letter", "RegularExpressionFirstChar", 
      "RegularExpressionChar", "RegularExpressionClassChar", "RegularExpressionBackslashSequence", 
      "DOUBLE_LBRACE_INSIDE", "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", 
      "DOUBLE_RBRACE", "STRING_LITERAL_INSIDE", "DOUBLE_RBRACE_INSIDE", 
      "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "INTERPOLATION_STRING", "INTERPOLATION_FORMAT"
    },
    std::vector<std::string>{
      "", "'if'", "'then'", "'elseif'", "'endif'", "'else'", "'goto'", "'return'", 
      "'const'", "'var'", "'do'", "'dowhile'", "'while'", "'endwhile'", 
      "'exit'", "'function'", "'endfunction'", "'exported'", "'use'", "'include'", 
      "'break'", "'continue'", "'for'", "'endfor'", "'to'", "'foreach'", 
      "'endforeach'", "'repeat'", "'until'", "'program'", "'endprogram'", 
      "'case'", "'default'", "'endcase'", "'enum'", "'endenum'", "'class'", 
      "'endclass'", "'downto'", "'step'", "'reference'", "'out'", "'inout'", 
      "'ByVal'", "'string'", "'long'", "'integer'", "'unsigned'", "'signed'", 
      "'real'", "'float'", "'double'", "'as'", "'...'", "'&&'", "'and'", 
      "'||'", "'or'", "'!'", "'not'", "'byref'", "'unused'", "'error'", 
      "'hash'", "'dictionary'", "'struct'", "'array'", "'stack'", "'in'", 
      "'uninit'", "'true'", "'false'", "'is'", "", "", "", "", "", "", "", 
      "", "", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "'->'", "'*'", 
      "'/'", "'%'", "'+'", "'-'", "'+='", "'-='", "'*='", "'/='", "'%='", 
      "'<='", "'<'", "'>='", "'>'", "'>>'", "'<<'", "'&'", "'^'", "'|'", 
      "'<>'", "'!='", "'='", "'=='", "':='", "'.+'", "'.-'", "'.\\u003F'", 
      "';'", "','", "'~'", "'@'", "'::'", "':'", "'++'", "'--'", "'\\u003F:'", 
      "'\\u003F'", "", "", "", "", "'{{'"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "CLASS", "ENDCLASS", 
      "DOWNTO", "STEP", "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", 
      "TOK_LONG", "INTEGER", "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", 
      "AS", "ELLIPSIS", "AND_A", "AND_B", "OR_A", "OR_B", "BANG_A", "BANG_B", 
      "BYREF", "UNUSED", "TOK_ERROR", "HASH", "DICTIONARY", "STRUCT", "ARRAY", 
      "STACK", "TOK_IN", "UNINIT", "BOOL_TRUE", "BOOL_FALSE", "IS", "DECIMAL_LITERAL", 
      "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
      "STRING_LITERAL", "REGEXP_LITERAL", "INTERPOLATED_STRING_START", "LPAREN", 
      "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "DOT", "ARROW", 
      "MUL", "DIV", "MOD", "ADD", "SUB", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
      "DIV_ASSIGN", "MOD_ASSIGN", "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", 
      "BITAND", "CARET", "BITOR", "NOTEQUAL_A", "NOTEQUAL_B", "EQUAL_DEPRECATED", 
      "EQUAL", "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI", 
      "COMMA", "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS", 
      "QUESTION", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "DOUBLE_LBRACE_INSIDE", 
      "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE", 
      "STRING_LITERAL_INSIDE", "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,138,1139,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,
  	5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
  	13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
  	20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
  	27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,
  	34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,
  	41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,
  	48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
  	55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,
  	62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,
  	69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,
  	76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
  	83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
  	90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,
  	97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
  	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
  	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
  	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
  	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
  	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
  	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
  	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
  	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
  	7,151,2,152,7,152,2,153,7,153,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,
  	5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
  	1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,
  	1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
  	1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,673,8,55,1,56,1,56,1,56,1,57,
  	1,57,1,57,1,58,1,58,1,58,1,58,3,58,685,8,58,1,59,1,59,1,60,1,60,1,60,
  	1,60,1,61,1,61,1,61,1,61,3,61,697,8,61,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,
  	1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
  	1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,
  	1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,
  	1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,74,
  	1,74,1,74,1,75,1,75,1,75,3,75,780,8,75,3,75,782,8,75,1,76,1,76,1,76,1,
  	76,1,77,1,77,4,77,790,8,77,11,77,12,77,791,1,78,1,78,1,78,4,78,797,8,
  	78,11,78,12,78,798,1,79,1,79,1,79,3,79,804,8,79,1,79,1,79,3,79,808,8,
  	79,1,79,3,79,811,8,79,1,79,1,79,1,79,3,79,816,8,79,1,80,1,80,1,80,1,80,
  	3,80,822,8,80,1,80,3,80,825,8,80,1,80,1,80,3,80,829,8,80,1,80,1,80,3,
  	80,833,8,80,1,80,1,80,1,81,1,81,1,81,5,81,840,8,81,10,81,12,81,843,9,
  	81,1,81,1,81,1,82,1,82,1,82,5,82,850,8,82,10,82,12,82,853,9,82,1,82,1,
  	82,1,82,5,82,858,8,82,10,82,12,82,861,9,82,1,83,1,83,1,83,1,83,1,83,1,
  	83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,89,1,
  	89,1,89,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,
  	95,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,
  	1,100,1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,1,104,1,104,1,104,
  	1,105,1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,108,1,108,1,109,1,109,
  	1,110,1,110,1,111,1,111,1,111,1,112,1,112,1,112,1,113,1,113,1,113,1,113,
  	3,113,946,8,113,1,114,1,114,1,115,1,115,1,115,1,116,1,116,1,116,1,117,
  	1,117,1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,121,1,121,
  	1,122,1,122,1,123,1,123,1,124,1,124,1,124,1,125,1,125,1,125,1,126,1,126,
  	1,126,1,127,1,127,1,127,1,128,1,128,1,128,1,129,1,129,1,130,4,130,991,
  	8,130,11,130,12,130,992,1,130,1,130,1,131,1,131,1,131,1,131,5,131,1001,
  	8,131,10,131,12,131,1004,9,131,1,131,1,131,1,131,1,131,1,131,1,132,1,
  	132,1,132,1,132,5,132,1015,8,132,10,132,12,132,1018,9,132,1,132,1,132,
  	1,133,1,133,5,133,1024,8,133,10,133,12,133,1027,9,133,1,134,1,134,3,134,
  	1031,8,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,
  	1042,8,135,1,136,1,136,5,136,1046,8,136,10,136,12,136,1049,9,136,1,137,
  	1,137,1,138,1,138,5,138,1055,8,138,10,138,12,138,1058,9,138,1,139,1,139,
  	3,139,1062,8,139,1,140,1,140,1,140,1,140,3,140,1068,8,140,1,141,1,141,
  	1,141,1,141,5,141,1074,8,141,10,141,12,141,1077,9,141,1,141,3,141,1080,
  	8,141,1,142,1,142,1,142,1,142,5,142,1086,8,142,10,142,12,142,1089,9,142,
  	1,142,3,142,1092,8,142,1,143,1,143,3,143,1096,8,143,1,144,1,144,1,144,
  	1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,147,1,147,1,148,1,148,
  	1,148,1,148,1,148,1,149,1,149,1,149,1,150,4,150,1120,8,150,11,150,12,
  	150,1121,1,151,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,152,1,152,
  	1,152,1,153,4,153,1136,8,153,11,153,12,153,1137,1,1002,0,154,3,1,5,2,
  	7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,
  	33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,
  	27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,
  	79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,49,101,
  	50,103,51,105,52,107,53,109,54,111,55,113,0,115,56,117,57,119,0,121,58,
  	123,59,125,0,127,60,129,61,131,62,133,63,135,64,137,65,139,66,141,67,
  	143,68,145,69,147,70,149,71,151,72,153,73,155,74,157,75,159,76,161,77,
  	163,78,165,79,167,80,169,81,171,82,173,83,175,84,177,85,179,86,181,87,
  	183,88,185,89,187,90,189,91,191,92,193,93,195,94,197,95,199,96,201,97,
  	203,98,205,99,207,100,209,101,211,102,213,103,215,104,217,105,219,106,
  	221,107,223,108,225,109,227,110,229,0,231,111,233,112,235,113,237,114,
  	239,115,241,116,243,117,245,118,247,119,249,120,251,121,253,122,255,123,
  	257,124,259,125,261,126,263,127,265,128,267,129,269,130,271,0,273,0,275,
  	0,277,0,279,0,281,0,283,0,285,0,287,0,289,0,291,0,293,131,295,132,297,
  	133,299,134,301,135,303,136,305,0,307,137,309,138,3,0,1,2,23,1,0,49,57,
  	2,0,88,88,120,120,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,80,80,112,112,
  	2,0,43,43,45,45,2,0,34,34,92,92,3,0,9,10,12,13,32,32,2,0,10,10,13,13,
  	2,0,69,69,101,101,3,0,48,57,65,70,97,102,1,0,48,57,4,0,36,36,65,90,95,
  	95,97,122,2,0,0,127,55296,56319,1,0,55296,56319,1,0,56320,57343,6,0,10,
  	10,13,13,42,42,47,47,91,92,8232,8233,5,0,10,10,13,13,47,47,91,92,8232,
  	8233,4,0,10,10,13,13,92,93,8232,8233,3,0,10,10,13,13,8232,8233,4,0,34,
  	34,92,92,123,123,125,125,1,0,125,125,1161,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
  	1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
  	0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
  	29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
  	0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
  	0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
  	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
  	0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
  	0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
  	93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,115,
  	1,0,0,0,0,117,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,127,1,0,0,0,0,129,
  	1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
  	1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,
  	1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,
  	1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,
  	1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,
  	1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,
  	1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,
  	1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,0,0,0,209,
  	1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,0,0,0,219,
  	1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,231,
  	1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,1,0,0,0,0,241,
  	1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,1,0,0,0,0,251,
  	1,0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,0,257,1,0,0,0,0,259,1,0,0,0,0,261,
  	1,0,0,0,0,263,1,0,0,0,0,265,1,0,0,0,0,267,1,0,0,0,0,269,1,0,0,0,1,293,
  	1,0,0,0,1,295,1,0,0,0,1,297,1,0,0,0,1,299,1,0,0,0,1,301,1,0,0,0,1,303,
  	1,0,0,0,2,305,1,0,0,0,2,307,1,0,0,0,2,309,1,0,0,0,3,311,1,0,0,0,5,314,
  	1,0,0,0,7,319,1,0,0,0,9,326,1,0,0,0,11,332,1,0,0,0,13,337,1,0,0,0,15,
  	342,1,0,0,0,17,349,1,0,0,0,19,355,1,0,0,0,21,359,1,0,0,0,23,362,1,0,0,
  	0,25,370,1,0,0,0,27,376,1,0,0,0,29,385,1,0,0,0,31,390,1,0,0,0,33,399,
  	1,0,0,0,35,411,1,0,0,0,37,420,1,0,0,0,39,424,1,0,0,0,41,432,1,0,0,0,43,
  	438,1,0,0,0,45,447,1,0,0,0,47,451,1,0,0,0,49,458,1,0,0,0,51,461,1,0,0,
  	0,53,469,1,0,0,0,55,480,1,0,0,0,57,487,1,0,0,0,59,493,1,0,0,0,61,501,
  	1,0,0,0,63,512,1,0,0,0,65,517,1,0,0,0,67,525,1,0,0,0,69,533,1,0,0,0,71,
  	538,1,0,0,0,73,546,1,0,0,0,75,552,1,0,0,0,77,561,1,0,0,0,79,568,1,0,0,
  	0,81,573,1,0,0,0,83,583,1,0,0,0,85,587,1,0,0,0,87,593,1,0,0,0,89,599,
  	1,0,0,0,91,606,1,0,0,0,93,611,1,0,0,0,95,619,1,0,0,0,97,628,1,0,0,0,99,
  	635,1,0,0,0,101,640,1,0,0,0,103,646,1,0,0,0,105,653,1,0,0,0,107,656,1,
  	0,0,0,109,660,1,0,0,0,111,663,1,0,0,0,113,672,1,0,0,0,115,674,1,0,0,0,
  	117,677,1,0,0,0,119,684,1,0,0,0,121,686,1,0,0,0,123,688,1,0,0,0,125,696,
  	1,0,0,0,127,698,1,0,0,0,129,704,1,0,0,0,131,711,1,0,0,0,133,717,1,0,0,
  	0,135,722,1,0,0,0,137,733,1,0,0,0,139,740,1,0,0,0,141,746,1,0,0,0,143,
  	752,1,0,0,0,145,755,1,0,0,0,147,762,1,0,0,0,149,767,1,0,0,0,151,773,1,
  	0,0,0,153,781,1,0,0,0,155,783,1,0,0,0,157,787,1,0,0,0,159,793,1,0,0,0,
  	161,815,1,0,0,0,163,817,1,0,0,0,165,836,1,0,0,0,167,846,1,0,0,0,169,862,
  	1,0,0,0,171,869,1,0,0,0,173,871,1,0,0,0,175,873,1,0,0,0,177,875,1,0,0,
  	0,179,877,1,0,0,0,181,880,1,0,0,0,183,883,1,0,0,0,185,885,1,0,0,0,187,
  	888,1,0,0,0,189,890,1,0,0,0,191,892,1,0,0,0,193,894,1,0,0,0,195,896,1,
  	0,0,0,197,898,1,0,0,0,199,901,1,0,0,0,201,904,1,0,0,0,203,907,1,0,0,0,
  	205,910,1,0,0,0,207,913,1,0,0,0,209,916,1,0,0,0,211,918,1,0,0,0,213,921,
  	1,0,0,0,215,923,1,0,0,0,217,926,1,0,0,0,219,929,1,0,0,0,221,931,1,0,0,
  	0,223,933,1,0,0,0,225,935,1,0,0,0,227,938,1,0,0,0,229,945,1,0,0,0,231,
  	947,1,0,0,0,233,949,1,0,0,0,235,952,1,0,0,0,237,955,1,0,0,0,239,958,1,
  	0,0,0,241,961,1,0,0,0,243,964,1,0,0,0,245,966,1,0,0,0,247,968,1,0,0,0,
  	249,970,1,0,0,0,251,972,1,0,0,0,253,975,1,0,0,0,255,978,1,0,0,0,257,981,
  	1,0,0,0,259,984,1,0,0,0,261,987,1,0,0,0,263,990,1,0,0,0,265,996,1,0,0,
  	0,267,1010,1,0,0,0,269,1021,1,0,0,0,271,1028,1,0,0,0,273,1041,1,0,0,0,
  	275,1043,1,0,0,0,277,1050,1,0,0,0,279,1052,1,0,0,0,281,1061,1,0,0,0,283,
  	1067,1,0,0,0,285,1079,1,0,0,0,287,1091,1,0,0,0,289,1095,1,0,0,0,291,1097,
  	1,0,0,0,293,1100,1,0,0,0,295,1103,1,0,0,0,297,1108,1,0,0,0,299,1110,1,
  	0,0,0,301,1115,1,0,0,0,303,1119,1,0,0,0,305,1123,1,0,0,0,307,1128,1,0,
  	0,0,309,1135,1,0,0,0,311,312,5,105,0,0,312,313,5,102,0,0,313,4,1,0,0,
  	0,314,315,5,116,0,0,315,316,5,104,0,0,316,317,5,101,0,0,317,318,5,110,
  	0,0,318,6,1,0,0,0,319,320,5,101,0,0,320,321,5,108,0,0,321,322,5,115,0,
  	0,322,323,5,101,0,0,323,324,5,105,0,0,324,325,5,102,0,0,325,8,1,0,0,0,
  	326,327,5,101,0,0,327,328,5,110,0,0,328,329,5,100,0,0,329,330,5,105,0,
  	0,330,331,5,102,0,0,331,10,1,0,0,0,332,333,5,101,0,0,333,334,5,108,0,
  	0,334,335,5,115,0,0,335,336,5,101,0,0,336,12,1,0,0,0,337,338,5,103,0,
  	0,338,339,5,111,0,0,339,340,5,116,0,0,340,341,5,111,0,0,341,14,1,0,0,
  	0,342,343,5,114,0,0,343,344,5,101,0,0,344,345,5,116,0,0,345,346,5,117,
  	0,0,346,347,5,114,0,0,347,348,5,110,0,0,348,16,1,0,0,0,349,350,5,99,0,
  	0,350,351,5,111,0,0,351,352,5,110,0,0,352,353,5,115,0,0,353,354,5,116,
  	0,0,354,18,1,0,0,0,355,356,5,118,0,0,356,357,5,97,0,0,357,358,5,114,0,
  	0,358,20,1,0,0,0,359,360,5,100,0,0,360,361,5,111,0,0,361,22,1,0,0,0,362,
  	363,5,100,0,0,363,364,5,111,0,0,364,365,5,119,0,0,365,366,5,104,0,0,366,
  	367,5,105,0,0,367,368,5,108,0,0,368,369,5,101,0,0,369,24,1,0,0,0,370,
  	371,5,119,0,0,371,372,5,104,0,0,372,373,5,105,0,0,373,374,5,108,0,0,374,
  	375,5,101,0,0,375,26,1,0,0,0,376,377,5,101,0,0,377,378,5,110,0,0,378,
  	379,5,100,0,0,379,380,5,119,0,0,380,381,5,104,0,0,381,382,5,105,0,0,382,
  	383,5,108,0,0,383,384,5,101,0,0,384,28,1,0,0,0,385,386,5,101,0,0,386,
  	387,5,120,0,0,387,388,5,105,0,0,388,389,5,116,0,0,389,30,1,0,0,0,390,
  	391,5,102,0,0,391,392,5,117,0,0,392,393,5,110,0,0,393,394,5,99,0,0,394,
  	395,5,116,0,0,395,396,5,105,0,0,396,397,5,111,0,0,397,398,5,110,0,0,398,
  	32,1,0,0,0,399,400,5,101,0,0,400,401,5,110,0,0,401,402,5,100,0,0,402,
  	403,5,102,0,0,403,404,5,117,0,0,404,405,5,110,0,0,405,406,5,99,0,0,406,
  	407,5,116,0,0,407,408,5,105,0,0,408,409,5,111,0,0,409,410,5,110,0,0,410,
  	34,1,0,0,0,411,412,5,101,0,0,412,413,5,120,0,0,413,414,5,112,0,0,414,
  	415,5,111,0,0,415,416,5,114,0,0,416,417,5,116,0,0,417,418,5,101,0,0,418,
  	419,5,100,0,0,419,36,1,0,0,0,420,421,5,117,0,0,421,422,5,115,0,0,422,
  	423,5,101,0,0,423,38,1,0,0,0,424,425,5,105,0,0,425,426,5,110,0,0,426,
  	427,5,99,0,0,427,428,5,108,0,0,428,429,5,117,0,0,429,430,5,100,0,0,430,
  	431,5,101,0,0,431,40,1,0,0,0,432,433,5,98,0,0,433,434,5,114,0,0,434,435,
  	5,101,0,0,435,436,5,97,0,0,436,437,5,107,0,0,437,42,1,0,0,0,438,439,5,
  	99,0,0,439,440,5,111,0,0,440,441,5,110,0,0,441,442,5,116,0,0,442,443,
  	5,105,0,0,443,444,5,110,0,0,444,445,5,117,0,0,445,446,5,101,0,0,446,44,
  	1,0,0,0,447,448,5,102,0,0,448,449,5,111,0,0,449,450,5,114,0,0,450,46,
  	1,0,0,0,451,452,5,101,0,0,452,453,5,110,0,0,453,454,5,100,0,0,454,455,
  	5,102,0,0,455,456,5,111,0,0,456,457,5,114,0,0,457,48,1,0,0,0,458,459,
  	5,116,0,0,459,460,5,111,0,0,460,50,1,0,0,0,461,462,5,102,0,0,462,463,
  	5,111,0,0,463,464,5,114,0,0,464,465,5,101,0,0,465,466,5,97,0,0,466,467,
  	5,99,0,0,467,468,5,104,0,0,468,52,1,0,0,0,469,470,5,101,0,0,470,471,5,
  	110,0,0,471,472,5,100,0,0,472,473,5,102,0,0,473,474,5,111,0,0,474,475,
  	5,114,0,0,475,476,5,101,0,0,476,477,5,97,0,0,477,478,5,99,0,0,478,479,
  	5,104,0,0,479,54,1,0,0,0,480,481,5,114,0,0,481,482,5,101,0,0,482,483,
  	5,112,0,0,483,484,5,101,0,0,484,485,5,97,0,0,485,486,5,116,0,0,486,56,
  	1,0,0,0,487,488,5,117,0,0,488,489,5,110,0,0,489,490,5,116,0,0,490,491,
  	5,105,0,0,491,492,5,108,0,0,492,58,1,0,0,0,493,494,5,112,0,0,494,495,
  	5,114,0,0,495,496,5,111,0,0,496,497,5,103,0,0,497,498,5,114,0,0,498,499,
  	5,97,0,0,499,500,5,109,0,0,500,60,1,0,0,0,501,502,5,101,0,0,502,503,5,
  	110,0,0,503,504,5,100,0,0,504,505,5,112,0,0,505,506,5,114,0,0,506,507,
  	5,111,0,0,507,508,5,103,0,0,508,509,5,114,0,0,509,510,5,97,0,0,510,511,
  	5,109,0,0,511,62,1,0,0,0,512,513,5,99,0,0,513,514,5,97,0,0,514,515,5,
  	115,0,0,515,516,5,101,0,0,516,64,1,0,0,0,517,518,5,100,0,0,518,519,5,
  	101,0,0,519,520,5,102,0,0,520,521,5,97,0,0,521,522,5,117,0,0,522,523,
  	5,108,0,0,523,524,5,116,0,0,524,66,1,0,0,0,525,526,5,101,0,0,526,527,
  	5,110,0,0,527,528,5,100,0,0,528,529,5,99,0,0,529,530,5,97,0,0,530,531,
  	5,115,0,0,531,532,5,101,0,0,532,68,1,0,0,0,533,534,5,101,0,0,534,535,
  	5,110,0,0,535,536,5,117,0,0,536,537,5,109,0,0,537,70,1,0,0,0,538,539,
  	5,101,0,0,539,540,5,110,0,0,540,541,5,100,0,0,541,542,5,101,0,0,542,543,
  	5,110,0,0,543,544,5,117,0,0,544,545,5,109,0,0,545,72,1,0,0,0,546,547,
  	5,99,0,0,547,548,5,108,0,0,548,549,5,97,0,0,549,550,5,115,0,0,550,551,
  	5,115,0,0,551,74,1,0,0,0,552,553,5,101,0,0,553,554,5,110,0,0,554,555,
  	5,100,0,0,555,556,5,99,0,0,556,557,5,108,0,0,557,558,5,97,0,0,558,559,
  	5,115,0,0,559,560,5,115,0,0,560,76,1,0,0,0,561,562,5,100,0,0,562,563,
  	5,111,0,0,563,564,5,119,0,0,564,565,5,110,0,0,565,566,5,116,0,0,566,567,
  	5,111,0,0,567,78,1,0,0,0,568,569,5,115,0,0,569,570,5,116,0,0,570,571,
  	5,101,0,0,571,572,5,112,0,0,572,80,1,0,0,0,573,574,5,114,0,0,574,575,
  	5,101,0,0,575,576,5,102,0,0,576,577,5,101,0,0,577,578,5,114,0,0,578,579,
  	5,101,0,0,579,580,5,110,0,0,580,581,5,99,0,0,581,582,5,101,0,0,582,82,
  	1,0,0,0,583,584,5,111,0,0,584,585,5,117,0,0,585,586,5,116,0,0,586,84,
  	1,0,0,0,587,588,5,105,0,0,588,589,5,110,0,0,589,590,5,111,0,0,590,591,
  	5,117,0,0,591,592,5,116,0,0,592,86,1,0,0,0,593,594,5,66,0,0,594,595,5,
  	121,0,0,595,596,5,86,0,0,596,597,5,97,0,0,597,598,5,108,0,0,598,88,1,
  	0,0,0,599,600,5,115,0,0,600,601,5,116,0,0,601,602,5,114,0,0,602,603,5,
  	105,0,0,603,604,5,110,0,0,604,605,5,103,0,0,605,90,1,0,0,0,606,607,5,
  	108,0,0,607,608,5,111,0,0,608,609,5,110,0,0,609,610,5,103,0,0,610,92,
  	1,0,0,0,611,612,5,105,0,0,612,613,5,110,0,0,613,614,5,116,0,0,614,615,
  	5,101,0,0,615,616,5,103,0,0,616,617,5,101,0,0,617,618,5,114,0,0,618,94,
  	1,0,0,0,619,620,5,117,0,0,620,621,5,110,0,0,621,622,5,115,0,0,622,623,
  	5,105,0,0,623,624,5,103,0,0,624,625,5,110,0,0,625,626,5,101,0,0,626,627,
  	5,100,0,0,627,96,1,0,0,0,628,629,5,115,0,0,629,630,5,105,0,0,630,631,
  	5,103,0,0,631,632,5,110,0,0,632,633,5,101,0,0,633,634,5,100,0,0,634,98,
  	1,0,0,0,635,636,5,114,0,0,636,637,5,101,0,0,637,638,5,97,0,0,638,639,
  	5,108,0,0,639,100,1,0,0,0,640,641,5,102,0,0,641,642,5,108,0,0,642,643,
  	5,111,0,0,643,644,5,97,0,0,644,645,5,116,0,0,645,102,1,0,0,0,646,647,
  	5,100,0,0,647,648,5,111,0,0,648,649,5,117,0,0,649,650,5,98,0,0,650,651,
  	5,108,0,0,651,652,5,101,0,0,652,104,1,0,0,0,653,654,5,97,0,0,654,655,
  	5,115,0,0,655,106,1,0,0,0,656,657,5,46,0,0,657,658,5,46,0,0,658,659,5,
  	46,0,0,659,108,1,0,0,0,660,661,5,38,0,0,661,662,5,38,0,0,662,110,1,0,
  	0,0,663,664,5,97,0,0,664,665,5,110,0,0,665,666,5,100,0,0,666,112,1,0,
  	0,0,667,668,5,38,0,0,668,673,5,38,0,0,669,670,5,97,0,0,670,671,5,110,
  	0,0,671,673,5,100,0,0,672,667,1,0,0,0,672,669,1,0,0,0,673,114,1,0,0,0,
  	674,675,5,124,0,0,675,676,5,124,0,0,676,116,1,0,0,0,677,678,5,111,0,0,
  	678,679,5,114,0,0,679,118,1,0,0,0,680,681,5,124,0,0,681,685,5,124,0,0,
  	682,683,5,111,0,0,683,685,5,114,0,0,684,680,1,0,0,0,684,682,1,0,0,0,685,
  	120,1,0,0,0,686,687,5,33,0,0,687,122,1,0,0,0,688,689,5,110,0,0,689,690,
  	5,111,0,0,690,691,5,116,0,0,691,124,1,0,0,0,692,697,5,33,0,0,693,694,
  	5,110,0,0,694,695,5,111,0,0,695,697,5,116,0,0,696,692,1,0,0,0,696,693,
  	1,0,0,0,697,126,1,0,0,0,698,699,5,98,0,0,699,700,5,121,0,0,700,701,5,
  	114,0,0,701,702,5,101,0,0,702,703,5,102,0,0,703,128,1,0,0,0,704,705,5,
  	117,0,0,705,706,5,110,0,0,706,707,5,117,0,0,707,708,5,115,0,0,708,709,
  	5,101,0,0,709,710,5,100,0,0,710,130,1,0,0,0,711,712,5,101,0,0,712,713,
  	5,114,0,0,713,714,5,114,0,0,714,715,5,111,0,0,715,716,5,114,0,0,716,132,
  	1,0,0,0,717,718,5,104,0,0,718,719,5,97,0,0,719,720,5,115,0,0,720,721,
  	5,104,0,0,721,134,1,0,0,0,722,723,5,100,0,0,723,724,5,105,0,0,724,725,
  	5,99,0,0,725,726,5,116,0,0,726,727,5,105,0,0,727,728,5,111,0,0,728,729,
  	5,110,0,0,729,730,5,97,0,0,730,731,5,114,0,0,731,732,5,121,0,0,732,136,
  	1,0,0,0,733,734,5,115,0,0,734,735,5,116,0,0,735,736,5,114,0,0,736,737,
  	5,117,0,0,737,738,5,99,0,0,738,739,5,116,0,0,739,138,1,0,0,0,740,741,
  	5,97,0,0,741,742,5,114,0,0,742,743,5,114,0,0,743,744,5,97,0,0,744,745,
  	5,121,0,0,745,140,1,0,0,0,746,747,5,115,0,0,747,748,5,116,0,0,748,749,
  	5,97,0,0,749,750,5,99,0,0,750,751,5,107,0,0,751,142,1,0,0,0,752,753,5,
  	105,0,0,753,754,5,110,0,0,754,144,1,0,0,0,755,756,5,117,0,0,756,757,5,
  	110,0,0,757,758,5,105,0,0,758,759,5,110,0,0,759,760,5,105,0,0,760,761,
  	5,116,0,0,761,146,1,0,0,0,762,763,5,116,0,0,763,764,5,114,0,0,764,765,
  	5,117,0,0,765,766,5,101,0,0,766,148,1,0,0,0,767,768,5,102,0,0,768,769,
  	5,97,0,0,769,770,5,108,0,0,770,771,5,115,0,0,771,772,5,101,0,0,772,150,
  	1,0,0,0,773,774,5,105,0,0,774,775,5,115,0,0,775,152,1,0,0,0,776,782,5,
  	48,0,0,777,779,7,0,0,0,778,780,3,279,138,0,779,778,1,0,0,0,779,780,1,
  	0,0,0,780,782,1,0,0,0,781,776,1,0,0,0,781,777,1,0,0,0,782,154,1,0,0,0,
  	783,784,5,48,0,0,784,785,7,1,0,0,785,786,3,275,136,0,786,156,1,0,0,0,
  	787,789,5,48,0,0,788,790,7,2,0,0,789,788,1,0,0,0,790,791,1,0,0,0,791,
  	789,1,0,0,0,791,792,1,0,0,0,792,158,1,0,0,0,793,794,5,48,0,0,794,796,
  	7,3,0,0,795,797,7,4,0,0,796,795,1,0,0,0,797,798,1,0,0,0,798,796,1,0,0,
  	0,798,799,1,0,0,0,799,160,1,0,0,0,800,801,3,279,138,0,801,803,5,46,0,
  	0,802,804,3,279,138,0,803,802,1,0,0,0,803,804,1,0,0,0,804,808,1,0,0,0,
  	805,806,5,46,0,0,806,808,3,279,138,0,807,800,1,0,0,0,807,805,1,0,0,0,
  	808,810,1,0,0,0,809,811,3,271,134,0,810,809,1,0,0,0,810,811,1,0,0,0,811,
  	816,1,0,0,0,812,813,3,279,138,0,813,814,3,271,134,0,814,816,1,0,0,0,815,
  	807,1,0,0,0,815,812,1,0,0,0,816,162,1,0,0,0,817,818,5,48,0,0,818,828,
  	7,1,0,0,819,821,3,275,136,0,820,822,5,46,0,0,821,820,1,0,0,0,821,822,
  	1,0,0,0,822,829,1,0,0,0,823,825,3,275,136,0,824,823,1,0,0,0,824,825,1,
  	0,0,0,825,826,1,0,0,0,826,827,5,46,0,0,827,829,3,275,136,0,828,819,1,
  	0,0,0,828,824,1,0,0,0,829,830,1,0,0,0,830,832,7,5,0,0,831,833,7,6,0,0,
  	832,831,1,0,0,0,832,833,1,0,0,0,833,834,1,0,0,0,834,835,3,279,138,0,835,
  	164,1,0,0,0,836,841,5,34,0,0,837,840,8,7,0,0,838,840,3,273,135,0,839,
  	837,1,0,0,0,839,838,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,
  	0,0,0,842,844,1,0,0,0,843,841,1,0,0,0,844,845,5,34,0,0,845,166,1,0,0,
  	0,846,847,5,47,0,0,847,851,3,285,141,0,848,850,3,287,142,0,849,848,1,
  	0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,
  	853,851,1,0,0,0,854,855,4,82,0,0,855,859,5,47,0,0,856,858,3,283,140,0,
  	857,856,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,168,
  	1,0,0,0,861,859,1,0,0,0,862,863,5,36,0,0,863,864,5,34,0,0,864,865,1,0,
  	0,0,865,866,6,83,0,0,866,867,1,0,0,0,867,868,6,83,1,0,868,170,1,0,0,0,
  	869,870,5,40,0,0,870,172,1,0,0,0,871,872,5,41,0,0,872,174,1,0,0,0,873,
  	874,5,91,0,0,874,176,1,0,0,0,875,876,5,93,0,0,876,178,1,0,0,0,877,878,
  	5,123,0,0,878,879,6,88,2,0,879,180,1,0,0,0,880,881,5,125,0,0,881,882,
  	6,89,3,0,882,182,1,0,0,0,883,884,5,46,0,0,884,184,1,0,0,0,885,886,5,45,
  	0,0,886,887,5,62,0,0,887,186,1,0,0,0,888,889,5,42,0,0,889,188,1,0,0,0,
  	890,891,5,47,0,0,891,190,1,0,0,0,892,893,5,37,0,0,893,192,1,0,0,0,894,
  	895,5,43,0,0,895,194,1,0,0,0,896,897,5,45,0,0,897,196,1,0,0,0,898,899,
  	5,43,0,0,899,900,5,61,0,0,900,198,1,0,0,0,901,902,5,45,0,0,902,903,5,
  	61,0,0,903,200,1,0,0,0,904,905,5,42,0,0,905,906,5,61,0,0,906,202,1,0,
  	0,0,907,908,5,47,0,0,908,909,5,61,0,0,909,204,1,0,0,0,910,911,5,37,0,
  	0,911,912,5,61,0,0,912,206,1,0,0,0,913,914,5,60,0,0,914,915,5,61,0,0,
  	915,208,1,0,0,0,916,917,5,60,0,0,917,210,1,0,0,0,918,919,5,62,0,0,919,
  	920,5,61,0,0,920,212,1,0,0,0,921,922,5,62,0,0,922,214,1,0,0,0,923,924,
  	5,62,0,0,924,925,5,62,0,0,925,216,1,0,0,0,926,927,5,60,0,0,927,928,5,
  	60,0,0,928,218,1,0,0,0,929,930,5,38,0,0,930,220,1,0,0,0,931,932,5,94,
  	0,0,932,222,1,0,0,0,933,934,5,124,0,0,934,224,1,0,0,0,935,936,5,60,0,
  	0,936,937,5,62,0,0,937,226,1,0,0,0,938,939,5,33,0,0,939,940,5,61,0,0,
  	940,228,1,0,0,0,941,942,5,60,0,0,942,946,5,62,0,0,943,944,5,33,0,0,944,
  	946,5,61,0,0,945,941,1,0,0,0,945,943,1,0,0,0,946,230,1,0,0,0,947,948,
  	5,61,0,0,948,232,1,0,0,0,949,950,5,61,0,0,950,951,5,61,0,0,951,234,1,
  	0,0,0,952,953,5,58,0,0,953,954,5,61,0,0,954,236,1,0,0,0,955,956,5,46,
  	0,0,956,957,5,43,0,0,957,238,1,0,0,0,958,959,5,46,0,0,959,960,5,45,0,
  	0,960,240,1,0,0,0,961,962,5,46,0,0,962,963,5,63,0,0,963,242,1,0,0,0,964,
  	965,5,59,0,0,965,244,1,0,0,0,966,967,5,44,0,0,967,246,1,0,0,0,968,969,
  	5,126,0,0,969,248,1,0,0,0,970,971,5,64,0,0,971,250,1,0,0,0,972,973,5,
  	58,0,0,973,974,5,58,0,0,974,252,1,0,0,0,975,976,5,58,0,0,976,977,6,125,
  	4,0,977,254,1,0,0,0,978,979,5,43,0,0,979,980,5,43,0,0,980,256,1,0,0,0,
  	981,982,5,45,0,0,982,983,5,45,0,0,983,258,1,0,0,0,984,985,5,63,0,0,985,
  	986,5,58,0,0,986,260,1,0,0,0,987,988,5,63,0,0,988,262,1,0,0,0,989,991,
  	7,8,0,0,990,989,1,0,0,0,991,992,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,
  	0,993,994,1,0,0,0,994,995,6,130,5,0,995,264,1,0,0,0,996,997,5,47,0,0,
  	997,998,5,42,0,0,998,1002,1,0,0,0,999,1001,9,0,0,0,1000,999,1,0,0,0,1001,
  	1004,1,0,0,0,1002,1003,1,0,0,0,1002,1000,1,0,0,0,1003,1005,1,0,0,0,1004,
  	1002,1,0,0,0,1005,1006,5,42,0,0,1006,1007,5,47,0,0,1007,1008,1,0,0,0,
  	1008,1009,6,131,6,0,1009,266,1,0,0,0,1010,1011,5,47,0,0,1011,1012,5,47,
  	0,0,1012,1016,1,0,0,0,1013,1015,8,9,0,0,1014,1013,1,0,0,0,1015,1018,1,
  	0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,
  	1,0,0,0,1019,1020,6,132,6,0,1020,268,1,0,0,0,1021,1025,3,283,140,0,1022,
  	1024,3,281,139,0,1023,1022,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,
  	0,1025,1026,1,0,0,0,1026,270,1,0,0,0,1027,1025,1,0,0,0,1028,1030,7,10,
  	0,0,1029,1031,7,6,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,
  	0,0,0,1032,1033,3,279,138,0,1033,272,1,0,0,0,1034,1035,5,92,0,0,1035,
  	1036,7,1,0,0,1036,1037,3,277,137,0,1037,1038,3,277,137,0,1038,1042,1,
  	0,0,0,1039,1040,5,92,0,0,1040,1042,9,0,0,0,1041,1034,1,0,0,0,1041,1039,
  	1,0,0,0,1042,274,1,0,0,0,1043,1047,3,277,137,0,1044,1046,3,277,137,0,
  	1045,1044,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,
  	0,1048,276,1,0,0,0,1049,1047,1,0,0,0,1050,1051,7,11,0,0,1051,278,1,0,
  	0,0,1052,1056,7,12,0,0,1053,1055,7,12,0,0,1054,1053,1,0,0,0,1055,1058,
  	1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,280,1,0,0,0,1058,1056,
  	1,0,0,0,1059,1062,3,283,140,0,1060,1062,7,12,0,0,1061,1059,1,0,0,0,1061,
  	1060,1,0,0,0,1062,282,1,0,0,0,1063,1068,7,13,0,0,1064,1068,8,14,0,0,1065,
  	1066,7,15,0,0,1066,1068,7,16,0,0,1067,1063,1,0,0,0,1067,1064,1,0,0,0,
  	1067,1065,1,0,0,0,1068,284,1,0,0,0,1069,1080,8,17,0,0,1070,1080,3,291,
  	144,0,1071,1075,5,91,0,0,1072,1074,3,289,143,0,1073,1072,1,0,0,0,1074,
  	1077,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,1078,1,0,0,0,1077,
  	1075,1,0,0,0,1078,1080,5,93,0,0,1079,1069,1,0,0,0,1079,1070,1,0,0,0,1079,
  	1071,1,0,0,0,1080,286,1,0,0,0,1081,1092,8,18,0,0,1082,1092,3,291,144,
  	0,1083,1087,5,91,0,0,1084,1086,3,289,143,0,1085,1084,1,0,0,0,1086,1089,
  	1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,0,0,1089,1087,
  	1,0,0,0,1090,1092,5,93,0,0,1091,1081,1,0,0,0,1091,1082,1,0,0,0,1091,1083,
  	1,0,0,0,1092,288,1,0,0,0,1093,1096,8,19,0,0,1094,1096,3,291,144,0,1095,
  	1093,1,0,0,0,1095,1094,1,0,0,0,1096,290,1,0,0,0,1097,1098,5,92,0,0,1098,
  	1099,8,20,0,0,1099,292,1,0,0,0,1100,1101,5,123,0,0,1101,1102,5,123,0,
  	0,1102,294,1,0,0,0,1103,1104,5,123,0,0,1104,1105,6,146,7,0,1105,1106,
  	1,0,0,0,1106,1107,6,146,8,0,1107,296,1,0,0,0,1108,1109,3,273,135,0,1109,
  	298,1,0,0,0,1110,1111,5,34,0,0,1111,1112,6,148,9,0,1112,1113,1,0,0,0,
  	1113,1114,6,148,10,0,1114,300,1,0,0,0,1115,1116,5,125,0,0,1116,1117,5,
  	125,0,0,1117,302,1,0,0,0,1118,1120,8,21,0,0,1119,1118,1,0,0,0,1120,1121,
  	1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,304,1,0,0,0,1123,1124,
  	5,125,0,0,1124,1125,5,125,0,0,1125,1126,1,0,0,0,1126,1127,6,151,11,0,
  	1127,306,1,0,0,0,1128,1129,5,125,0,0,1129,1130,6,152,12,0,1130,1131,1,
  	0,0,0,1131,1132,6,152,13,0,1132,1133,6,152,10,0,1133,308,1,0,0,0,1134,
  	1136,8,22,0,0,1135,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1135,1,0,0,0,1137,
  	1138,1,0,0,0,1138,310,1,0,0,0,40,0,1,2,672,684,696,779,781,791,798,803,
  	807,810,815,821,824,828,832,839,841,851,859,945,992,1002,1016,1025,1030,
  	1041,1047,1056,1061,1067,1075,1079,1087,1091,1095,1121,1137,14,1,83,0,
  	5,1,0,1,88,1,1,89,2,1,125,3,0,1,0,0,2,0,1,146,4,5,0,0,1,148,5,4,0,0,7,
  	138,0,1,152,6,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  escriptlexerLexerStaticData = staticData.release();
}

}

EscriptLexer::EscriptLexer(CharStream *input) : Lexer(input) {
  EscriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *escriptlexerLexerStaticData->atn, escriptlexerLexerStaticData->decisionToDFA, escriptlexerLexerStaticData->sharedContextCache);
}

EscriptLexer::~EscriptLexer() {
  delete _interpreter;
}

std::string EscriptLexer::getGrammarFileName() const {
  return "EscriptLexer.g4";
}

const std::vector<std::string>& EscriptLexer::getRuleNames() const {
  return escriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EscriptLexer::getChannelNames() const {
  return escriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EscriptLexer::getModeNames() const {
  return escriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EscriptLexer::getVocabulary() const {
  return escriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EscriptLexer::getSerializedATN() const {
  return escriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& EscriptLexer::getATN() const {
  return *escriptlexerLexerStaticData->atn;
}


void EscriptLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 83: INTERPOLATED_STRING_STARTAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 88: LBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 89: RBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 125: COLONAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 146: LBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 148: DOUBLE_QUOTE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 152: CLOSE_RBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

bool EscriptLexer::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 82: return REGEXP_LITERALSempred(antlrcpp::downCast<antlr4::RuleContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

void EscriptLexer::INTERPOLATED_STRING_STARTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  interpolatedStringLevel++;  break;

  default:
    break;
  }
}

void EscriptLexer::LBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel + 1 );
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::RBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel - 1 );
            if ( curlyLevels.top() == 0 )
            {
              curlyLevels.pop();
              skip();
              popMode();
            }
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::COLONAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3: 
            if (interpolatedStringLevel > 0)
            {
                int ind = 1;
                bool switchToFormatString = true;

                while ( _input->LA( ind ) != '}' && _input->LA( ind ) != CharStream::EOF )
                {
                    if (_input->LA(ind) == ':' || _input->LA(ind) == ')')
                    {
                        switchToFormatString = false;
                        break;
                    }
                    ind++;
                }
                if (switchToFormatString)
                {
                    setMode( INTERPOLATION_FORMAT );
                }
            }
     break;

  default:
    break;
  }
}

void EscriptLexer::LBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  curlyLevels.push(1);  break;

  default:
    break;
  }
}

void EscriptLexer::DOUBLE_QUOTE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  interpolatedStringLevel--;  break;

  default:
    break;
  }
}

void EscriptLexer::CLOSE_RBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 6:  curlyLevels.pop();  break;

  default:
    break;
  }
}


bool EscriptLexer::REGEXP_LITERALSempred(antlr4::RuleContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return isRegexPossible();

  default:
    break;
  }
  return true;
}


void EscriptLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  escriptlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(escriptlexerLexerOnceFlag, escriptlexerLexerInitialize);
#endif
}
