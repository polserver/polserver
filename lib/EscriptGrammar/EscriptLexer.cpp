
// Generated from EscriptLexer.g4 by ANTLR 4.13.1


#include "EscriptLexer.h"


using namespace antlr4;

using namespace EscriptGrammar;


using namespace antlr4;

namespace {

struct EscriptLexerStaticData final {
  EscriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EscriptLexerStaticData(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData(EscriptLexerStaticData&&) = delete;
  EscriptLexerStaticData& operator=(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData& operator=(EscriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag escriptlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
EscriptLexerStaticData *escriptlexerLexerStaticData = nullptr;

void escriptlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (escriptlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(escriptlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<EscriptLexerStaticData>(
    std::vector<std::string>{
      "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP", 
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER", 
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "AND_A", 
      "AND_B", "AND", "OR_A", "OR_B", "OR", "BANG_A", "BANG_B", "BANG", 
      "BYREF", "UNUSED", "TOK_ERROR", "HASH", "DICTIONARY", "STRUCT", "ARRAY", 
      "STACK", "TOK_IN", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "STRING_LITERAL", 
      "INTERPOLATED_STRING_START", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
      "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV", "MOD", "ADD", "SUB", 
      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
      "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND", "CARET", "BITOR", 
      "NOTEQUAL_A", "NOTEQUAL_B", "NOTEQUAL", "EQUAL_DEPRECATED", "EQUAL", 
      "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI", "COMMA", 
      "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS", "QUESTION", 
      "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart", "EscapeSequence", 
      "HexDigits", "HexDigit", "Digits", "LetterOrDigit", "Letter", "DOUBLE_LBRACE_INSIDE", 
      "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE", 
      "STRING_LITERAL_INSIDE", "DOUBLE_RBRACE_INSIDE", "CLOSE_RBRACE_INSIDE", 
      "FORMAT_STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "INTERPOLATION_STRING", "INTERPOLATION_FORMAT"
    },
    std::vector<std::string>{
      "", "'if'", "'then'", "'elseif'", "'endif'", "'else'", "'goto'", "'return'", 
      "'const'", "'var'", "'do'", "'dowhile'", "'while'", "'endwhile'", 
      "'exit'", "'function'", "'endfunction'", "'exported'", "'use'", "'include'", 
      "'break'", "'continue'", "'for'", "'endfor'", "'to'", "'foreach'", 
      "'endforeach'", "'repeat'", "'until'", "'program'", "'endprogram'", 
      "'case'", "'default'", "'endcase'", "'enum'", "'endenum'", "'downto'", 
      "'step'", "'reference'", "'out'", "'inout'", "'ByVal'", "'string'", 
      "'long'", "'integer'", "'unsigned'", "'signed'", "'real'", "'float'", 
      "'double'", "'as'", "'is'", "'&&'", "'and'", "'||'", "'or'", "'!'", 
      "'not'", "'byref'", "'unused'", "'error'", "'hash'", "'dictionary'", 
      "'struct'", "'array'", "'stack'", "'in'", "", "", "", "", "", "", 
      "", "", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "'->'", "'*'", 
      "'/'", "'%'", "'+'", "'-'", "'+='", "'-='", "'*='", "'/='", "'%='", 
      "'<='", "'<'", "'>='", "'>'", "'>>'", "'<<'", "'&'", "'^'", "'|'", 
      "'<>'", "'!='", "'='", "'=='", "':='", "'.+'", "'.-'", "'.\\u003F'", 
      "';'", "','", "'~'", "'@'", "'::'", "':'", "'++'", "'--'", "'\\u003F:'", 
      "'\\u003F'", "", "", "", "", "'{{'"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP", 
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER", 
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "AND_A", 
      "AND_B", "OR_A", "OR_B", "BANG_A", "BANG_B", "BYREF", "UNUSED", "TOK_ERROR", 
      "HASH", "DICTIONARY", "STRUCT", "ARRAY", "STACK", "TOK_IN", "DECIMAL_LITERAL", 
      "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
      "STRING_LITERAL", "INTERPOLATED_STRING_START", "LPAREN", "RPAREN", 
      "LBRACK", "RBRACK", "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV", 
      "MOD", "ADD", "SUB", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
      "MOD_ASSIGN", "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND", 
      "CARET", "BITOR", "NOTEQUAL_A", "NOTEQUAL_B", "EQUAL_DEPRECATED", 
      "EQUAL", "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI", 
      "COMMA", "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS", 
      "QUESTION", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "DOUBLE_LBRACE_INSIDE", 
      "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE", 
      "STRING_LITERAL_INSIDE", "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,131,1033,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,
  	5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
  	13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
  	20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
  	27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,
  	34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,
  	41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,
  	48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
  	55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,
  	62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,
  	69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,
  	76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
  	83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
  	90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,
  	97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
  	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
  	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
  	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
  	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
  	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
  	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
  	7,139,2,140,7,140,2,141,7,141,2,142,7,142,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
  	1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
  	4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
  	1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
  	1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
  	1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,53,635,8,53,1,54,1,54,1,54,1,55,
  	1,55,1,55,1,56,1,56,1,56,1,56,3,56,647,8,56,1,57,1,57,1,58,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,59,3,59,659,8,59,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,
  	1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
  	1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
  	1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,3,69,721,
  	8,69,3,69,723,8,69,1,70,1,70,1,70,1,70,1,71,1,71,4,71,731,8,71,11,71,
  	12,71,732,1,72,1,72,1,72,4,72,738,8,72,11,72,12,72,739,1,73,1,73,1,73,
  	3,73,745,8,73,1,73,1,73,3,73,749,8,73,1,73,3,73,752,8,73,1,73,1,73,1,
  	73,3,73,757,8,73,1,74,1,74,1,74,1,74,3,74,763,8,74,1,74,3,74,766,8,74,
  	1,74,1,74,3,74,770,8,74,1,74,1,74,3,74,774,8,74,1,74,1,74,1,75,1,75,1,
  	75,5,75,781,8,75,10,75,12,75,784,9,75,1,75,1,75,1,76,1,76,1,76,1,76,1,
  	76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,
  	82,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,
  	88,1,88,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,1,93,1,
  	93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,98,1,
  	98,1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,
  	1,104,1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,3,106,871,
  	8,106,1,107,1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,110,1,110,1,110,
  	1,111,1,111,1,111,1,112,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,
  	1,116,1,116,1,117,1,117,1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,
  	1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,123,4,123,916,8,123,11,123,
  	12,123,917,1,123,1,123,1,124,1,124,1,124,1,124,5,124,926,8,124,10,124,
  	12,124,929,9,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
  	5,125,940,8,125,10,125,12,125,943,9,125,1,125,1,125,1,126,1,126,5,126,
  	949,8,126,10,126,12,126,952,9,126,1,127,1,127,3,127,956,8,127,1,127,1,
  	127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,967,8,128,1,129,1,
  	129,5,129,971,8,129,10,129,12,129,974,9,129,1,130,1,130,1,131,1,131,5,
  	131,980,8,131,10,131,12,131,983,9,131,1,132,1,132,3,132,987,8,132,1,133,
  	1,133,1,133,1,133,3,133,993,8,133,1,134,1,134,1,134,1,135,1,135,1,135,
  	1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,
  	1,139,4,139,1014,8,139,11,139,12,139,1015,1,140,1,140,1,140,1,140,1,140,
  	1,141,1,141,1,141,1,141,1,141,1,141,1,142,4,142,1030,8,142,11,142,12,
  	142,1031,1,927,0,143,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,
  	11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,
  	47,23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,
  	34,71,35,73,36,75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,
  	93,46,95,47,97,48,99,49,101,50,103,51,105,52,107,53,109,0,111,54,113,
  	55,115,0,117,56,119,57,121,0,123,58,125,59,127,60,129,61,131,62,133,63,
  	135,64,137,65,139,66,141,67,143,68,145,69,147,70,149,71,151,72,153,73,
  	155,74,157,75,159,76,161,77,163,78,165,79,167,80,169,81,171,82,173,83,
  	175,84,177,85,179,86,181,87,183,88,185,89,187,90,189,91,191,92,193,93,
  	195,94,197,95,199,96,201,97,203,98,205,99,207,100,209,101,211,102,213,
  	103,215,0,217,104,219,105,221,106,223,107,225,108,227,109,229,110,231,
  	111,233,112,235,113,237,114,239,115,241,116,243,117,245,118,247,119,249,
  	120,251,121,253,122,255,123,257,0,259,0,261,0,263,0,265,0,267,0,269,0,
  	271,124,273,125,275,126,277,127,279,128,281,129,283,0,285,130,287,131,
  	3,0,1,2,19,1,0,49,57,2,0,88,88,120,120,1,0,48,55,2,0,66,66,98,98,1,0,
  	48,49,2,0,80,80,112,112,2,0,43,43,45,45,2,0,34,34,92,92,3,0,9,10,12,13,
  	32,32,2,0,10,10,13,13,2,0,69,69,101,101,3,0,48,57,65,70,97,102,1,0,48,
  	57,4,0,36,36,65,90,95,95,97,122,2,0,0,127,55296,56319,1,0,55296,56319,
  	1,0,56320,57343,3,0,34,34,92,92,123,123,1,0,125,125,1050,0,3,1,0,0,0,
  	0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
  	0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
  	0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
  	37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
  	0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
  	0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,
  	69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
  	0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
  	0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
  	101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,111,1,0,0,0,0,
  	113,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
  	127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,
  	137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,
  	147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,
  	157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,
  	167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,
  	177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,
  	187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,
  	197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,
  	207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,217,1,0,0,0,0,
  	219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,
  	229,1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,
  	239,1,0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,
  	249,1,0,0,0,0,251,1,0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,1,271,1,0,0,0,1,
  	273,1,0,0,0,1,275,1,0,0,0,1,277,1,0,0,0,1,279,1,0,0,0,1,281,1,0,0,0,2,
  	283,1,0,0,0,2,285,1,0,0,0,2,287,1,0,0,0,3,289,1,0,0,0,5,292,1,0,0,0,7,
  	297,1,0,0,0,9,304,1,0,0,0,11,310,1,0,0,0,13,315,1,0,0,0,15,320,1,0,0,
  	0,17,327,1,0,0,0,19,333,1,0,0,0,21,337,1,0,0,0,23,340,1,0,0,0,25,348,
  	1,0,0,0,27,354,1,0,0,0,29,363,1,0,0,0,31,368,1,0,0,0,33,377,1,0,0,0,35,
  	389,1,0,0,0,37,398,1,0,0,0,39,402,1,0,0,0,41,410,1,0,0,0,43,416,1,0,0,
  	0,45,425,1,0,0,0,47,429,1,0,0,0,49,436,1,0,0,0,51,439,1,0,0,0,53,447,
  	1,0,0,0,55,458,1,0,0,0,57,465,1,0,0,0,59,471,1,0,0,0,61,479,1,0,0,0,63,
  	490,1,0,0,0,65,495,1,0,0,0,67,503,1,0,0,0,69,511,1,0,0,0,71,516,1,0,0,
  	0,73,524,1,0,0,0,75,531,1,0,0,0,77,536,1,0,0,0,79,546,1,0,0,0,81,550,
  	1,0,0,0,83,556,1,0,0,0,85,562,1,0,0,0,87,569,1,0,0,0,89,574,1,0,0,0,91,
  	582,1,0,0,0,93,591,1,0,0,0,95,598,1,0,0,0,97,603,1,0,0,0,99,609,1,0,0,
  	0,101,616,1,0,0,0,103,619,1,0,0,0,105,622,1,0,0,0,107,625,1,0,0,0,109,
  	634,1,0,0,0,111,636,1,0,0,0,113,639,1,0,0,0,115,646,1,0,0,0,117,648,1,
  	0,0,0,119,650,1,0,0,0,121,658,1,0,0,0,123,660,1,0,0,0,125,666,1,0,0,0,
  	127,673,1,0,0,0,129,679,1,0,0,0,131,684,1,0,0,0,133,695,1,0,0,0,135,702,
  	1,0,0,0,137,708,1,0,0,0,139,714,1,0,0,0,141,722,1,0,0,0,143,724,1,0,0,
  	0,145,728,1,0,0,0,147,734,1,0,0,0,149,756,1,0,0,0,151,758,1,0,0,0,153,
  	777,1,0,0,0,155,787,1,0,0,0,157,794,1,0,0,0,159,796,1,0,0,0,161,798,1,
  	0,0,0,163,800,1,0,0,0,165,802,1,0,0,0,167,805,1,0,0,0,169,808,1,0,0,0,
  	171,810,1,0,0,0,173,813,1,0,0,0,175,815,1,0,0,0,177,817,1,0,0,0,179,819,
  	1,0,0,0,181,821,1,0,0,0,183,823,1,0,0,0,185,826,1,0,0,0,187,829,1,0,0,
  	0,189,832,1,0,0,0,191,835,1,0,0,0,193,838,1,0,0,0,195,841,1,0,0,0,197,
  	843,1,0,0,0,199,846,1,0,0,0,201,848,1,0,0,0,203,851,1,0,0,0,205,854,1,
  	0,0,0,207,856,1,0,0,0,209,858,1,0,0,0,211,860,1,0,0,0,213,863,1,0,0,0,
  	215,870,1,0,0,0,217,872,1,0,0,0,219,874,1,0,0,0,221,877,1,0,0,0,223,880,
  	1,0,0,0,225,883,1,0,0,0,227,886,1,0,0,0,229,889,1,0,0,0,231,891,1,0,0,
  	0,233,893,1,0,0,0,235,895,1,0,0,0,237,897,1,0,0,0,239,900,1,0,0,0,241,
  	903,1,0,0,0,243,906,1,0,0,0,245,909,1,0,0,0,247,912,1,0,0,0,249,915,1,
  	0,0,0,251,921,1,0,0,0,253,935,1,0,0,0,255,946,1,0,0,0,257,953,1,0,0,0,
  	259,966,1,0,0,0,261,968,1,0,0,0,263,975,1,0,0,0,265,977,1,0,0,0,267,986,
  	1,0,0,0,269,992,1,0,0,0,271,994,1,0,0,0,273,997,1,0,0,0,275,1002,1,0,
  	0,0,277,1004,1,0,0,0,279,1009,1,0,0,0,281,1013,1,0,0,0,283,1017,1,0,0,
  	0,285,1022,1,0,0,0,287,1029,1,0,0,0,289,290,5,105,0,0,290,291,5,102,0,
  	0,291,4,1,0,0,0,292,293,5,116,0,0,293,294,5,104,0,0,294,295,5,101,0,0,
  	295,296,5,110,0,0,296,6,1,0,0,0,297,298,5,101,0,0,298,299,5,108,0,0,299,
  	300,5,115,0,0,300,301,5,101,0,0,301,302,5,105,0,0,302,303,5,102,0,0,303,
  	8,1,0,0,0,304,305,5,101,0,0,305,306,5,110,0,0,306,307,5,100,0,0,307,308,
  	5,105,0,0,308,309,5,102,0,0,309,10,1,0,0,0,310,311,5,101,0,0,311,312,
  	5,108,0,0,312,313,5,115,0,0,313,314,5,101,0,0,314,12,1,0,0,0,315,316,
  	5,103,0,0,316,317,5,111,0,0,317,318,5,116,0,0,318,319,5,111,0,0,319,14,
  	1,0,0,0,320,321,5,114,0,0,321,322,5,101,0,0,322,323,5,116,0,0,323,324,
  	5,117,0,0,324,325,5,114,0,0,325,326,5,110,0,0,326,16,1,0,0,0,327,328,
  	5,99,0,0,328,329,5,111,0,0,329,330,5,110,0,0,330,331,5,115,0,0,331,332,
  	5,116,0,0,332,18,1,0,0,0,333,334,5,118,0,0,334,335,5,97,0,0,335,336,5,
  	114,0,0,336,20,1,0,0,0,337,338,5,100,0,0,338,339,5,111,0,0,339,22,1,0,
  	0,0,340,341,5,100,0,0,341,342,5,111,0,0,342,343,5,119,0,0,343,344,5,104,
  	0,0,344,345,5,105,0,0,345,346,5,108,0,0,346,347,5,101,0,0,347,24,1,0,
  	0,0,348,349,5,119,0,0,349,350,5,104,0,0,350,351,5,105,0,0,351,352,5,108,
  	0,0,352,353,5,101,0,0,353,26,1,0,0,0,354,355,5,101,0,0,355,356,5,110,
  	0,0,356,357,5,100,0,0,357,358,5,119,0,0,358,359,5,104,0,0,359,360,5,105,
  	0,0,360,361,5,108,0,0,361,362,5,101,0,0,362,28,1,0,0,0,363,364,5,101,
  	0,0,364,365,5,120,0,0,365,366,5,105,0,0,366,367,5,116,0,0,367,30,1,0,
  	0,0,368,369,5,102,0,0,369,370,5,117,0,0,370,371,5,110,0,0,371,372,5,99,
  	0,0,372,373,5,116,0,0,373,374,5,105,0,0,374,375,5,111,0,0,375,376,5,110,
  	0,0,376,32,1,0,0,0,377,378,5,101,0,0,378,379,5,110,0,0,379,380,5,100,
  	0,0,380,381,5,102,0,0,381,382,5,117,0,0,382,383,5,110,0,0,383,384,5,99,
  	0,0,384,385,5,116,0,0,385,386,5,105,0,0,386,387,5,111,0,0,387,388,5,110,
  	0,0,388,34,1,0,0,0,389,390,5,101,0,0,390,391,5,120,0,0,391,392,5,112,
  	0,0,392,393,5,111,0,0,393,394,5,114,0,0,394,395,5,116,0,0,395,396,5,101,
  	0,0,396,397,5,100,0,0,397,36,1,0,0,0,398,399,5,117,0,0,399,400,5,115,
  	0,0,400,401,5,101,0,0,401,38,1,0,0,0,402,403,5,105,0,0,403,404,5,110,
  	0,0,404,405,5,99,0,0,405,406,5,108,0,0,406,407,5,117,0,0,407,408,5,100,
  	0,0,408,409,5,101,0,0,409,40,1,0,0,0,410,411,5,98,0,0,411,412,5,114,0,
  	0,412,413,5,101,0,0,413,414,5,97,0,0,414,415,5,107,0,0,415,42,1,0,0,0,
  	416,417,5,99,0,0,417,418,5,111,0,0,418,419,5,110,0,0,419,420,5,116,0,
  	0,420,421,5,105,0,0,421,422,5,110,0,0,422,423,5,117,0,0,423,424,5,101,
  	0,0,424,44,1,0,0,0,425,426,5,102,0,0,426,427,5,111,0,0,427,428,5,114,
  	0,0,428,46,1,0,0,0,429,430,5,101,0,0,430,431,5,110,0,0,431,432,5,100,
  	0,0,432,433,5,102,0,0,433,434,5,111,0,0,434,435,5,114,0,0,435,48,1,0,
  	0,0,436,437,5,116,0,0,437,438,5,111,0,0,438,50,1,0,0,0,439,440,5,102,
  	0,0,440,441,5,111,0,0,441,442,5,114,0,0,442,443,5,101,0,0,443,444,5,97,
  	0,0,444,445,5,99,0,0,445,446,5,104,0,0,446,52,1,0,0,0,447,448,5,101,0,
  	0,448,449,5,110,0,0,449,450,5,100,0,0,450,451,5,102,0,0,451,452,5,111,
  	0,0,452,453,5,114,0,0,453,454,5,101,0,0,454,455,5,97,0,0,455,456,5,99,
  	0,0,456,457,5,104,0,0,457,54,1,0,0,0,458,459,5,114,0,0,459,460,5,101,
  	0,0,460,461,5,112,0,0,461,462,5,101,0,0,462,463,5,97,0,0,463,464,5,116,
  	0,0,464,56,1,0,0,0,465,466,5,117,0,0,466,467,5,110,0,0,467,468,5,116,
  	0,0,468,469,5,105,0,0,469,470,5,108,0,0,470,58,1,0,0,0,471,472,5,112,
  	0,0,472,473,5,114,0,0,473,474,5,111,0,0,474,475,5,103,0,0,475,476,5,114,
  	0,0,476,477,5,97,0,0,477,478,5,109,0,0,478,60,1,0,0,0,479,480,5,101,0,
  	0,480,481,5,110,0,0,481,482,5,100,0,0,482,483,5,112,0,0,483,484,5,114,
  	0,0,484,485,5,111,0,0,485,486,5,103,0,0,486,487,5,114,0,0,487,488,5,97,
  	0,0,488,489,5,109,0,0,489,62,1,0,0,0,490,491,5,99,0,0,491,492,5,97,0,
  	0,492,493,5,115,0,0,493,494,5,101,0,0,494,64,1,0,0,0,495,496,5,100,0,
  	0,496,497,5,101,0,0,497,498,5,102,0,0,498,499,5,97,0,0,499,500,5,117,
  	0,0,500,501,5,108,0,0,501,502,5,116,0,0,502,66,1,0,0,0,503,504,5,101,
  	0,0,504,505,5,110,0,0,505,506,5,100,0,0,506,507,5,99,0,0,507,508,5,97,
  	0,0,508,509,5,115,0,0,509,510,5,101,0,0,510,68,1,0,0,0,511,512,5,101,
  	0,0,512,513,5,110,0,0,513,514,5,117,0,0,514,515,5,109,0,0,515,70,1,0,
  	0,0,516,517,5,101,0,0,517,518,5,110,0,0,518,519,5,100,0,0,519,520,5,101,
  	0,0,520,521,5,110,0,0,521,522,5,117,0,0,522,523,5,109,0,0,523,72,1,0,
  	0,0,524,525,5,100,0,0,525,526,5,111,0,0,526,527,5,119,0,0,527,528,5,110,
  	0,0,528,529,5,116,0,0,529,530,5,111,0,0,530,74,1,0,0,0,531,532,5,115,
  	0,0,532,533,5,116,0,0,533,534,5,101,0,0,534,535,5,112,0,0,535,76,1,0,
  	0,0,536,537,5,114,0,0,537,538,5,101,0,0,538,539,5,102,0,0,539,540,5,101,
  	0,0,540,541,5,114,0,0,541,542,5,101,0,0,542,543,5,110,0,0,543,544,5,99,
  	0,0,544,545,5,101,0,0,545,78,1,0,0,0,546,547,5,111,0,0,547,548,5,117,
  	0,0,548,549,5,116,0,0,549,80,1,0,0,0,550,551,5,105,0,0,551,552,5,110,
  	0,0,552,553,5,111,0,0,553,554,5,117,0,0,554,555,5,116,0,0,555,82,1,0,
  	0,0,556,557,5,66,0,0,557,558,5,121,0,0,558,559,5,86,0,0,559,560,5,97,
  	0,0,560,561,5,108,0,0,561,84,1,0,0,0,562,563,5,115,0,0,563,564,5,116,
  	0,0,564,565,5,114,0,0,565,566,5,105,0,0,566,567,5,110,0,0,567,568,5,103,
  	0,0,568,86,1,0,0,0,569,570,5,108,0,0,570,571,5,111,0,0,571,572,5,110,
  	0,0,572,573,5,103,0,0,573,88,1,0,0,0,574,575,5,105,0,0,575,576,5,110,
  	0,0,576,577,5,116,0,0,577,578,5,101,0,0,578,579,5,103,0,0,579,580,5,101,
  	0,0,580,581,5,114,0,0,581,90,1,0,0,0,582,583,5,117,0,0,583,584,5,110,
  	0,0,584,585,5,115,0,0,585,586,5,105,0,0,586,587,5,103,0,0,587,588,5,110,
  	0,0,588,589,5,101,0,0,589,590,5,100,0,0,590,92,1,0,0,0,591,592,5,115,
  	0,0,592,593,5,105,0,0,593,594,5,103,0,0,594,595,5,110,0,0,595,596,5,101,
  	0,0,596,597,5,100,0,0,597,94,1,0,0,0,598,599,5,114,0,0,599,600,5,101,
  	0,0,600,601,5,97,0,0,601,602,5,108,0,0,602,96,1,0,0,0,603,604,5,102,0,
  	0,604,605,5,108,0,0,605,606,5,111,0,0,606,607,5,97,0,0,607,608,5,116,
  	0,0,608,98,1,0,0,0,609,610,5,100,0,0,610,611,5,111,0,0,611,612,5,117,
  	0,0,612,613,5,98,0,0,613,614,5,108,0,0,614,615,5,101,0,0,615,100,1,0,
  	0,0,616,617,5,97,0,0,617,618,5,115,0,0,618,102,1,0,0,0,619,620,5,105,
  	0,0,620,621,5,115,0,0,621,104,1,0,0,0,622,623,5,38,0,0,623,624,5,38,0,
  	0,624,106,1,0,0,0,625,626,5,97,0,0,626,627,5,110,0,0,627,628,5,100,0,
  	0,628,108,1,0,0,0,629,630,5,38,0,0,630,635,5,38,0,0,631,632,5,97,0,0,
  	632,633,5,110,0,0,633,635,5,100,0,0,634,629,1,0,0,0,634,631,1,0,0,0,635,
  	110,1,0,0,0,636,637,5,124,0,0,637,638,5,124,0,0,638,112,1,0,0,0,639,640,
  	5,111,0,0,640,641,5,114,0,0,641,114,1,0,0,0,642,643,5,124,0,0,643,647,
  	5,124,0,0,644,645,5,111,0,0,645,647,5,114,0,0,646,642,1,0,0,0,646,644,
  	1,0,0,0,647,116,1,0,0,0,648,649,5,33,0,0,649,118,1,0,0,0,650,651,5,110,
  	0,0,651,652,5,111,0,0,652,653,5,116,0,0,653,120,1,0,0,0,654,659,5,33,
  	0,0,655,656,5,110,0,0,656,657,5,111,0,0,657,659,5,116,0,0,658,654,1,0,
  	0,0,658,655,1,0,0,0,659,122,1,0,0,0,660,661,5,98,0,0,661,662,5,121,0,
  	0,662,663,5,114,0,0,663,664,5,101,0,0,664,665,5,102,0,0,665,124,1,0,0,
  	0,666,667,5,117,0,0,667,668,5,110,0,0,668,669,5,117,0,0,669,670,5,115,
  	0,0,670,671,5,101,0,0,671,672,5,100,0,0,672,126,1,0,0,0,673,674,5,101,
  	0,0,674,675,5,114,0,0,675,676,5,114,0,0,676,677,5,111,0,0,677,678,5,114,
  	0,0,678,128,1,0,0,0,679,680,5,104,0,0,680,681,5,97,0,0,681,682,5,115,
  	0,0,682,683,5,104,0,0,683,130,1,0,0,0,684,685,5,100,0,0,685,686,5,105,
  	0,0,686,687,5,99,0,0,687,688,5,116,0,0,688,689,5,105,0,0,689,690,5,111,
  	0,0,690,691,5,110,0,0,691,692,5,97,0,0,692,693,5,114,0,0,693,694,5,121,
  	0,0,694,132,1,0,0,0,695,696,5,115,0,0,696,697,5,116,0,0,697,698,5,114,
  	0,0,698,699,5,117,0,0,699,700,5,99,0,0,700,701,5,116,0,0,701,134,1,0,
  	0,0,702,703,5,97,0,0,703,704,5,114,0,0,704,705,5,114,0,0,705,706,5,97,
  	0,0,706,707,5,121,0,0,707,136,1,0,0,0,708,709,5,115,0,0,709,710,5,116,
  	0,0,710,711,5,97,0,0,711,712,5,99,0,0,712,713,5,107,0,0,713,138,1,0,0,
  	0,714,715,5,105,0,0,715,716,5,110,0,0,716,140,1,0,0,0,717,723,5,48,0,
  	0,718,720,7,0,0,0,719,721,3,265,131,0,720,719,1,0,0,0,720,721,1,0,0,0,
  	721,723,1,0,0,0,722,717,1,0,0,0,722,718,1,0,0,0,723,142,1,0,0,0,724,725,
  	5,48,0,0,725,726,7,1,0,0,726,727,3,261,129,0,727,144,1,0,0,0,728,730,
  	5,48,0,0,729,731,7,2,0,0,730,729,1,0,0,0,731,732,1,0,0,0,732,730,1,0,
  	0,0,732,733,1,0,0,0,733,146,1,0,0,0,734,735,5,48,0,0,735,737,7,3,0,0,
  	736,738,7,4,0,0,737,736,1,0,0,0,738,739,1,0,0,0,739,737,1,0,0,0,739,740,
  	1,0,0,0,740,148,1,0,0,0,741,742,3,265,131,0,742,744,5,46,0,0,743,745,
  	3,265,131,0,744,743,1,0,0,0,744,745,1,0,0,0,745,749,1,0,0,0,746,747,5,
  	46,0,0,747,749,3,265,131,0,748,741,1,0,0,0,748,746,1,0,0,0,749,751,1,
  	0,0,0,750,752,3,257,127,0,751,750,1,0,0,0,751,752,1,0,0,0,752,757,1,0,
  	0,0,753,754,3,265,131,0,754,755,3,257,127,0,755,757,1,0,0,0,756,748,1,
  	0,0,0,756,753,1,0,0,0,757,150,1,0,0,0,758,759,5,48,0,0,759,769,7,1,0,
  	0,760,762,3,261,129,0,761,763,5,46,0,0,762,761,1,0,0,0,762,763,1,0,0,
  	0,763,770,1,0,0,0,764,766,3,261,129,0,765,764,1,0,0,0,765,766,1,0,0,0,
  	766,767,1,0,0,0,767,768,5,46,0,0,768,770,3,261,129,0,769,760,1,0,0,0,
  	769,765,1,0,0,0,770,771,1,0,0,0,771,773,7,5,0,0,772,774,7,6,0,0,773,772,
  	1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,3,265,131,0,776,152,1,
  	0,0,0,777,782,5,34,0,0,778,781,8,7,0,0,779,781,3,259,128,0,780,778,1,
  	0,0,0,780,779,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,
  	783,785,1,0,0,0,784,782,1,0,0,0,785,786,5,34,0,0,786,154,1,0,0,0,787,
  	788,5,36,0,0,788,789,5,34,0,0,789,790,1,0,0,0,790,791,6,76,0,0,791,792,
  	1,0,0,0,792,793,6,76,1,0,793,156,1,0,0,0,794,795,5,40,0,0,795,158,1,0,
  	0,0,796,797,5,41,0,0,797,160,1,0,0,0,798,799,5,91,0,0,799,162,1,0,0,0,
  	800,801,5,93,0,0,801,164,1,0,0,0,802,803,5,123,0,0,803,804,6,81,2,0,804,
  	166,1,0,0,0,805,806,5,125,0,0,806,807,6,82,3,0,807,168,1,0,0,0,808,809,
  	5,46,0,0,809,170,1,0,0,0,810,811,5,45,0,0,811,812,5,62,0,0,812,172,1,
  	0,0,0,813,814,5,42,0,0,814,174,1,0,0,0,815,816,5,47,0,0,816,176,1,0,0,
  	0,817,818,5,37,0,0,818,178,1,0,0,0,819,820,5,43,0,0,820,180,1,0,0,0,821,
  	822,5,45,0,0,822,182,1,0,0,0,823,824,5,43,0,0,824,825,5,61,0,0,825,184,
  	1,0,0,0,826,827,5,45,0,0,827,828,5,61,0,0,828,186,1,0,0,0,829,830,5,42,
  	0,0,830,831,5,61,0,0,831,188,1,0,0,0,832,833,5,47,0,0,833,834,5,61,0,
  	0,834,190,1,0,0,0,835,836,5,37,0,0,836,837,5,61,0,0,837,192,1,0,0,0,838,
  	839,5,60,0,0,839,840,5,61,0,0,840,194,1,0,0,0,841,842,5,60,0,0,842,196,
  	1,0,0,0,843,844,5,62,0,0,844,845,5,61,0,0,845,198,1,0,0,0,846,847,5,62,
  	0,0,847,200,1,0,0,0,848,849,5,62,0,0,849,850,5,62,0,0,850,202,1,0,0,0,
  	851,852,5,60,0,0,852,853,5,60,0,0,853,204,1,0,0,0,854,855,5,38,0,0,855,
  	206,1,0,0,0,856,857,5,94,0,0,857,208,1,0,0,0,858,859,5,124,0,0,859,210,
  	1,0,0,0,860,861,5,60,0,0,861,862,5,62,0,0,862,212,1,0,0,0,863,864,5,33,
  	0,0,864,865,5,61,0,0,865,214,1,0,0,0,866,867,5,60,0,0,867,871,5,62,0,
  	0,868,869,5,33,0,0,869,871,5,61,0,0,870,866,1,0,0,0,870,868,1,0,0,0,871,
  	216,1,0,0,0,872,873,5,61,0,0,873,218,1,0,0,0,874,875,5,61,0,0,875,876,
  	5,61,0,0,876,220,1,0,0,0,877,878,5,58,0,0,878,879,5,61,0,0,879,222,1,
  	0,0,0,880,881,5,46,0,0,881,882,5,43,0,0,882,224,1,0,0,0,883,884,5,46,
  	0,0,884,885,5,45,0,0,885,226,1,0,0,0,886,887,5,46,0,0,887,888,5,63,0,
  	0,888,228,1,0,0,0,889,890,5,59,0,0,890,230,1,0,0,0,891,892,5,44,0,0,892,
  	232,1,0,0,0,893,894,5,126,0,0,894,234,1,0,0,0,895,896,5,64,0,0,896,236,
  	1,0,0,0,897,898,5,58,0,0,898,899,5,58,0,0,899,238,1,0,0,0,900,901,5,58,
  	0,0,901,902,6,118,4,0,902,240,1,0,0,0,903,904,5,43,0,0,904,905,5,43,0,
  	0,905,242,1,0,0,0,906,907,5,45,0,0,907,908,5,45,0,0,908,244,1,0,0,0,909,
  	910,5,63,0,0,910,911,5,58,0,0,911,246,1,0,0,0,912,913,5,63,0,0,913,248,
  	1,0,0,0,914,916,7,8,0,0,915,914,1,0,0,0,916,917,1,0,0,0,917,915,1,0,0,
  	0,917,918,1,0,0,0,918,919,1,0,0,0,919,920,6,123,5,0,920,250,1,0,0,0,921,
  	922,5,47,0,0,922,923,5,42,0,0,923,927,1,0,0,0,924,926,9,0,0,0,925,924,
  	1,0,0,0,926,929,1,0,0,0,927,928,1,0,0,0,927,925,1,0,0,0,928,930,1,0,0,
  	0,929,927,1,0,0,0,930,931,5,42,0,0,931,932,5,47,0,0,932,933,1,0,0,0,933,
  	934,6,124,6,0,934,252,1,0,0,0,935,936,5,47,0,0,936,937,5,47,0,0,937,941,
  	1,0,0,0,938,940,8,9,0,0,939,938,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,
  	0,941,942,1,0,0,0,942,944,1,0,0,0,943,941,1,0,0,0,944,945,6,125,6,0,945,
  	254,1,0,0,0,946,950,3,269,133,0,947,949,3,267,132,0,948,947,1,0,0,0,949,
  	952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,256,1,0,0,0,952,950,1,
  	0,0,0,953,955,7,10,0,0,954,956,7,6,0,0,955,954,1,0,0,0,955,956,1,0,0,
  	0,956,957,1,0,0,0,957,958,3,265,131,0,958,258,1,0,0,0,959,960,5,92,0,
  	0,960,961,7,1,0,0,961,962,3,263,130,0,962,963,3,263,130,0,963,967,1,0,
  	0,0,964,965,5,92,0,0,965,967,9,0,0,0,966,959,1,0,0,0,966,964,1,0,0,0,
  	967,260,1,0,0,0,968,972,3,263,130,0,969,971,3,263,130,0,970,969,1,0,0,
  	0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,262,1,0,0,0,974,
  	972,1,0,0,0,975,976,7,11,0,0,976,264,1,0,0,0,977,981,7,12,0,0,978,980,
  	7,12,0,0,979,978,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,
  	0,0,982,266,1,0,0,0,983,981,1,0,0,0,984,987,3,269,133,0,985,987,7,12,
  	0,0,986,984,1,0,0,0,986,985,1,0,0,0,987,268,1,0,0,0,988,993,7,13,0,0,
  	989,993,8,14,0,0,990,991,7,15,0,0,991,993,7,16,0,0,992,988,1,0,0,0,992,
  	989,1,0,0,0,992,990,1,0,0,0,993,270,1,0,0,0,994,995,5,123,0,0,995,996,
  	5,123,0,0,996,272,1,0,0,0,997,998,5,123,0,0,998,999,6,135,7,0,999,1000,
  	1,0,0,0,1000,1001,6,135,8,0,1001,274,1,0,0,0,1002,1003,3,259,128,0,1003,
  	276,1,0,0,0,1004,1005,5,34,0,0,1005,1006,6,137,9,0,1006,1007,1,0,0,0,
  	1007,1008,6,137,10,0,1008,278,1,0,0,0,1009,1010,5,125,0,0,1010,1011,5,
  	125,0,0,1011,280,1,0,0,0,1012,1014,8,17,0,0,1013,1012,1,0,0,0,1014,1015,
  	1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,282,1,0,0,0,1017,1018,
  	5,125,0,0,1018,1019,5,125,0,0,1019,1020,1,0,0,0,1020,1021,6,140,11,0,
  	1021,284,1,0,0,0,1022,1023,5,125,0,0,1023,1024,6,141,12,0,1024,1025,1,
  	0,0,0,1025,1026,6,141,13,0,1026,1027,6,141,10,0,1027,286,1,0,0,0,1028,
  	1030,8,18,0,0,1029,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1029,1,0,0,0,1031,
  	1032,1,0,0,0,1032,288,1,0,0,0,33,0,1,2,634,646,658,720,722,732,739,744,
  	748,751,756,762,765,769,773,780,782,870,917,927,941,950,955,966,972,981,
  	986,992,1015,1031,14,1,76,0,5,1,0,1,81,1,1,82,2,1,118,3,0,1,0,0,2,0,1,
  	135,4,5,0,0,1,137,5,4,0,0,7,131,0,1,141,6,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  escriptlexerLexerStaticData = staticData.release();
}

}

EscriptLexer::EscriptLexer(CharStream *input) : Lexer(input) {
  EscriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *escriptlexerLexerStaticData->atn, escriptlexerLexerStaticData->decisionToDFA, escriptlexerLexerStaticData->sharedContextCache);
}

EscriptLexer::~EscriptLexer() {
  delete _interpreter;
}

std::string EscriptLexer::getGrammarFileName() const {
  return "EscriptLexer.g4";
}

const std::vector<std::string>& EscriptLexer::getRuleNames() const {
  return escriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EscriptLexer::getChannelNames() const {
  return escriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EscriptLexer::getModeNames() const {
  return escriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EscriptLexer::getVocabulary() const {
  return escriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EscriptLexer::getSerializedATN() const {
  return escriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& EscriptLexer::getATN() const {
  return *escriptlexerLexerStaticData->atn;
}


void EscriptLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 76: INTERPOLATED_STRING_STARTAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 81: LBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 82: RBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 118: COLONAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 135: LBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 137: DOUBLE_QUOTE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 141: CLOSE_RBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void EscriptLexer::INTERPOLATED_STRING_STARTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  interpolatedStringLevel++;  break;

  default:
    break;
  }
}

void EscriptLexer::LBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel + 1 );
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::RBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel - 1 );
            if ( curlyLevels.top() == 0 )
            {
              curlyLevels.pop();
              skip();
              popMode();
            }
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::COLONAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3: 
            if (interpolatedStringLevel > 0)
            {
                int ind = 1;
                bool switchToFormatString = true;
                
                while (_input->LA(ind) != '}')
                {
                    if (_input->LA(ind) == ':' || _input->LA(ind) == ')')
                    {
                        switchToFormatString = false;
                        break;
                    }
                    ind++;
                }
                if (switchToFormatString)
                {
                    setMode( INTERPOLATION_FORMAT );
                }
            }
     break;

  default:
    break;
  }
}

void EscriptLexer::LBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  curlyLevels.push(1);  break;

  default:
    break;
  }
}

void EscriptLexer::DOUBLE_QUOTE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  interpolatedStringLevel--;  break;

  default:
    break;
  }
}

void EscriptLexer::CLOSE_RBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 6:  curlyLevels.pop();  break;

  default:
    break;
  }
}



void EscriptLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  escriptlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(escriptlexerLexerOnceFlag, escriptlexerLexerInitialize);
#endif
}
