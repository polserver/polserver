
// Generated from /Users/kevineady/UO/polserver/lib/EscriptGrammar/EscriptLexer.g4 by ANTLR 4.13.1


#include "EscriptLexer.h"


using namespace antlr4;

using namespace EscriptGrammar;


using namespace antlr4;

namespace {

struct EscriptLexerStaticData final {
  EscriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EscriptLexerStaticData(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData(EscriptLexerStaticData&&) = delete;
  EscriptLexerStaticData& operator=(const EscriptLexerStaticData&) = delete;
  EscriptLexerStaticData& operator=(EscriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag escriptlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
EscriptLexerStaticData *escriptlexerLexerStaticData = nullptr;

void escriptlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (escriptlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(escriptlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<EscriptLexerStaticData>(
    std::vector<std::string>{
      "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP", 
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER", 
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "AND_A", 
      "AND_B", "AND", "OR_A", "OR_B", "OR", "BANG_A", "BANG_B", "BANG", 
      "BYREF", "UNUSED", "TOK_ERROR", "HASH", "DICTIONARY", "STRUCT", "ARRAY", 
      "STACK", "TOK_IN", "UNINIT", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "STRING_LITERAL", 
      "INTERPOLATED_STRING_START", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
      "LBRACE", "RBRACE", "DOT", "ARROW", "MUL", "DIV", "MOD", "ADD", "SUB", 
      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
      "LE", "LT", "GE", "GT", "RSHIFT", "LSHIFT", "BITAND", "CARET", "BITOR", 
      "NOTEQUAL_A", "NOTEQUAL_B", "NOTEQUAL", "EQUAL_DEPRECATED", "EQUAL", 
      "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", "SEMI", "COMMA", 
      "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", "ELVIS", "QUESTION", 
      "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart", "EscapeSequence", 
      "HexDigits", "HexDigit", "Digits", "LetterOrDigit", "Letter", "DOUBLE_LBRACE_INSIDE", 
      "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", "DOUBLE_RBRACE", 
      "STRING_LITERAL_INSIDE", "DOUBLE_RBRACE_INSIDE", "CLOSE_RBRACE_INSIDE", 
      "FORMAT_STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "INTERPOLATION_STRING", "INTERPOLATION_FORMAT"
    },
    std::vector<std::string>{
      "", "'if'", "'then'", "'elseif'", "'endif'", "'else'", "'goto'", "'return'", 
      "'const'", "'var'", "'do'", "'dowhile'", "'while'", "'endwhile'", 
      "'exit'", "'function'", "'endfunction'", "'exported'", "'use'", "'include'", 
      "'break'", "'continue'", "'for'", "'endfor'", "'to'", "'foreach'", 
      "'endforeach'", "'repeat'", "'until'", "'program'", "'endprogram'", 
      "'case'", "'default'", "'endcase'", "'enum'", "'endenum'", "'downto'", 
      "'step'", "'reference'", "'out'", "'inout'", "'ByVal'", "'string'", 
      "'long'", "'integer'", "'unsigned'", "'signed'", "'real'", "'float'", 
      "'double'", "'as'", "'is'", "'&&'", "'and'", "'||'", "'or'", "'!'", 
      "'not'", "'byref'", "'unused'", "'error'", "'hash'", "'dictionary'", 
      "'struct'", "'array'", "'stack'", "'in'", "'uninit'", "", "", "", 
      "", "", "", "", "", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", 
      "'->'", "'*'", "'/'", "'%'", "'+'", "'-'", "'+='", "'-='", "'*='", 
      "'/='", "'%='", "'<='", "'<'", "'>='", "'>'", "'>>'", "'<<'", "'&'", 
      "'^'", "'|'", "'<>'", "'!='", "'='", "'=='", "':='", "'.+'", "'.-'", 
      "'.\\u003F'", "';'", "','", "'~'", "'@'", "'::'", "':'", "'++'", "'--'", 
      "'\\u003F:'", "'\\u003F'", "", "", "", "", "'{{'"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "ELSEIF", "ENDIF", "ELSE", "GOTO", "RETURN", "TOK_CONST", 
      "VAR", "DO", "DOWHILE", "WHILE", "ENDWHILE", "EXIT", "FUNCTION", "ENDFUNCTION", 
      "EXPORTED", "USE", "INCLUDE", "BREAK", "CONTINUE", "FOR", "ENDFOR", 
      "TO", "FOREACH", "ENDFOREACH", "REPEAT", "UNTIL", "PROGRAM", "ENDPROGRAM", 
      "CASE", "DEFAULT", "ENDCASE", "ENUM", "ENDENUM", "DOWNTO", "STEP", 
      "REFERENCE", "TOK_OUT", "INOUT", "BYVAL", "STRING", "TOK_LONG", "INTEGER", 
      "UNSIGNED", "SIGNED", "REAL", "FLOAT", "DOUBLE", "AS", "IS", "AND_A", 
      "AND_B", "OR_A", "OR_B", "BANG_A", "BANG_B", "BYREF", "UNUSED", "TOK_ERROR", 
      "HASH", "DICTIONARY", "STRUCT", "ARRAY", "STACK", "TOK_IN", "UNINIT", 
      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "STRING_LITERAL", "INTERPOLATED_STRING_START", 
      "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "DOT", 
      "ARROW", "MUL", "DIV", "MOD", "ADD", "SUB", "ADD_ASSIGN", "SUB_ASSIGN", 
      "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "LE", "LT", "GE", "GT", 
      "RSHIFT", "LSHIFT", "BITAND", "CARET", "BITOR", "NOTEQUAL_A", "NOTEQUAL_B", 
      "EQUAL_DEPRECATED", "EQUAL", "ASSIGN", "ADDMEMBER", "DELMEMBER", "CHKMEMBER", 
      "SEMI", "COMMA", "TILDE", "AT", "COLONCOLON", "COLON", "INC", "DEC", 
      "ELVIS", "QUESTION", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", 
      "DOUBLE_LBRACE_INSIDE", "LBRACE_INSIDE", "REGULAR_CHAR_INSIDE", "DOUBLE_QUOTE_INSIDE", 
      "DOUBLE_RBRACE", "STRING_LITERAL_INSIDE", "CLOSE_RBRACE_INSIDE", "FORMAT_STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,132,1042,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,
  	5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
  	13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
  	20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
  	27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,
  	34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,
  	41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,
  	48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
  	55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,
  	62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,
  	69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,
  	76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
  	83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,
  	90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,
  	97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
  	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
  	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
  	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
  	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
  	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
  	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
  	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,1,0,1,0,1,0,1,1,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
  	17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
  	21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,
  	33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
  	39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,
  	51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,53,637,8,53,1,54,1,
  	54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,649,8,56,1,57,1,57,1,
  	58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,3,59,661,8,59,1,60,1,60,1,60,1,
  	60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,
  	66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,
  	69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,3,70,730,8,70,3,70,732,8,70,1,71,
  	1,71,1,71,1,71,1,72,1,72,4,72,740,8,72,11,72,12,72,741,1,73,1,73,1,73,
  	4,73,747,8,73,11,73,12,73,748,1,74,1,74,1,74,3,74,754,8,74,1,74,1,74,
  	3,74,758,8,74,1,74,3,74,761,8,74,1,74,1,74,1,74,3,74,766,8,74,1,75,1,
  	75,1,75,1,75,3,75,772,8,75,1,75,3,75,775,8,75,1,75,1,75,3,75,779,8,75,
  	1,75,1,75,3,75,783,8,75,1,75,1,75,1,76,1,76,1,76,5,76,790,8,76,10,76,
  	12,76,793,9,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,
  	1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,
  	1,85,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,
  	1,91,1,91,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,
  	1,96,1,96,1,96,1,97,1,97,1,98,1,98,1,98,1,99,1,99,1,100,1,100,1,100,1,
  	101,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,105,
  	1,106,1,106,1,106,1,107,1,107,1,107,1,107,3,107,880,8,107,1,108,1,108,
  	1,109,1,109,1,109,1,110,1,110,1,110,1,111,1,111,1,111,1,112,1,112,1,112,
  	1,113,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,
  	1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,1,121,1,121,1,121,1,122,
  	1,122,1,122,1,123,1,123,1,124,4,124,925,8,124,11,124,12,124,926,1,124,
  	1,124,1,125,1,125,1,125,1,125,5,125,935,8,125,10,125,12,125,938,9,125,
  	1,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,5,126,949,8,126,
  	10,126,12,126,952,9,126,1,126,1,126,1,127,1,127,5,127,958,8,127,10,127,
  	12,127,961,9,127,1,128,1,128,3,128,965,8,128,1,128,1,128,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,3,129,976,8,129,1,130,1,130,5,130,980,8,
  	130,10,130,12,130,983,9,130,1,131,1,131,1,132,1,132,5,132,989,8,132,10,
  	132,12,132,992,9,132,1,133,1,133,3,133,996,8,133,1,134,1,134,1,134,1,
  	134,3,134,1002,8,134,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
  	1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,140,4,140,
  	1023,8,140,11,140,12,140,1024,1,141,1,141,1,141,1,141,1,141,1,142,1,142,
  	1,142,1,142,1,142,1,142,1,143,4,143,1039,8,143,11,143,12,143,1040,1,936,
  	0,144,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,
  	29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,
  	25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,
  	75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,97,
  	48,99,49,101,50,103,51,105,52,107,53,109,0,111,54,113,55,115,0,117,56,
  	119,57,121,0,123,58,125,59,127,60,129,61,131,62,133,63,135,64,137,65,
  	139,66,141,67,143,68,145,69,147,70,149,71,151,72,153,73,155,74,157,75,
  	159,76,161,77,163,78,165,79,167,80,169,81,171,82,173,83,175,84,177,85,
  	179,86,181,87,183,88,185,89,187,90,189,91,191,92,193,93,195,94,197,95,
  	199,96,201,97,203,98,205,99,207,100,209,101,211,102,213,103,215,104,217,
  	0,219,105,221,106,223,107,225,108,227,109,229,110,231,111,233,112,235,
  	113,237,114,239,115,241,116,243,117,245,118,247,119,249,120,251,121,253,
  	122,255,123,257,124,259,0,261,0,263,0,265,0,267,0,269,0,271,0,273,125,
  	275,126,277,127,279,128,281,129,283,130,285,0,287,131,289,132,3,0,1,2,
  	19,1,0,49,57,2,0,88,88,120,120,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,
  	0,80,80,112,112,2,0,43,43,45,45,2,0,34,34,92,92,3,0,9,10,12,13,32,32,
  	2,0,10,10,13,13,2,0,69,69,101,101,3,0,48,57,65,70,97,102,1,0,48,57,4,
  	0,36,36,65,90,95,95,97,122,2,0,0,127,55296,56319,1,0,55296,56319,1,0,
  	56320,57343,3,0,34,34,92,92,123,123,1,0,125,125,1059,0,3,1,0,0,0,0,5,
  	1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
  	0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
  	27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
  	0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
  	0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
  	59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
  	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
  	0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,
  	91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,111,1,0,0,0,0,113,
  	1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
  	1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
  	1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,
  	1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,
  	1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,
  	1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,
  	1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,
  	1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,
  	1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,219,
  	1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,
  	1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,0,235,1,0,0,0,0,237,1,0,0,0,0,239,
  	1,0,0,0,0,241,1,0,0,0,0,243,1,0,0,0,0,245,1,0,0,0,0,247,1,0,0,0,0,249,
  	1,0,0,0,0,251,1,0,0,0,0,253,1,0,0,0,0,255,1,0,0,0,0,257,1,0,0,0,1,273,
  	1,0,0,0,1,275,1,0,0,0,1,277,1,0,0,0,1,279,1,0,0,0,1,281,1,0,0,0,1,283,
  	1,0,0,0,2,285,1,0,0,0,2,287,1,0,0,0,2,289,1,0,0,0,3,291,1,0,0,0,5,294,
  	1,0,0,0,7,299,1,0,0,0,9,306,1,0,0,0,11,312,1,0,0,0,13,317,1,0,0,0,15,
  	322,1,0,0,0,17,329,1,0,0,0,19,335,1,0,0,0,21,339,1,0,0,0,23,342,1,0,0,
  	0,25,350,1,0,0,0,27,356,1,0,0,0,29,365,1,0,0,0,31,370,1,0,0,0,33,379,
  	1,0,0,0,35,391,1,0,0,0,37,400,1,0,0,0,39,404,1,0,0,0,41,412,1,0,0,0,43,
  	418,1,0,0,0,45,427,1,0,0,0,47,431,1,0,0,0,49,438,1,0,0,0,51,441,1,0,0,
  	0,53,449,1,0,0,0,55,460,1,0,0,0,57,467,1,0,0,0,59,473,1,0,0,0,61,481,
  	1,0,0,0,63,492,1,0,0,0,65,497,1,0,0,0,67,505,1,0,0,0,69,513,1,0,0,0,71,
  	518,1,0,0,0,73,526,1,0,0,0,75,533,1,0,0,0,77,538,1,0,0,0,79,548,1,0,0,
  	0,81,552,1,0,0,0,83,558,1,0,0,0,85,564,1,0,0,0,87,571,1,0,0,0,89,576,
  	1,0,0,0,91,584,1,0,0,0,93,593,1,0,0,0,95,600,1,0,0,0,97,605,1,0,0,0,99,
  	611,1,0,0,0,101,618,1,0,0,0,103,621,1,0,0,0,105,624,1,0,0,0,107,627,1,
  	0,0,0,109,636,1,0,0,0,111,638,1,0,0,0,113,641,1,0,0,0,115,648,1,0,0,0,
  	117,650,1,0,0,0,119,652,1,0,0,0,121,660,1,0,0,0,123,662,1,0,0,0,125,668,
  	1,0,0,0,127,675,1,0,0,0,129,681,1,0,0,0,131,686,1,0,0,0,133,697,1,0,0,
  	0,135,704,1,0,0,0,137,710,1,0,0,0,139,716,1,0,0,0,141,719,1,0,0,0,143,
  	731,1,0,0,0,145,733,1,0,0,0,147,737,1,0,0,0,149,743,1,0,0,0,151,765,1,
  	0,0,0,153,767,1,0,0,0,155,786,1,0,0,0,157,796,1,0,0,0,159,803,1,0,0,0,
  	161,805,1,0,0,0,163,807,1,0,0,0,165,809,1,0,0,0,167,811,1,0,0,0,169,814,
  	1,0,0,0,171,817,1,0,0,0,173,819,1,0,0,0,175,822,1,0,0,0,177,824,1,0,0,
  	0,179,826,1,0,0,0,181,828,1,0,0,0,183,830,1,0,0,0,185,832,1,0,0,0,187,
  	835,1,0,0,0,189,838,1,0,0,0,191,841,1,0,0,0,193,844,1,0,0,0,195,847,1,
  	0,0,0,197,850,1,0,0,0,199,852,1,0,0,0,201,855,1,0,0,0,203,857,1,0,0,0,
  	205,860,1,0,0,0,207,863,1,0,0,0,209,865,1,0,0,0,211,867,1,0,0,0,213,869,
  	1,0,0,0,215,872,1,0,0,0,217,879,1,0,0,0,219,881,1,0,0,0,221,883,1,0,0,
  	0,223,886,1,0,0,0,225,889,1,0,0,0,227,892,1,0,0,0,229,895,1,0,0,0,231,
  	898,1,0,0,0,233,900,1,0,0,0,235,902,1,0,0,0,237,904,1,0,0,0,239,906,1,
  	0,0,0,241,909,1,0,0,0,243,912,1,0,0,0,245,915,1,0,0,0,247,918,1,0,0,0,
  	249,921,1,0,0,0,251,924,1,0,0,0,253,930,1,0,0,0,255,944,1,0,0,0,257,955,
  	1,0,0,0,259,962,1,0,0,0,261,975,1,0,0,0,263,977,1,0,0,0,265,984,1,0,0,
  	0,267,986,1,0,0,0,269,995,1,0,0,0,271,1001,1,0,0,0,273,1003,1,0,0,0,275,
  	1006,1,0,0,0,277,1011,1,0,0,0,279,1013,1,0,0,0,281,1018,1,0,0,0,283,1022,
  	1,0,0,0,285,1026,1,0,0,0,287,1031,1,0,0,0,289,1038,1,0,0,0,291,292,5,
  	105,0,0,292,293,5,102,0,0,293,4,1,0,0,0,294,295,5,116,0,0,295,296,5,104,
  	0,0,296,297,5,101,0,0,297,298,5,110,0,0,298,6,1,0,0,0,299,300,5,101,0,
  	0,300,301,5,108,0,0,301,302,5,115,0,0,302,303,5,101,0,0,303,304,5,105,
  	0,0,304,305,5,102,0,0,305,8,1,0,0,0,306,307,5,101,0,0,307,308,5,110,0,
  	0,308,309,5,100,0,0,309,310,5,105,0,0,310,311,5,102,0,0,311,10,1,0,0,
  	0,312,313,5,101,0,0,313,314,5,108,0,0,314,315,5,115,0,0,315,316,5,101,
  	0,0,316,12,1,0,0,0,317,318,5,103,0,0,318,319,5,111,0,0,319,320,5,116,
  	0,0,320,321,5,111,0,0,321,14,1,0,0,0,322,323,5,114,0,0,323,324,5,101,
  	0,0,324,325,5,116,0,0,325,326,5,117,0,0,326,327,5,114,0,0,327,328,5,110,
  	0,0,328,16,1,0,0,0,329,330,5,99,0,0,330,331,5,111,0,0,331,332,5,110,0,
  	0,332,333,5,115,0,0,333,334,5,116,0,0,334,18,1,0,0,0,335,336,5,118,0,
  	0,336,337,5,97,0,0,337,338,5,114,0,0,338,20,1,0,0,0,339,340,5,100,0,0,
  	340,341,5,111,0,0,341,22,1,0,0,0,342,343,5,100,0,0,343,344,5,111,0,0,
  	344,345,5,119,0,0,345,346,5,104,0,0,346,347,5,105,0,0,347,348,5,108,0,
  	0,348,349,5,101,0,0,349,24,1,0,0,0,350,351,5,119,0,0,351,352,5,104,0,
  	0,352,353,5,105,0,0,353,354,5,108,0,0,354,355,5,101,0,0,355,26,1,0,0,
  	0,356,357,5,101,0,0,357,358,5,110,0,0,358,359,5,100,0,0,359,360,5,119,
  	0,0,360,361,5,104,0,0,361,362,5,105,0,0,362,363,5,108,0,0,363,364,5,101,
  	0,0,364,28,1,0,0,0,365,366,5,101,0,0,366,367,5,120,0,0,367,368,5,105,
  	0,0,368,369,5,116,0,0,369,30,1,0,0,0,370,371,5,102,0,0,371,372,5,117,
  	0,0,372,373,5,110,0,0,373,374,5,99,0,0,374,375,5,116,0,0,375,376,5,105,
  	0,0,376,377,5,111,0,0,377,378,5,110,0,0,378,32,1,0,0,0,379,380,5,101,
  	0,0,380,381,5,110,0,0,381,382,5,100,0,0,382,383,5,102,0,0,383,384,5,117,
  	0,0,384,385,5,110,0,0,385,386,5,99,0,0,386,387,5,116,0,0,387,388,5,105,
  	0,0,388,389,5,111,0,0,389,390,5,110,0,0,390,34,1,0,0,0,391,392,5,101,
  	0,0,392,393,5,120,0,0,393,394,5,112,0,0,394,395,5,111,0,0,395,396,5,114,
  	0,0,396,397,5,116,0,0,397,398,5,101,0,0,398,399,5,100,0,0,399,36,1,0,
  	0,0,400,401,5,117,0,0,401,402,5,115,0,0,402,403,5,101,0,0,403,38,1,0,
  	0,0,404,405,5,105,0,0,405,406,5,110,0,0,406,407,5,99,0,0,407,408,5,108,
  	0,0,408,409,5,117,0,0,409,410,5,100,0,0,410,411,5,101,0,0,411,40,1,0,
  	0,0,412,413,5,98,0,0,413,414,5,114,0,0,414,415,5,101,0,0,415,416,5,97,
  	0,0,416,417,5,107,0,0,417,42,1,0,0,0,418,419,5,99,0,0,419,420,5,111,0,
  	0,420,421,5,110,0,0,421,422,5,116,0,0,422,423,5,105,0,0,423,424,5,110,
  	0,0,424,425,5,117,0,0,425,426,5,101,0,0,426,44,1,0,0,0,427,428,5,102,
  	0,0,428,429,5,111,0,0,429,430,5,114,0,0,430,46,1,0,0,0,431,432,5,101,
  	0,0,432,433,5,110,0,0,433,434,5,100,0,0,434,435,5,102,0,0,435,436,5,111,
  	0,0,436,437,5,114,0,0,437,48,1,0,0,0,438,439,5,116,0,0,439,440,5,111,
  	0,0,440,50,1,0,0,0,441,442,5,102,0,0,442,443,5,111,0,0,443,444,5,114,
  	0,0,444,445,5,101,0,0,445,446,5,97,0,0,446,447,5,99,0,0,447,448,5,104,
  	0,0,448,52,1,0,0,0,449,450,5,101,0,0,450,451,5,110,0,0,451,452,5,100,
  	0,0,452,453,5,102,0,0,453,454,5,111,0,0,454,455,5,114,0,0,455,456,5,101,
  	0,0,456,457,5,97,0,0,457,458,5,99,0,0,458,459,5,104,0,0,459,54,1,0,0,
  	0,460,461,5,114,0,0,461,462,5,101,0,0,462,463,5,112,0,0,463,464,5,101,
  	0,0,464,465,5,97,0,0,465,466,5,116,0,0,466,56,1,0,0,0,467,468,5,117,0,
  	0,468,469,5,110,0,0,469,470,5,116,0,0,470,471,5,105,0,0,471,472,5,108,
  	0,0,472,58,1,0,0,0,473,474,5,112,0,0,474,475,5,114,0,0,475,476,5,111,
  	0,0,476,477,5,103,0,0,477,478,5,114,0,0,478,479,5,97,0,0,479,480,5,109,
  	0,0,480,60,1,0,0,0,481,482,5,101,0,0,482,483,5,110,0,0,483,484,5,100,
  	0,0,484,485,5,112,0,0,485,486,5,114,0,0,486,487,5,111,0,0,487,488,5,103,
  	0,0,488,489,5,114,0,0,489,490,5,97,0,0,490,491,5,109,0,0,491,62,1,0,0,
  	0,492,493,5,99,0,0,493,494,5,97,0,0,494,495,5,115,0,0,495,496,5,101,0,
  	0,496,64,1,0,0,0,497,498,5,100,0,0,498,499,5,101,0,0,499,500,5,102,0,
  	0,500,501,5,97,0,0,501,502,5,117,0,0,502,503,5,108,0,0,503,504,5,116,
  	0,0,504,66,1,0,0,0,505,506,5,101,0,0,506,507,5,110,0,0,507,508,5,100,
  	0,0,508,509,5,99,0,0,509,510,5,97,0,0,510,511,5,115,0,0,511,512,5,101,
  	0,0,512,68,1,0,0,0,513,514,5,101,0,0,514,515,5,110,0,0,515,516,5,117,
  	0,0,516,517,5,109,0,0,517,70,1,0,0,0,518,519,5,101,0,0,519,520,5,110,
  	0,0,520,521,5,100,0,0,521,522,5,101,0,0,522,523,5,110,0,0,523,524,5,117,
  	0,0,524,525,5,109,0,0,525,72,1,0,0,0,526,527,5,100,0,0,527,528,5,111,
  	0,0,528,529,5,119,0,0,529,530,5,110,0,0,530,531,5,116,0,0,531,532,5,111,
  	0,0,532,74,1,0,0,0,533,534,5,115,0,0,534,535,5,116,0,0,535,536,5,101,
  	0,0,536,537,5,112,0,0,537,76,1,0,0,0,538,539,5,114,0,0,539,540,5,101,
  	0,0,540,541,5,102,0,0,541,542,5,101,0,0,542,543,5,114,0,0,543,544,5,101,
  	0,0,544,545,5,110,0,0,545,546,5,99,0,0,546,547,5,101,0,0,547,78,1,0,0,
  	0,548,549,5,111,0,0,549,550,5,117,0,0,550,551,5,116,0,0,551,80,1,0,0,
  	0,552,553,5,105,0,0,553,554,5,110,0,0,554,555,5,111,0,0,555,556,5,117,
  	0,0,556,557,5,116,0,0,557,82,1,0,0,0,558,559,5,66,0,0,559,560,5,121,0,
  	0,560,561,5,86,0,0,561,562,5,97,0,0,562,563,5,108,0,0,563,84,1,0,0,0,
  	564,565,5,115,0,0,565,566,5,116,0,0,566,567,5,114,0,0,567,568,5,105,0,
  	0,568,569,5,110,0,0,569,570,5,103,0,0,570,86,1,0,0,0,571,572,5,108,0,
  	0,572,573,5,111,0,0,573,574,5,110,0,0,574,575,5,103,0,0,575,88,1,0,0,
  	0,576,577,5,105,0,0,577,578,5,110,0,0,578,579,5,116,0,0,579,580,5,101,
  	0,0,580,581,5,103,0,0,581,582,5,101,0,0,582,583,5,114,0,0,583,90,1,0,
  	0,0,584,585,5,117,0,0,585,586,5,110,0,0,586,587,5,115,0,0,587,588,5,105,
  	0,0,588,589,5,103,0,0,589,590,5,110,0,0,590,591,5,101,0,0,591,592,5,100,
  	0,0,592,92,1,0,0,0,593,594,5,115,0,0,594,595,5,105,0,0,595,596,5,103,
  	0,0,596,597,5,110,0,0,597,598,5,101,0,0,598,599,5,100,0,0,599,94,1,0,
  	0,0,600,601,5,114,0,0,601,602,5,101,0,0,602,603,5,97,0,0,603,604,5,108,
  	0,0,604,96,1,0,0,0,605,606,5,102,0,0,606,607,5,108,0,0,607,608,5,111,
  	0,0,608,609,5,97,0,0,609,610,5,116,0,0,610,98,1,0,0,0,611,612,5,100,0,
  	0,612,613,5,111,0,0,613,614,5,117,0,0,614,615,5,98,0,0,615,616,5,108,
  	0,0,616,617,5,101,0,0,617,100,1,0,0,0,618,619,5,97,0,0,619,620,5,115,
  	0,0,620,102,1,0,0,0,621,622,5,105,0,0,622,623,5,115,0,0,623,104,1,0,0,
  	0,624,625,5,38,0,0,625,626,5,38,0,0,626,106,1,0,0,0,627,628,5,97,0,0,
  	628,629,5,110,0,0,629,630,5,100,0,0,630,108,1,0,0,0,631,632,5,38,0,0,
  	632,637,5,38,0,0,633,634,5,97,0,0,634,635,5,110,0,0,635,637,5,100,0,0,
  	636,631,1,0,0,0,636,633,1,0,0,0,637,110,1,0,0,0,638,639,5,124,0,0,639,
  	640,5,124,0,0,640,112,1,0,0,0,641,642,5,111,0,0,642,643,5,114,0,0,643,
  	114,1,0,0,0,644,645,5,124,0,0,645,649,5,124,0,0,646,647,5,111,0,0,647,
  	649,5,114,0,0,648,644,1,0,0,0,648,646,1,0,0,0,649,116,1,0,0,0,650,651,
  	5,33,0,0,651,118,1,0,0,0,652,653,5,110,0,0,653,654,5,111,0,0,654,655,
  	5,116,0,0,655,120,1,0,0,0,656,661,5,33,0,0,657,658,5,110,0,0,658,659,
  	5,111,0,0,659,661,5,116,0,0,660,656,1,0,0,0,660,657,1,0,0,0,661,122,1,
  	0,0,0,662,663,5,98,0,0,663,664,5,121,0,0,664,665,5,114,0,0,665,666,5,
  	101,0,0,666,667,5,102,0,0,667,124,1,0,0,0,668,669,5,117,0,0,669,670,5,
  	110,0,0,670,671,5,117,0,0,671,672,5,115,0,0,672,673,5,101,0,0,673,674,
  	5,100,0,0,674,126,1,0,0,0,675,676,5,101,0,0,676,677,5,114,0,0,677,678,
  	5,114,0,0,678,679,5,111,0,0,679,680,5,114,0,0,680,128,1,0,0,0,681,682,
  	5,104,0,0,682,683,5,97,0,0,683,684,5,115,0,0,684,685,5,104,0,0,685,130,
  	1,0,0,0,686,687,5,100,0,0,687,688,5,105,0,0,688,689,5,99,0,0,689,690,
  	5,116,0,0,690,691,5,105,0,0,691,692,5,111,0,0,692,693,5,110,0,0,693,694,
  	5,97,0,0,694,695,5,114,0,0,695,696,5,121,0,0,696,132,1,0,0,0,697,698,
  	5,115,0,0,698,699,5,116,0,0,699,700,5,114,0,0,700,701,5,117,0,0,701,702,
  	5,99,0,0,702,703,5,116,0,0,703,134,1,0,0,0,704,705,5,97,0,0,705,706,5,
  	114,0,0,706,707,5,114,0,0,707,708,5,97,0,0,708,709,5,121,0,0,709,136,
  	1,0,0,0,710,711,5,115,0,0,711,712,5,116,0,0,712,713,5,97,0,0,713,714,
  	5,99,0,0,714,715,5,107,0,0,715,138,1,0,0,0,716,717,5,105,0,0,717,718,
  	5,110,0,0,718,140,1,0,0,0,719,720,5,117,0,0,720,721,5,110,0,0,721,722,
  	5,105,0,0,722,723,5,110,0,0,723,724,5,105,0,0,724,725,5,116,0,0,725,142,
  	1,0,0,0,726,732,5,48,0,0,727,729,7,0,0,0,728,730,3,267,132,0,729,728,
  	1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,726,1,0,0,0,731,727,1,0,0,
  	0,732,144,1,0,0,0,733,734,5,48,0,0,734,735,7,1,0,0,735,736,3,263,130,
  	0,736,146,1,0,0,0,737,739,5,48,0,0,738,740,7,2,0,0,739,738,1,0,0,0,740,
  	741,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,148,1,0,0,0,743,744,5,
  	48,0,0,744,746,7,3,0,0,745,747,7,4,0,0,746,745,1,0,0,0,747,748,1,0,0,
  	0,748,746,1,0,0,0,748,749,1,0,0,0,749,150,1,0,0,0,750,751,3,267,132,0,
  	751,753,5,46,0,0,752,754,3,267,132,0,753,752,1,0,0,0,753,754,1,0,0,0,
  	754,758,1,0,0,0,755,756,5,46,0,0,756,758,3,267,132,0,757,750,1,0,0,0,
  	757,755,1,0,0,0,758,760,1,0,0,0,759,761,3,259,128,0,760,759,1,0,0,0,760,
  	761,1,0,0,0,761,766,1,0,0,0,762,763,3,267,132,0,763,764,3,259,128,0,764,
  	766,1,0,0,0,765,757,1,0,0,0,765,762,1,0,0,0,766,152,1,0,0,0,767,768,5,
  	48,0,0,768,778,7,1,0,0,769,771,3,263,130,0,770,772,5,46,0,0,771,770,1,
  	0,0,0,771,772,1,0,0,0,772,779,1,0,0,0,773,775,3,263,130,0,774,773,1,0,
  	0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,46,0,0,777,779,3,263,130,
  	0,778,769,1,0,0,0,778,774,1,0,0,0,779,780,1,0,0,0,780,782,7,5,0,0,781,
  	783,7,6,0,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,3,
  	267,132,0,785,154,1,0,0,0,786,791,5,34,0,0,787,790,8,7,0,0,788,790,3,
  	261,129,0,789,787,1,0,0,0,789,788,1,0,0,0,790,793,1,0,0,0,791,789,1,0,
  	0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,791,1,0,0,0,794,795,5,34,0,0,
  	795,156,1,0,0,0,796,797,5,36,0,0,797,798,5,34,0,0,798,799,1,0,0,0,799,
  	800,6,77,0,0,800,801,1,0,0,0,801,802,6,77,1,0,802,158,1,0,0,0,803,804,
  	5,40,0,0,804,160,1,0,0,0,805,806,5,41,0,0,806,162,1,0,0,0,807,808,5,91,
  	0,0,808,164,1,0,0,0,809,810,5,93,0,0,810,166,1,0,0,0,811,812,5,123,0,
  	0,812,813,6,82,2,0,813,168,1,0,0,0,814,815,5,125,0,0,815,816,6,83,3,0,
  	816,170,1,0,0,0,817,818,5,46,0,0,818,172,1,0,0,0,819,820,5,45,0,0,820,
  	821,5,62,0,0,821,174,1,0,0,0,822,823,5,42,0,0,823,176,1,0,0,0,824,825,
  	5,47,0,0,825,178,1,0,0,0,826,827,5,37,0,0,827,180,1,0,0,0,828,829,5,43,
  	0,0,829,182,1,0,0,0,830,831,5,45,0,0,831,184,1,0,0,0,832,833,5,43,0,0,
  	833,834,5,61,0,0,834,186,1,0,0,0,835,836,5,45,0,0,836,837,5,61,0,0,837,
  	188,1,0,0,0,838,839,5,42,0,0,839,840,5,61,0,0,840,190,1,0,0,0,841,842,
  	5,47,0,0,842,843,5,61,0,0,843,192,1,0,0,0,844,845,5,37,0,0,845,846,5,
  	61,0,0,846,194,1,0,0,0,847,848,5,60,0,0,848,849,5,61,0,0,849,196,1,0,
  	0,0,850,851,5,60,0,0,851,198,1,0,0,0,852,853,5,62,0,0,853,854,5,61,0,
  	0,854,200,1,0,0,0,855,856,5,62,0,0,856,202,1,0,0,0,857,858,5,62,0,0,858,
  	859,5,62,0,0,859,204,1,0,0,0,860,861,5,60,0,0,861,862,5,60,0,0,862,206,
  	1,0,0,0,863,864,5,38,0,0,864,208,1,0,0,0,865,866,5,94,0,0,866,210,1,0,
  	0,0,867,868,5,124,0,0,868,212,1,0,0,0,869,870,5,60,0,0,870,871,5,62,0,
  	0,871,214,1,0,0,0,872,873,5,33,0,0,873,874,5,61,0,0,874,216,1,0,0,0,875,
  	876,5,60,0,0,876,880,5,62,0,0,877,878,5,33,0,0,878,880,5,61,0,0,879,875,
  	1,0,0,0,879,877,1,0,0,0,880,218,1,0,0,0,881,882,5,61,0,0,882,220,1,0,
  	0,0,883,884,5,61,0,0,884,885,5,61,0,0,885,222,1,0,0,0,886,887,5,58,0,
  	0,887,888,5,61,0,0,888,224,1,0,0,0,889,890,5,46,0,0,890,891,5,43,0,0,
  	891,226,1,0,0,0,892,893,5,46,0,0,893,894,5,45,0,0,894,228,1,0,0,0,895,
  	896,5,46,0,0,896,897,5,63,0,0,897,230,1,0,0,0,898,899,5,59,0,0,899,232,
  	1,0,0,0,900,901,5,44,0,0,901,234,1,0,0,0,902,903,5,126,0,0,903,236,1,
  	0,0,0,904,905,5,64,0,0,905,238,1,0,0,0,906,907,5,58,0,0,907,908,5,58,
  	0,0,908,240,1,0,0,0,909,910,5,58,0,0,910,911,6,119,4,0,911,242,1,0,0,
  	0,912,913,5,43,0,0,913,914,5,43,0,0,914,244,1,0,0,0,915,916,5,45,0,0,
  	916,917,5,45,0,0,917,246,1,0,0,0,918,919,5,63,0,0,919,920,5,58,0,0,920,
  	248,1,0,0,0,921,922,5,63,0,0,922,250,1,0,0,0,923,925,7,8,0,0,924,923,
  	1,0,0,0,925,926,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,
  	0,928,929,6,124,5,0,929,252,1,0,0,0,930,931,5,47,0,0,931,932,5,42,0,0,
  	932,936,1,0,0,0,933,935,9,0,0,0,934,933,1,0,0,0,935,938,1,0,0,0,936,937,
  	1,0,0,0,936,934,1,0,0,0,937,939,1,0,0,0,938,936,1,0,0,0,939,940,5,42,
  	0,0,940,941,5,47,0,0,941,942,1,0,0,0,942,943,6,125,6,0,943,254,1,0,0,
  	0,944,945,5,47,0,0,945,946,5,47,0,0,946,950,1,0,0,0,947,949,8,9,0,0,948,
  	947,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,
  	0,0,0,952,950,1,0,0,0,953,954,6,126,6,0,954,256,1,0,0,0,955,959,3,271,
  	134,0,956,958,3,269,133,0,957,956,1,0,0,0,958,961,1,0,0,0,959,957,1,0,
  	0,0,959,960,1,0,0,0,960,258,1,0,0,0,961,959,1,0,0,0,962,964,7,10,0,0,
  	963,965,7,6,0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,967,
  	3,267,132,0,967,260,1,0,0,0,968,969,5,92,0,0,969,970,7,1,0,0,970,971,
  	3,265,131,0,971,972,3,265,131,0,972,976,1,0,0,0,973,974,5,92,0,0,974,
  	976,9,0,0,0,975,968,1,0,0,0,975,973,1,0,0,0,976,262,1,0,0,0,977,981,3,
  	265,131,0,978,980,3,265,131,0,979,978,1,0,0,0,980,983,1,0,0,0,981,979,
  	1,0,0,0,981,982,1,0,0,0,982,264,1,0,0,0,983,981,1,0,0,0,984,985,7,11,
  	0,0,985,266,1,0,0,0,986,990,7,12,0,0,987,989,7,12,0,0,988,987,1,0,0,0,
  	989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,268,1,0,0,0,992,990,
  	1,0,0,0,993,996,3,271,134,0,994,996,7,12,0,0,995,993,1,0,0,0,995,994,
  	1,0,0,0,996,270,1,0,0,0,997,1002,7,13,0,0,998,1002,8,14,0,0,999,1000,
  	7,15,0,0,1000,1002,7,16,0,0,1001,997,1,0,0,0,1001,998,1,0,0,0,1001,999,
  	1,0,0,0,1002,272,1,0,0,0,1003,1004,5,123,0,0,1004,1005,5,123,0,0,1005,
  	274,1,0,0,0,1006,1007,5,123,0,0,1007,1008,6,136,7,0,1008,1009,1,0,0,0,
  	1009,1010,6,136,8,0,1010,276,1,0,0,0,1011,1012,3,261,129,0,1012,278,1,
  	0,0,0,1013,1014,5,34,0,0,1014,1015,6,138,9,0,1015,1016,1,0,0,0,1016,1017,
  	6,138,10,0,1017,280,1,0,0,0,1018,1019,5,125,0,0,1019,1020,5,125,0,0,1020,
  	282,1,0,0,0,1021,1023,8,17,0,0,1022,1021,1,0,0,0,1023,1024,1,0,0,0,1024,
  	1022,1,0,0,0,1024,1025,1,0,0,0,1025,284,1,0,0,0,1026,1027,5,125,0,0,1027,
  	1028,5,125,0,0,1028,1029,1,0,0,0,1029,1030,6,141,11,0,1030,286,1,0,0,
  	0,1031,1032,5,125,0,0,1032,1033,6,142,12,0,1033,1034,1,0,0,0,1034,1035,
  	6,142,13,0,1035,1036,6,142,10,0,1036,288,1,0,0,0,1037,1039,8,18,0,0,1038,
  	1037,1,0,0,0,1039,1040,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,
  	290,1,0,0,0,33,0,1,2,636,648,660,729,731,741,748,753,757,760,765,771,
  	774,778,782,789,791,879,926,936,950,959,964,975,981,990,995,1001,1024,
  	1040,14,1,77,0,5,1,0,1,82,1,1,83,2,1,119,3,0,1,0,0,2,0,1,136,4,5,0,0,
  	1,138,5,4,0,0,7,132,0,1,142,6,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  escriptlexerLexerStaticData = staticData.release();
}

}

EscriptLexer::EscriptLexer(CharStream *input) : Lexer(input) {
  EscriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *escriptlexerLexerStaticData->atn, escriptlexerLexerStaticData->decisionToDFA, escriptlexerLexerStaticData->sharedContextCache);
}

EscriptLexer::~EscriptLexer() {
  delete _interpreter;
}

std::string EscriptLexer::getGrammarFileName() const {
  return "EscriptLexer.g4";
}

const std::vector<std::string>& EscriptLexer::getRuleNames() const {
  return escriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EscriptLexer::getChannelNames() const {
  return escriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EscriptLexer::getModeNames() const {
  return escriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EscriptLexer::getVocabulary() const {
  return escriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EscriptLexer::getSerializedATN() const {
  return escriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& EscriptLexer::getATN() const {
  return *escriptlexerLexerStaticData->atn;
}


void EscriptLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 77: INTERPOLATED_STRING_STARTAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 82: LBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 83: RBRACEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 119: COLONAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 136: LBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 138: DOUBLE_QUOTE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 142: CLOSE_RBRACE_INSIDEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void EscriptLexer::INTERPOLATED_STRING_STARTAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  interpolatedStringLevel++;  break;

  default:
    break;
  }
}

void EscriptLexer::LBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel + 1 );
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::RBRACEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2: 
        if ( interpolatedStringLevel > 0 )
          {
            auto currentLevel = curlyLevels.top();
            curlyLevels.pop();
            curlyLevels.push( currentLevel - 1 );
            if ( curlyLevels.top() == 0 )
            {
              curlyLevels.pop();
              skip();
              popMode();
            }
          }
     break;

  default:
    break;
  }
}

void EscriptLexer::COLONAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3: 
            if (interpolatedStringLevel > 0)
            {
                int ind = 1;
                bool switchToFormatString = true;

                while (_input->LA(ind) != '}')
                {
                    if (_input->LA(ind) == ':' || _input->LA(ind) == ')')
                    {
                        switchToFormatString = false;
                        break;
                    }
                    ind++;
                }
                if (switchToFormatString)
                {
                    setMode( INTERPOLATION_FORMAT );
                }
            }
     break;

  default:
    break;
  }
}

void EscriptLexer::LBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  curlyLevels.push(1);  break;

  default:
    break;
  }
}

void EscriptLexer::DOUBLE_QUOTE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  interpolatedStringLevel--;  break;

  default:
    break;
  }
}

void EscriptLexer::CLOSE_RBRACE_INSIDEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 6:  curlyLevels.pop();  break;

  default:
    break;
  }
}



void EscriptLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  escriptlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(escriptlexerLexerOnceFlag, escriptlexerLexerInitialize);
#endif
}
