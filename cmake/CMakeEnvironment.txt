###############################################################################
#
# Copyright (C) 2015 Thomas Volkert <thomas@homer-conferencing.com>
# All rights reserved.
# 
# The environment was provided for the POL project. Redistribution 
# and use in source and binary forms, with or without modification, 
# are permitted. However, this paragraph has to be included in its 
# original form in every project.
#
###############################################################################

MESSAGE("####################################")
MESSAGE("##### Preparing configuration")
MESSAGE("####################################")

##############################################################
# every version information in the rest of the build system is generated from the following entries
INCLUDE (${CMAKE_CURRENT_LIST_DIR}/Version.txt)
set(BINARY_VERSION "${BINARY_VERSION_MAJOR}.${BINARY_VERSION_MINOR}.${BINARY_VERSION_PATCH}")

##############################################################
# architecture
IF (NOT DEFINED FORCE_ARCH_BITS)
    IF ("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
        set(ARCH_BITS "64")
        MESSAGE("Detected architecture is 64 bit")
    ELSEIF ("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
        set(ARCH_BITS "32")
        MESSAGE("Detected architecture is 32 bit")
    ELSE()
        MESSAGE("Unable to detect architecture of your system")
    ENDIF()
ELSE()
    set(ARCH_BITS 
        ${FORCE_ARCH_BITS}
    )
    MESSAGE("Architecture was explicitly defined as ${FORCE_ARCH_BITS} bit")
ENDIF (NOT DEFINED FORCE_ARCH_BITS)

##############################################################
# detect processor type
MESSAGE("Detected processor type is ${CMAKE_SYSTEM_PROCESSOR}")

##############################################################
# detect compiler
IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	MESSAGE("Detected compiler type is Clang " ${CMAKE_CXX_COMPILER_VERSION})
    SET (CLANG "true")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	MESSAGE("Detected compiler type is GNU GCC " ${CMAKE_CXX_COMPILER_VERSION})
    SET (GCC "true")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
	MESSAGE("Detected compiler type is Intel C++ " ${CMAKE_CXX_COMPILER_VERSION})
    SET (INTELCPP "true")
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
	MESSAGE("Detected compiler type is Visual Studio C++ " ${CMAKE_CXX_COMPILER_VERSION})
    SET (VSCPP "true")
ENDIF()

##############################################################
# detect FreeBSD
IF (${CMAKE_SYSTEM} MATCHES "FreeBSD.*")
    SET (BSD "true")
    
    # clear LINUX variable, otherwise the source gets confused because cmake detects FreeBSD also as LINUX environment
    SET (LINUX)
    MESSAGE("Target system is FreeBSD")
ELSE()
    MESSAGE("Target system is ${CMAKE_SYSTEM}") 
ENDIF()

##############################################################
# detect Linux
IF (UNIX AND NOT WIN32 AND NOT APPLE AND NOT BSD)
    MESSAGE("Target system is Linux")
    SET (LINUX "true")
ENDIF()

##############################################################
# detect OS X
if (APPLE)
    exec_program(uname ARGS -v OUTPUT_VARIABLE DARWIN_VERSION)
    string(REGEX MATCH "[0-9]+" DARWIN_VERSION ${DARWIN_VERSION})
    if (DARWIN_VERSION LESS 10)
        # 10.6 of Snow Leopard is minimum
        MESSAGE(FATAL_ERROR "You need at least OS X Snow Leopard")
    endif()
    if (DARWIN_VERSION EQUAL 10)
        MESSAGE("Target system is DARWIN version 10 from OS X Snow Leopard")
    elseif (DARWIN_VERSION EQUAL 11)
        MESSAGE("Target system is DARWIN version 11 from OS X Lion")
    else()
        message("Target system is DARWIN version ${DARWIN_VERSION}")
    endif()
endif(APPLE)

##############################################################
# detect Windows
IF (WIN32)
    SET (WINDOWS "true")
    IF ("${ARCH_BITS}" EQUAL "64")
        MESSAGE("Target system is Windows64")
        SET(WIN64 "true")
        # undefine WIN32
        SET(WIN32)
    ELSE()
        MESSAGE("Target system is Windows32")
        SET(WIN32 "true")
    ENDIF()
ENDIF()

##############################################################
SET (PRE_DEFINITIONS_EXECUTED "true")

INCLUDE (${CMAKE_CURRENT_LIST_DIR}/POL.txt)