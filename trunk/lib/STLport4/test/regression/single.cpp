// STLport regression testsuite component.
// To compile as a separate example, please #define MAIN.
#include "stl_test.h"
#include "accum1.cpp"
#include "accum2.cpp"
#include "adjdiff0.cpp"
#include "adjdiff1.cpp"
#include "adjdiff2.cpp"
#include "adjfind0.cpp"
#include "adjfind1.cpp"
#include "adjfind2.cpp"
#include "advance.cpp"
#include "alg1.cpp"
#include "alg2.cpp"
#include "alg3.cpp"
#include "alg4.cpp"
#include "alg5.cpp"
#include "bcompos1.cpp"
#include "bcompos2.cpp"
#include "bind1st1.cpp"
#include "bind1st2.cpp"
#include "bind2nd1.cpp"
#include "bind2nd2.cpp"
#include "binsert1.cpp"
#include "binsert2.cpp"
#include "binsrch1.cpp"
#include "binsrch2.cpp"
#include "bnegate1.cpp"
#include "bnegate2.cpp"
#include "bvec1.cpp"
#include "copy1.cpp"
#include "copy2.cpp"
#include "copy3.cpp"
#include "copy4.cpp"
#include "copyb.cpp"
#include "copyb0.cpp"
#include "count0.cpp"
#include "count1.cpp"
#include "countif1.cpp"
#include "deque1.cpp"
#include "divides.cpp"
#include "eqlrnge0.cpp"
#include "eqlrnge1.cpp"
#include "eqlrnge2.cpp"
#include "equal0.cpp"
#include "equal1.cpp"
#include "equal2.cpp"
#include "equalto.cpp"
#include "error1.cpp"
#include "fill1.cpp"
#include "filln1.cpp"
#include "find0.cpp"
#include "find1.cpp"
#include "findif0.cpp"
#include "findif1.cpp"
#include "finsert1.cpp"
#include "finsert2.cpp"
#include "foreach0.cpp"
#include "foreach1.cpp"
#include "func1.cpp"
#include "func2.cpp"
#include "func3.cpp"
#include "gener1.cpp"
#include "gener2.cpp"
#include "genern1.cpp"
#include "genern2.cpp"
#include "greateq.cpp"
#include "greater.cpp"
#include "incl0.cpp"
#include "incl1.cpp"
#include "incl2.cpp"
#include "inplmrg1.cpp"
#include "inplmrg2.cpp"
#include "inrprod0.cpp"
#include "inrprod1.cpp"
#include "inrprod2.cpp"
#include "insert1.cpp"
#include "insert2.cpp"
#include "iota1.cpp"
#include "istmit1.cpp"
#include "iter1.cpp"
#include "iter2.cpp"
#include "iter3.cpp"
#include "iter4.cpp"
#include "iterswp0.cpp"
#include "iterswp1.cpp"
#include "less.cpp"
#include "lesseq.cpp"
#include "lexcmp1.cpp"
#include "lexcmp2.cpp"
#include "list1.cpp"
#include "list2.cpp"
#include "list3.cpp"
#include "list4.cpp"
#include "logicand.cpp"
#include "logicnot.cpp"
#include "logicor.cpp"
#include "lwrbnd1.cpp"
#include "lwrbnd2.cpp"
#include "map1.cpp"
#include "max1.cpp"
#include "max2.cpp"
#include "maxelem1.cpp"
#include "maxelem2.cpp"
#include "merge0.cpp"
#include "merge1.cpp"
#include "merge2.cpp"
#include "min1.cpp"
#include "min2.cpp"
#include "minelem1.cpp"
#include "minelem2.cpp"
#include "minus.cpp"
#include "mismtch0.cpp"
#include "mismtch1.cpp"
#include "mismtch2.cpp"
#include "mkheap0.cpp"
#include "mkheap1.cpp"
#include "mmap1.cpp"
#include "mmap2.cpp"
#include "modulus.cpp"
#include "mset1.cpp"
#include "mset3.cpp"
#include "mset4.cpp"
#include "mset5.cpp"
#include "negate.cpp"
#include "nequal.cpp"
#include "nextprm0.cpp"
#include "nextprm1.cpp"
#include "nextprm2.cpp"
#include "nthelem0.cpp"
#include "nthelem1.cpp"
#include "nthelem2.cpp"
#include "ostmit.cpp"
#include "pair0.cpp"
#include "pair1.cpp"
#include "pair2.cpp"
#include "parsrt0.cpp"
#include "parsrt1.cpp"
#include "parsrt2.cpp"
#include "parsrtc0.cpp"
#include "parsrtc1.cpp"
#include "parsrtc2.cpp"
#include "partsrt0.cpp"
#include "partsum0.cpp"
#include "partsum1.cpp"
#include "partsum2.cpp"
#include "pheap1.cpp"
#include "pheap2.cpp"
#include "plus.cpp"
#include "pqueue1.cpp"
#include "prevprm0.cpp"
#include "prevprm1.cpp"
#include "prevprm2.cpp"
#include "ptition0.cpp"
#include "ptition1.cpp"
#include "ptrbinf1.cpp"
#include "ptrbinf2.cpp"
#include "ptrunf1.cpp"
#include "ptrunf2.cpp"
#include "queue1.cpp"
#include "rawiter.cpp"
#include "remcopy1.cpp"
#include "remcpif1.cpp"
#include "remif1.cpp"
#include "remove1.cpp"
#include "repcpif1.cpp"
#include "replace0.cpp"
#include "replace1.cpp"
#include "replcpy1.cpp"
#include "replif1.cpp"
#include "revbit1.cpp"
#include "revbit2.cpp"
#include "revcopy1.cpp"
#include "reverse1.cpp"
#include "reviter1.cpp"
#include "reviter2.cpp"
#include "rndshuf0.cpp"
#include "rndshuf1.cpp"
#include "rndshuf2.cpp"
#include "rotate0.cpp"
#include "rotate1.cpp"
#include "rotcopy0.cpp"
#include "rotcopy1.cpp"
#include "search0.cpp"
#include "search1.cpp"
#include "search2.cpp"
#include "set1.cpp"
#include "set2.cpp"
#include "setdiff0.cpp"
#include "setdiff1.cpp"
#include "setdiff2.cpp"
#include "setintr0.cpp"
#include "setintr1.cpp"
#include "setintr2.cpp"
#include "setsymd0.cpp"
#include "setsymd1.cpp"
#include "setsymd2.cpp"
#include "setunon0.cpp"
#include "setunon1.cpp"
#include "setunon2.cpp"
#include "single.cpp"
#include "sort1.cpp"
#include "sort2.cpp"
#include "stack1.cpp"
#include "stack2.cpp"
#include "stat.cpp"
#include "stblptn0.cpp"
#include "stblptn1.cpp"
#include "stblsrt1.cpp"
#include "stblsrt2.cpp"
#include "swap1.cpp"
#include "swprnge1.cpp"
#include "times.cpp"
#include "trnsfrm1.cpp"
#include "trnsfrm2.cpp"
#include "ucompos1.cpp"
#include "ucompos2.cpp"
#include "unegate1.cpp"
#include "unegate2.cpp"
#include "uniqcpy1.cpp"
#include "uniqcpy2.cpp"
#include "unique1.cpp"
#include "unique2.cpp"
#include "uprbnd1.cpp"
#include "uprbnd2.cpp"
#include "vec1.cpp"
#include "vec2.cpp"
#include "vec3.cpp"
#include "vec4.cpp"
#include "vec5.cpp"
#include "vec6.cpp"
#include "vec7.cpp"
#include "vec8.cpp"
#include "stl_test.h"
#ifdef MAIN 
#define single_test main
#endif

#if !defined (STLPORT) || defined(__STL_USE_NAMESPACES)
using namespace std;
#endif
int single_test(int, char**)
{
  cout<<"Results of single_test:"<<endl;
int main(int argc, char** argv) {
accum1_test(argc, argv);
accum2_test(argc, argv);
adjdiff0_test(argc, argv);
adjdiff1_test(argc, argv);
adjdiff2_test(argc, argv);
adjfind0_test(argc, argv);
adjfind1_test(argc, argv);
adjfind2_test(argc, argv);
advance_test(argc, argv);
alg1_test(argc, argv);
alg2_test(argc, argv);
alg3_test(argc, argv);
alg4_test(argc, argv);
alg5_test(argc, argv);
bcompos1_test(argc, argv);
bcompos2_test(argc, argv);
bind1st1_test(argc, argv);
bind1st2_test(argc, argv);
bind2nd1_test(argc, argv);
bind2nd2_test(argc, argv);
binsert1_test(argc, argv);
binsert2_test(argc, argv);
binsrch1_test(argc, argv);
binsrch2_test(argc, argv);
bnegate1_test(argc, argv);
bnegate2_test(argc, argv);
bvec1_test(argc, argv);
copy1_test(argc, argv);
copy2_test(argc, argv);
copy3_test(argc, argv);
copy4_test(argc, argv);
copyb_test(argc, argv);
copyb0_test(argc, argv);
count0_test(argc, argv);
count1_test(argc, argv);
countif1_test(argc, argv);
deque1_test(argc, argv);
divides_test(argc, argv);
eqlrnge0_test(argc, argv);
eqlrnge1_test(argc, argv);
eqlrnge2_test(argc, argv);
equal0_test(argc, argv);
equal1_test(argc, argv);
equal2_test(argc, argv);
equalto_test(argc, argv);
error1_test(argc, argv);
fill1_test(argc, argv);
filln1_test(argc, argv);
find0_test(argc, argv);
find1_test(argc, argv);
findif0_test(argc, argv);
findif1_test(argc, argv);
finsert1_test(argc, argv);
finsert2_test(argc, argv);
foreach0_test(argc, argv);
foreach1_test(argc, argv);
func1_test(argc, argv);
func2_test(argc, argv);
func3_test(argc, argv);
gener1_test(argc, argv);
gener2_test(argc, argv);
genern1_test(argc, argv);
genern2_test(argc, argv);
greateq_test(argc, argv);
greater_test(argc, argv);
incl0_test(argc, argv);
incl1_test(argc, argv);
incl2_test(argc, argv);
inplmrg1_test(argc, argv);
inplmrg2_test(argc, argv);
inrprod0_test(argc, argv);
inrprod1_test(argc, argv);
inrprod2_test(argc, argv);
insert1_test(argc, argv);
insert2_test(argc, argv);
iota1_test(argc, argv);
istmit1_test(argc, argv);
iter1_test(argc, argv);
iter2_test(argc, argv);
iter3_test(argc, argv);
iter4_test(argc, argv);
iterswp0_test(argc, argv);
iterswp1_test(argc, argv);
less_test(argc, argv);
lesseq_test(argc, argv);
lexcmp1_test(argc, argv);
lexcmp2_test(argc, argv);
list1_test(argc, argv);
list2_test(argc, argv);
list3_test(argc, argv);
list4_test(argc, argv);
logicand_test(argc, argv);
logicnot_test(argc, argv);
logicor_test(argc, argv);
lwrbnd1_test(argc, argv);
lwrbnd2_test(argc, argv);
map1_test(argc, argv);
max1_test(argc, argv);
max2_test(argc, argv);
maxelem1_test(argc, argv);
maxelem2_test(argc, argv);
merge0_test(argc, argv);
merge1_test(argc, argv);
merge2_test(argc, argv);
min1_test(argc, argv);
min2_test(argc, argv);
minelem1_test(argc, argv);
minelem2_test(argc, argv);
minus_test(argc, argv);
mismtch0_test(argc, argv);
mismtch1_test(argc, argv);
mismtch2_test(argc, argv);
mkheap0_test(argc, argv);
mkheap1_test(argc, argv);
mmap1_test(argc, argv);
mmap2_test(argc, argv);
modulus_test(argc, argv);
mset1_test(argc, argv);
mset3_test(argc, argv);
mset4_test(argc, argv);
mset5_test(argc, argv);
negate_test(argc, argv);
nequal_test(argc, argv);
nextprm0_test(argc, argv);
nextprm1_test(argc, argv);
nextprm2_test(argc, argv);
nthelem0_test(argc, argv);
nthelem1_test(argc, argv);
nthelem2_test(argc, argv);
ostmit_test(argc, argv);
pair0_test(argc, argv);
pair1_test(argc, argv);
pair2_test(argc, argv);
parsrt0_test(argc, argv);
parsrt1_test(argc, argv);
parsrt2_test(argc, argv);
parsrtc0_test(argc, argv);
parsrtc1_test(argc, argv);
parsrtc2_test(argc, argv);
partsrt0_test(argc, argv);
partsum0_test(argc, argv);
partsum1_test(argc, argv);
partsum2_test(argc, argv);
pheap1_test(argc, argv);
pheap2_test(argc, argv);
plus_test(argc, argv);
pqueue1_test(argc, argv);
prevprm0_test(argc, argv);
prevprm1_test(argc, argv);
prevprm2_test(argc, argv);
ptition0_test(argc, argv);
ptition1_test(argc, argv);
ptrbinf1_test(argc, argv);
ptrbinf2_test(argc, argv);
ptrunf1_test(argc, argv);
ptrunf2_test(argc, argv);
queue1_test(argc, argv);
rawiter_test(argc, argv);
remcopy1_test(argc, argv);
remcpif1_test(argc, argv);
remif1_test(argc, argv);
remove1_test(argc, argv);
repcpif1_test(argc, argv);
replace0_test(argc, argv);
replace1_test(argc, argv);
replcpy1_test(argc, argv);
replif1_test(argc, argv);
revbit1_test(argc, argv);
revbit2_test(argc, argv);
revcopy1_test(argc, argv);
reverse1_test(argc, argv);
reviter1_test(argc, argv);
reviter2_test(argc, argv);
rndshuf0_test(argc, argv);
rndshuf1_test(argc, argv);
rndshuf2_test(argc, argv);
rotate0_test(argc, argv);
rotate1_test(argc, argv);
rotcopy0_test(argc, argv);
rotcopy1_test(argc, argv);
search0_test(argc, argv);
search1_test(argc, argv);
search2_test(argc, argv);
set1_test(argc, argv);
set2_test(argc, argv);
setdiff0_test(argc, argv);
setdiff1_test(argc, argv);
setdiff2_test(argc, argv);
setintr0_test(argc, argv);
setintr1_test(argc, argv);
setintr2_test(argc, argv);
setsymd0_test(argc, argv);
setsymd1_test(argc, argv);
setsymd2_test(argc, argv);
setunon0_test(argc, argv);
setunon1_test(argc, argv);
setunon2_test(argc, argv);
sort1_test(argc, argv);
sort2_test(argc, argv);
stack1_test(argc, argv);
stack2_test(argc, argv);
stat_test(argc, argv);
stblptn0_test(argc, argv);
stblptn1_test(argc, argv);
stblsrt1_test(argc, argv);
stblsrt2_test(argc, argv);
swap1_test(argc, argv);
swprnge1_test(argc, argv);
times_test(argc, argv);
trnsfrm1_test(argc, argv);
trnsfrm2_test(argc, argv);
ucompos1_test(argc, argv);
ucompos2_test(argc, argv);
unegate1_test(argc, argv);
unegate2_test(argc, argv);
uniqcpy1_test(argc, argv);
uniqcpy2_test(argc, argv);
unique1_test(argc, argv);
unique2_test(argc, argv);
uprbnd1_test(argc, argv);
uprbnd2_test(argc, argv);
vec1_test(argc, argv);
vec2_test(argc, argv);
vec3_test(argc, argv);
vec4_test(argc, argv);
vec5_test(argc, argv);
vec6_test(argc, argv);
vec7_test(argc, argv);
vec8_test(argc, argv);
}
