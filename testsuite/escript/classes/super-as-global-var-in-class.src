// A non-child class can define a super method function that accesses a global variable named super.
// **BUGGED** looks like function resolver for funcrefs is wrong

var super := @(i){ print( $"funcexpr called i={i}"); };

class Foo()
    function Foo( this )
    endfunction

    function super( this, i )
        print( $"foo::super called i={i}" );

        // Execute super as a global variable
        ::super( i );

        print( "--" );
        if ( i == 0 )
            return;
        endif

        // TODO FIX THIS BUG
        // There is no globally declared function named 'super', so should throw compiler error
        // and is currently linking to <calling_scope>::super. Once bug fixed, change to the below line:
        // super( this, i - 1 );

        @::super(this, i - 1);
    endfunction
endclass

var obj := Foo();

// TODO cange to obj.super() when executor implementation complete
Foo::super( obj, 2 );
