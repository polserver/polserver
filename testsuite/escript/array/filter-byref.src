// A "poly-fill" for array.filter()
function filter_array( byref arr, func )
  var result := array{};
  var index := 1;
  var size := arr.size();
  foreach elem in arr
    if ( func.call( elem, index, arr ) )
      result.append( elem );
    endif
    index++;
    if ( index > size )
      break;
    endif
  endforeach
  return result;
endfunction


// Some functions with alternating byref options
var filter_func1 := @( element, index, arr ) {
  arr[index] := element * 2;
  element := arr[index];
  arr[index + 1] := element * 3;
  return true;
};

var filter_func2 := @(byref element, index, arr) {
  arr[index] := element * 2;
  element := arr[index];
  arr[index + 1] := element * 3;
  return true;
};

var filter_func3 := @(element, index, byref arr) {
  arr[index] := element * 2;
  element := arr[index];
  arr[index + 1] := element * 3;
  return true;
};

foreach func in ( array{ filter_func1, filter_func2, filter_func3 } )
  var f, filtered_poly, filtered_builtin;

  // Filter using "polyfill"
  f := array{ 1,2,3,4,5 };
  filtered_poly := filter_array( f, func );
  print( $"filtered_poly={filtered_poly}" );
  print( $"f={f}" );

  // Filter using built-in
  f := array{ 1,2,3,4,5 };
  filtered_builtin := f.filter(func);
  print( $"filtered_builtin={filtered_builtin}" );
  print( $"f={f}" );

  // See a "1" for the same
  print( filtered_poly == filtered_builtin );
endforeach
