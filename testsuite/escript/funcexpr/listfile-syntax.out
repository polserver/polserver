0: create-functor index=0 instructions=5 (TOK_FUNCTOR)
    1: pop param 'k'
    2: pop param 'j'
    3: pop param 'i'
    4: 1 (integer) offset=0x7
    5: return
6: # (consume)
7: create-functor index=1 instructions=2 (TOK_FUNCTOR)
    8: 0 (integer) offset=0xb
    9: return
10: # (consume)
11: create-functor index=2 instructions=2 (TOK_FUNCTOR)
    12: 1 (integer) offset=0xf
    13: return
14: # (consume)
15: create-functor index=3 instructions=5 (TOK_FUNCTOR)
    16: pop param 'k'
    17: pop param byref 'j'
    18: pop param 'i'
    19: 1 (integer) offset=0x13
    20: return
21: # (consume)
22: "listfile-syntax" (string) len=15 offset=0x17
23: makelocal
24: jsr userfunc @27
25: # (consume)
26: progend
27: pop param 'test'
28: declare local #1
29: "./funcexpr/" (string) len=11 offset=0x2c
30: local variable #0
31: ".lst" (string) len=4 offset=0x38
32: interpolate string (3 parts)
33: call module function (1, 0): ReadFile
34: :=
35: # (consume)
36: local variable #1
37: if true goto 42
38: local variable #1
39: "" (string) len=0 offset=0x2
40: call module function (0, 0): Print
41: return
42: declare local #2
43: "" (string) len=0 offset=0x2
44: :=
45: # (consume)
46: local variable #1
47: initforeach @81
48: local variable #2
49: local variable #3
50: interpolate string (2 parts)
51: "" (string) len=0 offset=0x2
52: call module function (0, 0): Print
53: # (consume)
54: local variable #3
55: " " (string) len=1 offset=0x3d
56: "create-functor" (string) len=14 offset=0x3f
57: interpolate string (2 parts)
58: TOK_ARRAY_SUBSCRIPT
59: if false goto 65
60: local variable #2
61: "    " (string) len=4 offset=0x4e
62: interpolate string (2 parts)
63: local #2 :=
64: goto 81
65: local variable #3
66: " " (string) len=1 offset=0x3d
67: "return" (string) len=6 offset=0x53
68: interpolate string (2 parts)
69: TOK_ARRAY_SUBSCRIPT
70: if false goto 81
71: local variable #2
72: 1 (integer) offset=0x5a
73: local variable #2
74: call-method-id 'length' (#141, 0 arguments)
75: 4 (integer) offset=0x5e
76: -
77: multi subscript get (2 indexes)
78: peek at top of stack; skip 1 instructions if true, otherwise consume it
79: "" (string) len=0 offset=0x2
80: local #2 :=
81: stepforeach @48
82: leave block (remove 3 locals)
83: 0 (integer) offset=0x62
84: return
