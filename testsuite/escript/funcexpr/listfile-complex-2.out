0: "" (string) len=0 offset=0x1
1: if false goto 85
2: declare local #0
3: # (consume)
4: declare local #1
5: # (consume)
6: declare local #2
7: # (consume)
8: local variable #1
9: local variable #0
10: 2 (integer) offset=0x40
11: 0 (integer) offset=0x2
12: false (boolean)
13: create-functor instructions=69
    14: pop param byref 'b'
    15: pop param byref 'a'
    16: local variable #0
    17: # (consume)
    18: local variable #1
    19: 1 (integer) offset=0x38
    20: 1 (integer) offset=0xa
    21: false (boolean)
    22: create-functor instructions=57
        23: pop param 'c'
        24: pop param byref 'a'
        25: local variable #1
        26: local variable #0
        27: 2 (integer) offset=0x30
        28: 1 (integer) offset=0x10
        29: false (boolean)
        30: create-functor instructions=42
            31: pop param 'b'
            32: pop param byref 'a'
            33: pop param byref 'c'
            34: local variable #1
            35: # (consume)
            36: local variable #2
            37: # (consume)
            38: declare local #1
            39: # (consume)
            40: local variable #3
            41: 1 (integer) offset=0x28
            42: 0 (integer) offset=0x14
            43: false (boolean)
            44: create-functor instructions=25
                45: pop param byref 'a'
                46: local variable #0
                47: # (consume)
                48: declare local #0
                49: # (consume)
                50: local variable #0
                51: local variable #1
                52: 2 (integer) offset=0x20
                53: 1 (integer) offset=0x18
                54: false (boolean)
                55: create-functor instructions=11
                    56: pop param 'c'
                    57: pop param byref 'a'
                    58: pop param byref 'b'
                    59: local variable #1
                    60: # (consume)
                    61: local variable #2
                    62: # (consume)
                    63: local variable #0
                    64: # (consume)
                    65: 0 (integer) offset=0x1c
                    66: return
                67: # (consume)
                68: 0 (integer) offset=0x24
                69: return
            70: # (consume)
            71: 0 (integer) offset=0x2c
            72: return
        73: # (consume)
        74: local variable #1
        75: # (consume)
        76: local variable #0
        77: # (consume)
        78: 0 (integer) offset=0x34
        79: return
    80: # (consume)
    81: 0 (integer) offset=0x3c
    82: return
83: # (consume)
84: leave block (remove 3 locals)
85: "listfile-complex-2" (string) len=18 offset=0x44
86: makelocal
87: jsr userfunc @90
88: # (consume)
89: progend
90: pop param 'test'
91: declare local #1
92: "./funcexpr/" (string) len=11 offset=0x5c
93: local variable #0
94: ".lst" (string) len=4 offset=0x68
95: interpolate string (3 parts)
96: call module function (1, 0): ReadFile
97: :=
98: # (consume)
99: local variable #1
100: if true goto 105
101: local variable #1
102: "" (string) len=0 offset=0x1
103: call module function (0, 0): Print
104: return
105: declare local #2
106: "" (string) len=0 offset=0x1
107: :=
108: # (consume)
109: local variable #1
110: initforeach @144
111: local variable #2
112: local variable #3
113: interpolate string (2 parts)
114: "" (string) len=0 offset=0x1
115: call module function (0, 0): Print
116: # (consume)
117: local variable #3
118: " " (string) len=1 offset=0x6d
119: "create-functor" (string) len=14 offset=0x6f
120: interpolate string (2 parts)
121: TOK_ARRAY_SUBSCRIPT
122: if false goto 128
123: local variable #2
124: "    " (string) len=4 offset=0x7e
125: interpolate string (2 parts)
126: local #2 :=
127: goto 144
128: local variable #3
129: " " (string) len=1 offset=0x6d
130: "return" (string) len=6 offset=0x83
131: interpolate string (2 parts)
132: TOK_ARRAY_SUBSCRIPT
133: if false goto 144
134: local variable #2
135: 1 (integer) offset=0x8a
136: local variable #2
137: call-method-id 'length' (#141, 0 arguments)
138: 4 (integer) offset=0x8e
139: -
140: multi subscript get (2 indexes)
141: peek at top of stack; skip 1 instructions if true, otherwise consume it
142: "" (string) len=0 offset=0x1
143: local #2 :=
144: stepforeach @111
145: leave block (remove 3 locals)
146: 0 (integer) offset=0x92
147: return
