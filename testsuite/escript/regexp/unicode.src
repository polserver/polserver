print( "ёЁйЙьЬъЪ".match( /./gu ).map( @( match ) {
  return { match.offset, match.matched };
} ) );

print( "---" );

var hello := "Нè└└☺";
foreach ch in hello
  print( $"{ch}: iter={_ch_iter} first={hello.find( RegExp( ch, "u" ) )} after-iter={hello.find( RegExp( ch,
                                                                                                         "u" ),
                                                                                                 _ch_iter )}" );
endforeach

print( "---" );

print( hello.replace( /└/u, "Ъ" ) );
print( hello.replace( /└/ug, "Ъ" ) );

print( "---" );

print( hello.replace( /└/u, @ReplacementCallback ) );
print( hello.replace( /└/ug, @ReplacementCallback ) );

function ReplacementCallback( match, groups, offset, input )
  print( $"match={match} groups={groups} offset={offset} input={input}" );
  return CChr( CAsc( match ) + 1 );
endfunction

// Need to implement \uXXXX replacement in string creation
// Hiragana, U+3040 - U+309F

// var hiragana := "あいうえお";
// print( $"Is all hiragana = {hiragana.match(/^[぀-ゟ]+$/u)}");
