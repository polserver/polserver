
function args0( args ... )
  return ( $"args={args}" );
endfunction

function args1( a, args ... )
  return ( $"a={a} args={args}" );
endfunction

function args2( a, b, args ... )
  return ( $"a={a} b={b} args={args}" );
endfunction

function args3( a, b, c, args ... )
  return ( $"a={a} b={b} c={c} args={args}" );
endfunction

var f_set := array{ {}, { "x" }, { "x", "y" }, { "x", "y", "z" } };

foreach f in f_set
  print( "bareArrayInitializer" );
  print( { f ... } );
  print( { 1, f ... } );
  print( { 1, 2, f ... } );
  print( { 1, 2, 3, f ... } );
  print( "-" );

  print( "arrayInitializer" );
  print( array{ f ... } );
  print( array{ 1, f ... } );
  print( array{ 1, 2, f ... } );
  print( array{ 1, 2, 3, f ... } );
  print( "-" );

  print( "functionCallSuffix" );
  print( @args0( f ... ) );
  print( @args0( 1, f ... ) );
  print( @args0( 1, 2, f ... ) );
  print( @args0( 1, 2, 3, f ... ) );
  print( "-" );

  print( "functionCallSuffix" );
  print( @args1( f ... ) );
  print( @args1( 1, f ... ) );
  print( @args1( 1, 2, f ... ) );
  print( @args1( 1, 2, 3, f ... ) );
  print( "-" );

  print( "functionCallSuffix" );
  print( @args2( f ... ) );
  print( @args2( 1, f ... ) );
  print( @args2( 1, 2, f ... ) );
  print( @args2( 1, 2, 3, f ... ) );
  print( "-" );

  print( "methodCallSuffix" ); // via `s.insert()`
  var s := struct{};
  print( s.insert( f ... ) ); // This will be BError unless `f` has two arguments (key and value)
  print( $"s={s}" );
  print( "-" );

  print( "functionCall" );
  print( args0( f ... ) );
  print( args1( 1, f ... ) );
  print( args2( 1, 2, f ... ) );
  print( args3( 1, 2, 3, f ... ) );
  print( "-----" );
endforeach
