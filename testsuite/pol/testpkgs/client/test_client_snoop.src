use os;
use uo;
use boat;

include "testutil";
include "communication";

var char;
var npc;
var backpackItem;

var clientcon := getClientConnection();

program chartests()
  var a:=FindAccount("testclient0");
  char:=a.getcharacter(1);
  if (!char)
    return ret_error("Could not find char at slot 1");
  endif

  npc:=CreateNpcFromTemplate(":TestClient:test_snooping", 100, 100, 0, forcelocation := 1);
  if (!npc)
    return ret_error("Failed to create NPC: "+npc);
  endif

  var backpack := CreateItemAtLocation( 100, 100, 0, "SnoopableBackPack");
  if (!backpack)
    return ret_error("Failed to create backpack item: "+npc);
  endif

  backpackItem := CreateItemInContainer(backpack, "SnoopableBackPack");
  if (!backpackItem)
    return ret_error("Failed to create item in backpack: "+backpackItem);
  endif

  EquipItem(npc, backpack);
  if (!npc.backpack)
    return ret_error("NPC has no backpack: "+npc.backpack);
  endif

  print($"npc {npc.serial} backpack {npc.backpack.serial} backpackItem {backpackItem.serial}");

  SetGlobalProperty("#SnoopingNpc", npc.serial);
endprogram

exported function use_backpack_out_of_range()
  MoveObjectToLocation(npc, char.x+20, char.y, char.z, flags := MOVEOBJECT_FORCELOCATION);
  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:="double_click", arg:=npc.backpack.serial, id:=0});
  var ev;
  while (1)
    ev:=waitForClient(0, {EVT_SPEECH});
    if (!ev)
      return ev;
    endif
    if (!ev.msg)
      return ret_error("No msg property on EVT_SPEECH event");
    endif
    break;
  endwhile

  var expected := "That is too far away.";

  if (ev.msg == expected)
    return 1;
  endif

  return ret_error($"Unexpected double-click message: '{ev.msg}' != '{expected}'");
endfunction


exported function use_backpack_in_range()
  MoveObjectToLocation(npc, char.x, char.y, char.z, flags := MOVEOBJECT_FORCELOCATION);

  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:="double_click", arg:=npc.backpack.serial, id:=0});
  var ev;
  while (1)
    ev:=waitForClient(0, {EVT_DOUBLE_CLICK});
    if (!ev)
      return ev;
    endif
    break;
  endwhile

  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:="list_objects", id:=0});
  while (1)
    ev:=waitForClient(0, {EVT_LIST_OBJS});
    if (!ev)
      return ev;
    endif
    break;
  endwhile

  foreach item in (ev.objs)
    if (item.serial == backpackItem.serial)
      if (item.parent == npc.backpack.serial)
        return 1;
      else
        return ret_error($"Found backpack item {item.serial}, but parent {item.parent} is not npc backpack {npc.backpack.serial}.");
      endif
    endif
  endforeach

  return ret_error("Could not find backpack item in client's list of objects.");
endfunction


exported function target_nonlocal_checklos()
  MoveObjectToLocation(npc, char.x + 2, char.y, char.z, flags := MOVEOBJECT_FORCELOCATION);

  var wall := CreateItemAtLocation(char.x + 1, char.y, char.z, 0x06); // wooden wall
  if (!wall)
    return ret_error($"Could not create wall: {wall}");
  endif

  SendViewContainer(char, npc.backpack);

  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:="target",
    arg:=struct{serial:=backpackItem.serial},
    id:=0});

  var tar:=Target(char,TGTOPT_ALLOW_NONLOCAL | TGTOPT_CHECK_LOS);

  DestroyItem(wall);

  if (tar)
    return ret_error($"Unexpected successful target: {tar.serial} {tar.desc} los check {CheckLosAt(char, npc.x, npc.y, npc.z)}");
  endif
  
  var ev;
  var expected := "That is not within your line of sight.";
  while (1)
    ev:=waitForClient(0, {EVT_SPEECH});
    if (!ev)
      return ev;
    endif

    if (!ev.msg)
      return ret_error("No msg property on EVT_SPEECH event");
    endif

    if (ev.msg == expected)
      return 1;
    endif
  endwhile

  return ret_error($"Unexpected target message message: '{ev.msg}' != '{expected}'");
endfunction


exported function target_nonlocal_nochecklos()
  MoveObjectToLocation(npc, char.x + 2, char.y, char.z, flags := MOVEOBJECT_FORCELOCATION);

  SendViewContainer(char, npc.backpack);

  var wall := CreateItemAtLocation(char.x + 1, char.y, char.z, 0x06); // wooden wall
  if (!wall)
    return ret_error($"Could not create wall: {wall}");
  endif

  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:="target",
    arg:=struct{serial:=backpackItem.serial},
    id:=0});

  var tar:=Target(char,TGTOPT_ALLOW_NONLOCAL | TGTOPT_NOCHECK_LOS);

  DestroyItem(wall);

  while (1)
    var ev:=waitForClient(0, {EVT_TARGET});
    if (!ev)
      return ev;
    endif
    if (!ev.res || ev.targettype != 0)
      return ret_error($"Target failed, no cursor or wrong type {ev.targettype}");
    endif
    break;
  endwhile

  if (tar.serial != backpackItem.serial)
    return ret_error($"Target failed, wrong serial {tar.serial}");
  endif

  return 1;
endfunction
