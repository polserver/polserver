use os;
use uo;
use boat;

include "testutil";
include "communication";

var char;
var char2;
var boat;

var clientcon := getClientConnection();

program chartests()
  var a:=FindAccount("testclient0");
  char:=a.getcharacter(1);
  if (!char)
    return ret_error("Could not find char at slot 1");
  endif
  a:=FindAccount("testclient1");
  char2:=a.getcharacter(1);
  if (!char2)
    return ret_error("Could not find char2 at slot 1");
  endif
  boat:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
endprogram

exported function move_boat()
  MoveBoatXY(boat,10,50);
  var h:=getstandingheight(11,50, boat.z, boat.realm);
  MoveObjectToLocation(char, 11,50,h.z);
  while (!waitForClient(0, {EVT_OWNCREATE}))
  endwhile
  var res:=boat.mobiles.size()==1;
  Clear_Event_Queue();
  var item:=CreateItemAtLocation(11,50,h.z, 0x3e3f, 1, boat.realm);
  var moveres := MoveBoat(boat,0);
  var clientmoveres:=ret_error("no boat pos");
  while (1)
    var ev:=waitForClient(0, {EVT_BOAT_MOVED});
    if (!ev)
      continue;
    endif
    if (ev.pos[1]!=10 || ev.pos[2]!=49 || ev.pos[3]!=-4)
      clientmoveres:=ret_error("wrong boat pos {} != {},{},{}".format(ev.pos,10,49,-4));
    else
      clientmoveres:=1;
    endif
    break;
  endwhile
  clientcon.sendevent(struct{todo:="list_objects", id:=0});
  var itemres:=ret_error("item not found {}".format(item.serial));
  while (1)
    var ev:=waitForClient(0, {EVT_LIST_OBJS});
    if (!ev)
      return ev;
    endif
    foreach it in (ev["objs"])
      if (it["serial"] == item.serial)
        var p:=it["pos"];
        if (p[1]!=11 || p[2]!=49 || p[3]!=-1)
          itemres:=ret_error("wrong item pos {} != {},{},{}".format(p,11,49,-1));
        else
          itemres:=1;
        endif
      endif
    endforeach
    break;
  endwhile

  foreach item in (boat.items)
    DestroyItem(item);
  endforeach
  MoveObjectToLocation(char, 1,1,1,flags:=MOVEOBJECT_FORCELOCATION);
  while (!waitForClient(0, {EVT_OWNCREATE}))
  endwhile
  Clear_Event_Queue();
  if (!res)
    return ret_error("Char not on ship");
  endif
  if (!moveres)
    return ret_error("Failed to move ship {}".format(moveres));
  endif
  if (clientmoveres!=1)
    return clientmoveres;
  endif
  if (itemres!=1)
    return itemres;
  endif
  return 1;
endfunction

// move a boat with to many items on it (smooth boat pkt overflows)
exported function move_boat_overflow()
  MoveBoatXY(boat,10,50);
  var h:=getstandingheight(11,50, boat.z, boat.realm);
  MoveObjectToLocation(char, 11,50,h.z);
  while (!waitForClient(0, {EVT_OWNCREATE}))
  endwhile
  var res:=boat.mobiles.size()==1;
  Clear_Event_Queue();
  clientcon.sendevent(struct{todo:=EVT_DISABLE_ITEM_LOGGING, arg:=1, id:=0});
  while (!waitForClient(0, {EVT_DISABLE_ITEM_LOGGING}))
  endwhile
  for i:=1 to 8000
    CreateItemAtLocation(11,50,h.z, 0x3e3f, 1, boat.realm);
  endfor
  var itemres := boat.items.size() > 7000;
  var moveres := MoveBoat(boat,0);
  foreach item in (boat.items)
    DestroyItem(item);
  endforeach
  MoveObjectToLocation(char, 1,1,1,flags:=MOVEOBJECT_FORCELOCATION);
  while (!waitForClient(0, {EVT_OWNCREATE}))
  endwhile
  clientcon.sendevent(struct{todo:=EVT_DISABLE_ITEM_LOGGING, arg:=0, id:=0});
  while (!waitForClient(0, {EVT_DISABLE_ITEM_LOGGING}))
  endwhile
  Clear_Event_Queue();
  if (!res)
    return ret_error("Char not on ship");
  endif
  if (!itemres)
    return ret_error("Not enough items");
  endif
  if (!moveres)
    return ret_error("Failed to move ship {}".format(moveres));
  endif
  return 1;
endfunction

/* move boat in direction of char and check at which distance the boat is visible and then back out of sight
*/
exported function boat_update_range()
  MoveBoatXY(boat,10,50);
  Clear_Event_Queue();
  //move char out of range
  MoveObjectToLocation(char, boat.x+30,boat.y,1,flags:=MOVEOBJECT_FORCELOCATION);
  while (!waitForClient(0, {EVT_OWNCREATE}))
  endwhile
  clientcon.sendevent(struct{todo:="list_objects", id:=0});
  var ev:=waitForClient(0, {EVT_LIST_OBJS});
  if (!ev)
    return ev;
  endif
  foreach it in (ev["objs"])
    if (it["serial"]==boat.serial)
      return ret_error("boat still in range");
    endif
  endforeach
  // now move boat to char
  var i:=10;
  while (--i>0)
    MoveBoat(boat,2);
    sleepms(10);
  endwhile
  while (1)
    ev:=waitForClient(0, {EVT_NEW_ITEM});
    if (!ev)
      return ev;
    endif
    if (ev["serial"] == boat.serial)
      var x:=char.x-ev["pos"][1];
      var y:=char.y-ev["pos"][2];
      if (x!=23 ||y!=0) // (18 visual range +5 footprint/2)
        return ret_error($"update distance failed: {x}, {y}");
      endif
      break;
    endif
  endwhile

  // move boat again out of range
  i:=10;
  while (--i>0)
    MoveBoat(boat,6);
    sleepms(10);
  endwhile
  while (1)
    ev:=waitForClient(0, {EVT_REMOVED_OBJ});
    if (!ev)
      return ev;
    endif
    if (ev["serial"] == boat.serial)
      var x:=char.x-ev["oldpos"][1];
      var y:=char.y-ev["oldpos"][2];
      if (x!=23 ||y!=0) // (18 visual range +5 footprint/2)
        return ret_error($"remove update distance failed: {x}, {y}");
      endif
      break;
    endif
  endwhile
  return 1;
endfunction
