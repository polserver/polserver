use os;
include "testutil";

program test_httprequest()
  return 1;
endprogram

exported function test_httprequest_regular()
  var res := HTTPRequest("https://postman-echo.com/status/200");
  var expected := "{\"status\":200}";
  if (res != expected)
    return ret_error($"HTTPRequest returned '{res}', expecting '{expected}'");
  endif
  return 1;
endfunction

exported function test_httprequest_ext_status()
  var res := HTTPRequest("https://postman-echo.com/status/429", flags := HTTPREQUEST_EXTENDED_RESPONSE);
  var actual, expected;

  actual := TypeOfInt(res);
  expected := OT_DICTIONARY;
  if (actual != expected)
    return ret_error($"HTTPRequest returned type {actual}, expecting {expected}");
  endif

  actual := res.status;
  expected := 429;
  if (actual != expected)
    return ret_error($"HTTPRequest returned status {actual}, expecting {expected}");
  endif

  actual := res.statusText;
  expected := "Too Many Requests";
  if (actual != expected)
    return ret_error($"HTTPRequest returned statusText '{actual}', expecting '{expected}'");
  endif

  actual := res.body;
  expected := "{\"status\":429}";
  if (actual != expected)
    return ret_error($"HTTPRequest returned body '{actual}', expecting '{expected}'");
  endif

  return 1;
endfunction

exported function test_httprequest_ext_headers()
  var res := HTTPRequest("https://postman-echo.com/response-headers?test1=value1&test2=value2a&test2=value2b", flags := HTTPREQUEST_EXTENDED_RESPONSE);
  var actual, expected;

  actual := TypeOfInt(res);
  expected := OT_DICTIONARY;
  if (actual != expected)
    return ret_error($"HTTPRequest returned type {actual}, expecting {expected}");
  endif

  actual := TypeOfInt(res.headers);
  expected := OT_DICTIONARY;
  if (actual != expected)
    return ret_error($"HTTPRequest returned headers type {actual}, expecting {expected}");
  endif

  actual := res.headers.test1;
  expected := "value1";
  if (actual != expected)
    return ret_error($"HTTPRequest returned headers.test1 '{actual}', expecting '{expected}'");
  endif

  actual := res.headers.test2;
  expected := "value2a, value2b";
  if (actual != expected)
    return ret_error($"HTTPRequest returned headers.test2 '{actual}', expecting '{expected}'");
  endif

  return 1;
endfunction
