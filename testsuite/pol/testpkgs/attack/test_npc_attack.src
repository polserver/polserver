use uo;
use os;

include "testutil";
include "sysevent";

program npc_ai()
  return 1;
endprogram

// Create two NPCs, where `npc1` hides, attacks `npc2`, waits 2 seconds, then unhides.
// Check that both NPCs attack each other at game clock time `t`, where `t` is the clock time
// where the NPC unhides.
exported function attack_on_unhide()
  var npc1 := CreateNPCFromTemplate( ":testattack:test_attack", 100, 100, 0 );

  if ( !npc1 )
    return ret_error( "Could not create NPC: " + npc1 );
  endif

  npc1.hitchance_mod := 1000;
  SetObjProperty( npc1, "#TestPid", GetPid() );
  SetName( npc1, "npc1" );
  npc1.hidden := 1;

  var npc2 := CreateNPCFromTemplate( ":testattack:test_attack", 101, 101, 0 );

  if ( !npc2 )
    return ret_error( "Could not create NPC: " + npc2 );
  endif

  npc2.hitchance_mod := 1000;
  SetObjProperty( npc2, "#TestPid", GetPid() );
  SetName( npc2, "npc2" );

  // Send an event to npc1 to attack npc2 + unhide.
  npc1.process.sendevent( struct{ type := SYSEVENT_ENGAGED, source := npc2 } );

  var initial_ev := wait_for_event( 5 );
  if ( !initial_ev )
    return ret_error( "No event for NPC BEFORE_UNHIDE" );
  elseif ( initial_ev.type != "BEFORE_UNHIDE" )
    return ret_error( "Unexpected first event type: expected 'BEFORE_UNHIDE', actual '{initial_ev.type}'" );
  endif

  // Collect the first two events
  var evs := array{};

  while ( true )
    var ev := wait_for_event( 5 );
    if ( ev )
      evs.append( ev );
      if ( evs.size() >= 2 )
        break;
      endif
      continue;
    endif

    return ret_error( "No event from NPC script received." );
  endwhile


  var t := initial_ev.gameclock;

  var failure :=
    ( evs[1].gameclock != t ) || // First hit did not happen on unhide.
    ( evs[2].gameclock != t ) || // Second hit did not happen on unhide.
    ( evs[1].attacker != evs[2].defender ) || // First hit attacker is not second hit defender
    ( evs[1].defender != evs[2].attacker ); // First hit defender is not second hit attacker

  if ( failure )
    return ret_error( $"Unexpected attacker-defender sequence. Expected both hits at gameclock {t}, attacker[1] == defender[2], defender[1] == attacker[2].\n\nEvents: {PackJSON(evs, true)}" );
  endif

  // NPC and corpse cleanup handled in cleanup.src

  return 1;
endfunction
