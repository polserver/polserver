use boat;
use file;
use os;
use polsys;
use uo;

include "testutil";

program test_boat()
  return 1;
endprogram

exported function create()
  var res:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!res)
    return ret_error("Failed to create boat "+res);
  endif
  if (res.x !=10 || res.y != 50 || res.z != -4 || res.graphic !=0x0)
    var er:="Wrong pos or graphic: {},{},{} {}".format(res.x, res.y, res.z, res.graphic);
    DestroyMulti(res);
    return ret_error(er);
  endif
  if (res.portplank.x != 10 || res.portplank.y != 48 || res.portplank.z != -4)
    var er:="Wrong portplank pos: {},{},{}".format(res.portplank.x, res.portplank.y, res.portplank.z);
    DestroyMulti(res);
    return ret_error(er);
  endif

  for i:=1 to 5
    sleepms(10);
    if (res.getprop("started"))
      DestroyMulti(res);
      return 1;
    endif
  endfor
  DestroyMulti(res);
  return ret_error("Failed to start boat script");
endfunction

exported function create_fail()
  var res:=CreateMultiAtLocation(50,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (res)
    DestroyMulti(res);
    return ret_error("Created boat on ground");
  endif
  return 1;
endfunction

exported function move()
  var res:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!res)
    return ret_error("Failed to create boat "+res);
  endif
  moveboat(res, 0);
  if (res.x !=10 || res.y != 49 || res.z != -4)
    var er:="Wrong pos: {},{},{}".format(res.x, res.y, res.z);
    DestroyMulti(res);
    return ret_error(er);
  endif
  DestroyMulti(res);
  return 1;
endfunction

exported function test_script_method_syshook()
  var res:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!res)
    return ret_error("Failed to create boat "+res);
  endif
  var value := res.IsSysHookBoat();
  if (value != 1)
    var er:="Wrong IsSysHookBoat() return value: {}".format(value);
    DestroyMulti(res);
    return ret_error(er);
  endif
  DestroyMulti(res);
  return 1;
endfunction

exported function test_script_method_itemdesc()
  var res:=CreateMultiAtLocation(10,50,-4,0x11001, CRMULTI_FACING_EAST);
  if (!res)
    return ret_error("Failed to create boat "+res);
  endif
  var value := res.IsItemDescBoat();
  if (value != 1)
    var er:="Wrong IsItemDescBoat() return value: {}".format(value);
    DestroyMulti(res);
    return ret_error(er);
  endif
  DestroyMulti(res);
  return 1;
endfunction

exported function test_script_method_both()
  var res:=CreateMultiAtLocation(10,50,-4,0x11001, CRMULTI_FACING_EAST);
  if (!res)
    return ret_error("Failed to create boat "+res);
  endif
  var value := res.WhereDefined();
  if (value != "itemdesc")
    var er:="Wrong WhereDefined() return value: {}".format(value);
    DestroyMulti(res);
    return ret_error(er);
  endif
  DestroyMulti(res);
  return 1;
endfunction

exported function test_boat_walkon_script()
  var boat := CreateMultiAtLocation( 10, 50, -4, 0x11004, CRMULTI_FACING_EAST );
  if ( !boat )
    return ret_error( $"Failed to create boat: {boat}" );
  endif

  SetObjProperty( boat, "#TestPid", GetPid() );

  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", 100, 100, 0 );

  if ( !npc )
    DestroyMulti( boat );
    return ret_error( $"Failed to create npc: {npc}" );
  endif

  var lastpos := struct{ lastx := npc.x, lasty := npc.y, lastz := npc.z, lastrealm := npc.realm };
  var res := MoveObjectToLocation( npc, boat.x + 1, boat.y + 1, boat.z );

  if ( res )
    res := os::wait_for_event( 5 );
    if ( !res )
      res := ret_error( "Event not received from walkon script" );
    else
      if ( res.lastx != lastpos.lastx || res.lasty != lastpos.lasty || res.lastz != lastpos.lastz || res.lastrealm != lastpos.lastrealm )
        res := ret_error( $"Last position of npc {lastpos} != last position from walkon script {res}" );
      else
        res := 1;
      endif
    endif
  endif

  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  DestroyMulti( boat );
  npc.kill();

  return res;
endfunction

exported function test_boat_walkon_script_oncreate()
  var boat := CreateMultiAtLocation( 10, 50, -4, 0x11004, CRMULTI_FACING_EAST );
  if ( !boat )
    return ret_error( $"Failed to create boat: {boat}" );
  endif

  SetObjProperty( boat, "#TestPid", GetPid() );

  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", boat.x + 1, boat.y + 1, boat.z );

  if ( !npc )
    DestroyMulti( boat );
    return ret_error( $"Failed to create npc: {npc}" );
  endif

  var lastpos := struct{ lastx := 0, lasty := 0, lastz := 0, lastrealm := "" };
  var res := os::wait_for_event( 5 );
  if ( !res )
    res := ret_error( "Event not received from walkon script" );
  else
    if ( res.lastx != lastpos.lastx || res.lasty != lastpos.lasty || res.lastz != lastpos.lastz || res.lastrealm != lastpos.lastrealm )
      res := ret_error( $"Last position of npc {lastpos} != last position from walkon script {res}" );
    else
      res := 1;
    endif
  endif

  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  DestroyMulti( boat );
  npc.kill();

  return res;
endfunction

exported function test_sails_passable()
  // Tile (28,28) is sand, so if sails...
  // - do not collide: we can build at (27,27)

  var config := UpdateBoatSailsCollide( 0 );

  if ( !config )
    return config;
  endif

  var boat := CreateMultiAtLocation( 27, 27, -4, 0x11005, CRMULTI_FACING_NORTH );
  if ( !boat )
    RestoreConfiguration( config );
    return ret_error( $"Failed to create boat: {boat}" );
  endif

  DestroyMulti( boat );
  RestoreConfiguration( config );

  return 1;
endfunction

exported function test_sails_collides()
  // Tile (28,28) is sand, so if sails...
  // - collide: we can not build at (27,27)

  var config := UpdateBoatSailsCollide( 1 );

  if ( !config )
    return config;
  endif

  var boat := CreateMultiAtLocation( 27, 27, -4, 0x11005, CRMULTI_FACING_NORTH );
  if ( boat )
    DestroyMulti( boat );
    RestoreConfiguration( config );
    return ret_error( $"Boat unexpectedly successfully created at {boat.x}, {boat.y}, {boat.z}, GetMapInfo: {GetMapInfo(
                      boat.x, boat.y )}" );
  endif

  RestoreConfiguration( config );

  return 1;
endfunction

// This could be parameterized to also work with test_client_item_move's servspecopt changes
function UpdateBoatSailsCollide( collides )
  var originalConf := ReadFile( "::config/servspecopt.cfg" );
  if ( originalConf == error )
    return ret_error( $"Could not read config/servspecopt.cfg file: ${originalConf}" );
  endif

  var newConf := array;
  foreach line in originalConf
    if ( Find( line, "BoatSailsCollide", 1 ) )
      continue;
    endif
    newConf.append( line );
  endforeach
  newConf.append( $"BoatSailsCollide={collides}" );

  return RestoreConfiguration( newConf );
endfunction

function RestoreConfiguration( newConf )
  var writeResult := WriteFile( "::config/servspecopt.cfg", newConf );
  if ( writeResult == error )
    return ret_error( $"Could not write config/servspecopt.cfg file: ${writeResult}" );
  endif

  return ReloadConfiguration();
endfunction

exported function test_boat_realm_move()
  var boat:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
  var item:=CreateItemAtLocation(10,51,0,0xf3f);
  if (!item)
    DestroyMulti(boat);
    return ret_error($"Failed to create item {item}");
  endif
  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", 9, 50, 0 );
  if ( !npc )
    DestroyItem(item);
    DestroyMulti(boat);
    return ret_error( $"Failed to create npc: {npc}" );
  endif
  var result:=1;
  do
    var res:=MoveObjectToLocation(boat,1580,150,0,"britannia2",MOVEOBJECT_FORCELOCATION);
    if (!res || boat.x != 1580 || boat.y != 150 || boat.z != 0 || boat.realm != "britannia2")
      result := ret_error($"Failed initial move: {res}:{boat.x},{boat.y},{boat.z},{boat.realm}");
      break;
    elseif ( item.x != 1580 || item.y != 151 || item.z != 4 || item.realm != "britannia2")
      result := ret_error($"Initial move failed: item {item.x},{item.y},{item.z},{item.realm}");
      break;
    elseif (npc.x != 1579 || npc.y != 150 || npc.z != 3 || npc.realm != "britannia2")
      result := ret_error($"Initial move failed: npc {npc.x},{npc.y},{npc.z},{npc.realm}");
      break;
    elseif (boat.portplank.x != 1580 || boat.portplank.y != 148 || boat.portplank.z != 0 || boat.portplank.realm != "britannia2")
      result:=ret_error("Initial move failed: portplank {},{},{},{}".format(boat.portplank.x, boat.portplank.y, boat.portplank.z, boat.portplank.realm));
      break;
    endif

    res:=MoveObjectToLocation(boat,10,10,-4,"britannia",MOVEOBJECT_FORCELOCATION);
    if (!res || boat.x != 10 || boat.y != 10 || boat.z != -4|| boat.realm != "britannia")
      result:=ret_error($"Failed to move: {res}:{boat.x},{boat.y},{boat.z},{boat.realm}");
      break;
    elseif ( item.x != 10 || item.y != 11 || item.z != 0 || item.realm != "britannia")
      result := ret_error($"Move failed: item {item.x},{item.y},{item.z},{item.realm}");
      break;
    elseif (npc.x != 9 || npc.y != 10 || npc.z != -1 || npc.realm != "britannia")
      result := ret_error($"Move failed: npc {npc.x},{npc.y},{npc.z},{npc.realm}");
      break;
    elseif (boat.portplank.x != 10 || boat.portplank.y != 8 || boat.portplank.z != -4 || boat.portplank.realm != "britannia")
      result:=ret_error("Move failed: portplank {},{},{},{}".format(boat.portplank.x, boat.portplank.y, boat.portplank.z, boat.portplank.realm));
      break;
    endif
  dowhile(0);
  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  npc.kill();
  DestroyItem(item);
  DestroyMulti(boat);
  return result;
endfunction

exported function test_boat_turn_travellers()
  var boat:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
  var item:=CreateItemAtLocation(10,51,0,0xf3f);
  if (!item)
    DestroyMulti(boat);
    return ret_error($"Failed to create item {item}");
  endif
  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", 9, 50, 0 );
  if ( !npc )
    DestroyItem(item);
    DestroyMulti(boat);
    return ret_error( $"Failed to create npc: {npc}" );
  endif
  var checks:={
    {1,4,  9,50, 10,49}, // right
    {3,2, 10,51,  9,50}, // left
    {2,6, 10,49, 11,50}, // around
    {0,6, 10,49, 11,50}  // nothing
  };
  var result:=1;
  foreach check in checks
    var res:=TurnBoat(boat,check[1]);
    if (!res)
      result:=ret_error($"Failed to turn {check} {res}");
      break;
    endif
    if (boat.facing != check[2] || item.x != check[3] || item.y != check[4] || npc.x != check[5] || npc.y != check[6])
      result := ret_error($"Check failed {check}: facing {boat.facing} item {item.x},{item.y} npc {npc.x},{npc.y}");
      break;
    endif
  endforeach
  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  npc.kill();
  DestroyItem(item);
  DestroyMulti(boat);
  return result;
endfunction

exported function test_boat_move_travellers()
  var boat:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
  var item:=CreateItemAtLocation(10,51,0,0xf3f);
  if (!item)
    DestroyMulti(boat);
    return ret_error($"Failed to create item {item}");
  endif
  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", 9, 50, 0 );
  if ( !npc )
    DestroyItem(item);
    DestroyMulti(boat);
    return ret_error( $"Failed to create npc: {npc}" );
  endif
  var result:=1;
  var res:=MoveBoat(boat,0);
  if (!res)
    result:=ret_error($"Failed to move {res}");
  else
    if ( item.x != 10 || item.y != 50 || item.z != 0 || 
         npc.x != 9 || npc.y != 49 || npc.z != -1 )
      result := ret_error($"Move failed: item {item.x},{item.y},{item.z} npc {npc.x},{npc.y},{npc.z}");
    elseif (boat.portplank.x != 10 || boat.portplank.y != 47 || boat.portplank.z != -4)
      result:=ret_error("Wrong portplank pos: {},{},{}".format(res.portplank.x, res.portplank.y, res.portplank.z));
    endif
  endif
  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  npc.kill();
  DestroyItem(item);
  DestroyMulti(boat);
  return result;
endfunction

exported function test_boat_moveloc_travellers()
  var boat:=CreateMultiAtLocation(10,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
  var item:=CreateItemAtLocation(10,51,0,0xf3f);
  if (!item)
    DestroyMulti(boat);
    return ret_error($"Failed to create item {item}");
  endif
  var npc := CreateNPCFromTemplate( ":testnpc:probe_npc", 9, 50, 0 );
  if ( !npc )
    DestroyItem(item);
    DestroyMulti(boat);
    return ret_error( $"Failed to create npc: {npc}" );
  endif
  var result:=1;
  var res:=MoveObjectToLocation(boat,180,150,10,flags:=MOVEOBJECT_FORCELOCATION);
  if (!res)
    result:=ret_error($"Failed to move {res}");
  else
    if ( item.x != 180 || item.y != 151 || item.z != 14 || 
         npc.x != 179 || npc.y != 150 || npc.z != 13 )
      result := ret_error($"Move failed: item {item.x},{item.y},{item.z} npc {npc.x},{npc.y},{npc.z}");
    elseif (boat.portplank.x != 180 || boat.portplank.y != 148 || boat.portplank.z != 10)
      result:=ret_error("Wrong portplank pos: {},{},{}".format(boat.portplank.x, boat.portplank.y, boat.portplank.z));
    endif
  endif
  MoveObjectToLocation( npc, 100, 100, 0, flags := MOVEOBJECT_FORCELOCATION );
  npc.kill();
  DestroyItem(item);
  DestroyMulti(boat);
  return result;
endfunction

exported function test_boat_move_outside_realm()
  var boat:=CreateMultiAtLocation(180,50,-4,0x11000, CRMULTI_FACING_EAST);
  if (!boat)
    return ret_error("Failed to create boat "+boat);
  endif
  var result:=ret_error("didnt stop moving");
  while (boat.x < 190)
    var res:=MoveBoatRelative(boat,0);
    if (!res)
      if (boat.x == 186)
        result := 1;
        break;
      else
        result := ret_error($"moved to far: {boat.x}");
        break;
      endif
    endif
  endwhile
  DestroyMulti(boat);
  return result;
endfunction
