use polsys;
use uo;
use os;

include "testutil";

program testitem()
  return 1;
endprogram

exported function test_item_realm_move()
  // crashed by wrongly converting coordinates between realms
  var item := CreateItemAtLocation( 0, 0, 0, 0xf3f );
  if ( !item )
    return ret_error( "Failed to create item " + item );
  endif

  MoveObjectToLocation( item, 1000, 1000, 0, "britannia2", MOVEOBJECT_FORCELOCATION );
  if ( item.x != 1000 || item.y != 1000 || item.realm != "britannia2" )
    var res := $"Failed initial move: {item.x},{item.y},{item.realm}";
    DestroyItem( item );
    return ret_error( res );
  endif

  MoveObjectToLocation( item, 10, 10, 0, "britannia", MOVEOBJECT_FORCELOCATION );
  if ( item.x != 10 || item.y != 10 || item.realm != "britannia" )
    var res := $"Failed to move: {item.x},{item.y},{item.realm}";
    DestroyItem( item );
    return ret_error( res );
  endif

  DestroyItem( item );
  return 1;
endfunction

exported function test_item_cursed()
  var cnt := CreateItemAtLocation( 0, 0, 0, 0x200001 );
  if ( !cnt )
    return ret_error( "Failed to create container " + cnt );
  endif

  // Create one stack of gold
  var gold1 := CreateItemInContainer( cnt, "goldcoin", 1000 );
  if ( !gold1 )
    return ret_error( $"Failed to create goldcoin {gold1}" );
  endif

  // Create another stack of gold, will be stacked onto existing item `gold1`
  var gold2 := CreateItemInContainer( cnt, "goldcoin", 2000 );
  if ( !gold2 )
    return ret_error( $"Failed to create goldcoin {gold2}" );
  elseif ( EnumerateItemsInContainer( cnt ).size() != 1 )
    return ret_error( "Expected one item -- gold -- in container" );
  elseif ( gold1 != gold2 )
    return ret_error( "Expected second created gold to stack with first" );
  endif

  // Create one stack of cursed gold
  var cursedgold1 := CreateItemInContainer( cnt, "cursedgoldcoin", 3000 );
  if ( !cursedgold1 )
    return ret_error( $"Failed to create cursedgoldcoin {cursedgold1}" );
  endif

  // Create another stack of cursed gold, will be stacked onto existing item `cursedgold1`
  var cursedgold2 := CreateItemInContainer( cnt, "cursedgoldcoin", 4000 );
  if ( !cursedgold2 )
    return ret_error( $"Failed to create cursedgoldcoin {cursedgold2}" );
  elseif ( cursedgold1 != cursedgold2 )
    return ret_error( "Expected second created cursedgold to stack with first" );
  elseif ( cursedgold1.cursed == 0 )
    return ret_error( "Expected created cursedgold to have cursed == 1" );
  elseif ( EnumerateItemsInContainer( cnt ).size() != 2 )
    return ret_error( "Expected two items -- gold and cursedgold -- in container" );
  endif

  DestroyItem( cnt );
  return 1;
endfunction

exported function test_item_method_crash()
  var item := CreateItemAtLocation( 0, 0, 0, 0x300001 );
  if ( !item )
    return ret_error( "Failed to create item " + item );
  endif
  item.Outer(); // this crashed
  if ( item.Outer2() != 2 )
    DestroyItem( item );
    return ret_error( "Locals backup seems to be broken" );
  endif
  DestroyItem( item );
  return 1;
endfunction

exported function test_create_item_container_loc()
  var cnt := CreateItemAtLocation( 0, 0, 0, 0x200001 );
  if ( !cnt )
    return ret_error( "Failed to create container " + cnt );
  endif
  var item := CreateItemInContainer( cnt, "goldcoin", 1000, 80, 90 );
  if ( !item )
    return ret_error( $"Could not create item: {item}" );
  elseif ( item.x != 80 || item.y != 90 )
    var msg := $"Item not in expected location: item.x ({item.x}) != 80 or item.y ({item.y}) != 90";
    DestroyItem( cnt );
    return ret_error( msg );
  endif
  DestroyItem( cnt );
  return 1;
endfunction

exported function test_item_controlscript_restart()
  // The control script starting is asynchronous, as it is just scheduled to run
  // upon item creation. Configure the item to send an event to this test script
  // when the control script begins execution.
  var desc := GetItemDescriptor( "RestartableItem" );
  desc.SaveOnExit := 0;
  desc.CProps := dictionary{ "#TestPid" -> GetPid() };

  var item := CreateItemAtLocation( 0, 0, 0, desc );
  if ( !item )
    return ret_error( $"Failed to create item: ${item}" );
  endif

  var err, initial_control_script_pid, restarted_control_script_pid;

  // Receive process id by event from the initial control script created via item creation.
  if ( !( initial_control_script_pid := get_pid_from_control_script( err, item, "initial" ) ) )
    DestroyItem( item );
    return err;
  endif

  // Restart the control script.
  var restarted := RestartScript( item );
  if ( !restarted )
    DestroyItem( item );
    return ret_error( $"Failed to RestartScript on item: ${restarted}" );
  endif

  // Receive process id by event from the new control script created by RestartScript.
  if ( !( restarted_control_script_pid := get_pid_from_control_script( err, item, "restarted" ) ) )
    DestroyItem( item );
    return err;
  endif

  // The initial and restarted process ids are different.
  if ( initial_control_script_pid == restarted_control_script_pid )
    DestroyItem( item );
    return ret_error( $"The item's initial control script PID ({initial_control_script_pid}) should not equal the restarted control script PID ({restarted_control_script_pid})" );
  endif

  // RestartScript should have terminated the previous control script.
  var old_process := GetProcess( initial_control_script_pid );
  if ( old_process )
    DestroyItem( item );
    return ret_error( $"Previous control script unexpectedly still exists: ${old_process}" );
  endif

  DestroyItem( item );
  return 1;
endfunction

function get_pid_from_control_script( byref err, item, label )
  // Get event from control script containing its process id.
  var control_script_event := wait_for_event( 5 );
  if ( !control_script_event )
    return err := ret_error( $"Did not receive event from {label} control script." );
  endif

  var control_script_pid := control_script_event.control_script_pid;
  if ( item.process.pid != control_script_pid )
    return err := ret_error( $"The item's {label} control script PID ({item.process().pid}) does not equal the control script event's PID ({control_script_pid})" );
  endif

  return control_script_pid;
endfunction

// controlscript needs to be the last holder of itemref and destroy it
// crash test/AddressSanitizer
exported function test_item_controlscript_destroy()
  var item := CreateItemAtLocation( 0, 0, 0, 0x400003 );
  item := 0;
  sleepms( 30 );
  return 1;
endfunction

exported function test_item_FindSubstance()
  var cnt := CreateItemAtLocation( 0, 0, 0, 0x200001 );
  if ( !cnt )
    return ret_error( "Failed to create container " + cnt );
  endif

  var item := CreateItemInContainer( cnt, "goldcoin", 1000 );
  if ( !item )
    DestroyItem( cnt );
    return ret_error( $"Failed to create item: {item}" );
  endif

  var res;
  do
    res := ReserveItem( item );
    if ( !res )
      break;
    endif

    // Item is reserved, so should fail.
    res := FindSubstance( cnt, "goldcoin", 1 );
    if ( res )
      res := ret_error( "Unexpected success in FindSubstance" );
      break;
    endif

    res := ReleaseItem( item );
    if ( !res )
      break;
    endif

    // Item is not reserved, so should succeed.
    res := FindSubstance( cnt, "goldcoin", 1, makeinuse := true );
    if ( !res )
      res := ret_error( $"Unexpected failure in FindSubstance: {res}" );
      break;
    endif

    // Item should be reserved
    res := ReserveItem( item );
    if ( res != 2 )
      res := ret_error( $"Unexpected return from ReserveItem: {res}" );
      break;
    endif

    res := ReleaseItem( item );
    if ( !res )
      break;
    endif

    // Item is not reserved, so should succeed.
    res := FindSubstance( cnt, "goldcoin", 1000, makeinuse := 1 );
    if ( !res )
      res := ret_error( $"Unexpected failure in second FindSubstance: {res}" );
      break;
    endif

    // Item should be reserved
    res := ReserveItem( item );
    if ( res != 2 )
      res := ret_error( $"Unexpected return from second ReserveItem: {res}" );
      break;
    endif

    res := ReleaseItem( item );
    if ( !res )
      break;
    endif
  dowhile ( false );

  DestroyItem( item );
  DestroyItem( cnt );

  return res;
endfunction

exported function test_item_weight_mod()
  var item := CreateItemAtLocation( 0, 0, 0, "goldcoin", 50000 );
  if ( !item )
    return ret_error( $"Failed to create item: {item}" );
  endif

  var unmodded_weight := item.weight;

  var multiplier, expected;

  multiplier := 0.5;
  item.weight_multiplier_mod := multiplier;
  expected := CInt( unmodded_weight * multiplier );

  if ( item.weight != expected )
    DestroyItem( item );
    return ret_error( $"Item has incorrect weight when weight_multiplier_mod = {multiplier}: expected {expected} != actual {item.weight}" );
  endif

  multiplier := 2.0;
  item.weight_multiplier_mod := multiplier;
  expected := CInt( unmodded_weight * multiplier );

  if ( item.weight != expected )
    DestroyItem( item );
    return ret_error( $"Item has incorrect weight when weight_multiplier_mod = {multiplier}: expected {expected} != actual {item.weight}" );
  endif

  DestroyItem( item );

  return 1;
endfunction

exported function test_item_weight_mod_in_cont()
  var cont := CreateItemAtLocation( 0, 0, 0, 0x200001 );
  if ( !cont )
    return ret_error( $"Failed to create container: {cont}" );
  endif

  var empty_weight := cont.weight;

  var item := CreateItemInContainer( cont, "goldcoin", 50000 );
  if ( !item )
    DestroyItem( cont );
    return ret_error( $"Failed to create item: {item}" );
  endif

  var unmodded_weight := item.weight;

  var multiplier, expected;

  multiplier := 0.5; // double
  item.weight_multiplier_mod := multiplier;
  expected := CInt( empty_weight + unmodded_weight * multiplier );

  if ( cont.weight != expected )
    DestroyItem( cont );
    return ret_error( $"Container has incorrect weight when item.weight_multiplier_mod = {multiplier}: expected {expected} != actual {cont.weight}" );
  endif

  multiplier := 2; // int
  item.weight_multiplier_mod := multiplier;
  expected := CInt( empty_weight + unmodded_weight * multiplier );

  if ( cont.weight != expected )
    DestroyItem( cont );
    return ret_error( $"Container has incorrect weight when item.weight_multiplier_mod = {multiplier}: expected {expected} != actual {cont.weight}" );
  endif

  DestroyItem( cont );

  return 1;
endfunction

exported function test_held_weight_multi()
  var ret, cont_half, cont_quarter, cont_normal, item, item_split;
  do
    cont_normal := CreateItemAtLocation( 0, 0, 0, "backpack" );
    if ( !cont_normal )
      ret := ret_error( $"Failed to create cont_normal: {cont_normal}" );
      break;
    elseif ( cont_normal.held_weight_multiplier != 1.0 )
      ret := ret_error( $"cont_normal.held_weight_multiplier ({cont_normal.held_weight_multiplier}) != 1.0" );
      break;
    endif
    var cont_normal_weight_empty := 3; // cont_normal.weight;

    // Create item via default entry in itemdesc.cfg
    cont_half := CreateItemAtLocation( 0, 0, 0, "heldweightmultipliermod_half" );

    if ( !cont_half )
      ret := ret_error( $"Failed to create cont_half: {cont_half}" );
      break;
    elseif ( !( ret := ret_error_not_equal( cont_half.held_weight_multiplier, 0.5,
                                            $"cont_half.held_weight_multiplier ({cont_half.held_weight_multiplier}) != 0.5" ) ) )
      break;
    endif

    var cont_half_weight_empty := 50; // cont_half.weight;

    // Create item via default result from GetItemDescriptor
    var itemdesc := GetItemDescriptor( "heldweightmultipliermod_quarter" );
    if ( !( ret := ret_error_not_equal( itemdesc.HeldWeightMultiplier, 0.25,
                                        $"itemdesc.HeldWeightMultiplier ({itemdesc.HeldWeightMultiplier}) != 0.25" ) ) )
      break;
    endif

    cont_quarter := CreateItemAtLocation( 0, 0, 0, itemdesc );

    if ( !cont_quarter )
      ret := ret_error( $"Failed to create cont_quarter: {cont_quarter}" );
      break;
    elseif ( !( ret := ret_error_not_equal( cont_quarter.held_weight_multiplier, 0.25,
                                            $"cont_quarter.held_weight_multiplier ({cont_quarter.held_weight_multiplier}) != 0.25" ) ) )
      break;
    endif

    var cont_quarter_weight_empty := 50; // cont_quarter.weight;

    item := CreateItemAtLocation( 0, 0, 0, "goldcoin_heavy", amount := 100 );

    if ( !item )
      ret := ret_error( $"Failed to create item: {item}" );
      break;
    endif

    if ( !( ret := ret_error_not_equal( item.weight, 100, $"item.weight ({item.weight}) != 100" ) ) )
      break;
    endif

    // Move coins into half-container
    if ( !( ret := MoveItemToContainer( item, cont_half ) ) )
      break;
    endif

    var expected_weight_half := 100; // CInt(cont_half_weight_empty + item.weight * 0.5);

    if ( !( ret := ret_error_not_equal( cont_half.weight, expected_weight_half,
                                        $"cont_half.weight ({cont_half.weight}) != expected_weight_half ({expected_weight_half})" ) ) )
      break;
    endif

    // Move coins out of half-container and into quarter-container
    if ( !( ret := MoveItemToContainer( item, cont_quarter ) ) )
      break;
    endif

    // Weight of half-container should reset.
    if ( !( ret := ret_error_not_equal( cont_half.weight, cont_half_weight_empty,
                                        $"cont_half.weight ({cont_half.weight}) != cont_half_weight_empty ({cont_half_weight_empty})" ) ) )
      break;
    endif

    var expected_weight_quarter := 75; // CInt(cont_quarter_weight_empty + item.weight * 0.25);

    if ( !( ret := ret_error_not_equal( cont_quarter.weight, expected_weight_quarter,
                                        $"cont_quarter.weight ({cont_quarter.weight}) != expected_weight_quarter ({expected_weight_quarter})"
                                        ) ) )
      break;
    endif

    // Move half-container and quarter-container (which contains item) into normal-container
    if ( !( ret := MoveItemToContainer( cont_quarter, cont_normal ) ) )
      break;
    elseif ( !( ret := MoveItemToContainer( cont_half, cont_normal ) ) )
      break;
    endif

    var expected_weight_normal := 128; // CInt(cont_normal_weight_empty + cont_half_weight_empty + item.weight * 0.25 + cont_quarter_weight_empty);

    if ( !( ret := ret_error_not_equal( cont_normal.weight, expected_weight_normal,
                                        $"cont_normal.weight ({cont_normal.weight}) != expected_weight_normal ({expected_weight_normal})" )
            ) )
      break;
    endif

    // split item into a new stack, moving 50 unscaled weight from quarter-container into half-container
    item_split := item.splitStackInto( cont_half, 50 );
    if ( !( ret := item_split ) )
      break;
    endif

    expected_weight_quarter := 62; // CInt(cont_quarter_weight_empty + item.weight * 0.25);
    expected_weight_half := 75; // CInt(cont_half_weight_empty + item_split.weight * 0.50);
    expected_weight_normal := 140; // CInt(cont_normal_weight_empty + (cont_half_weight_empty + 50 * 0.25) + (cont_quarter_weight_empty + 50 * 0.50));

    if ( !( ret := ret_error_not_equal( cont_normal.weight, expected_weight_normal,
                                        $"cont_normal.weight ({cont_normal.weight}) != expected_weight_normal ({expected_weight_normal})" )
            ) )
      break;
    endif

    if ( !( ret := ret_error_not_equal( cont_quarter.weight, expected_weight_quarter,
                                        $"cont_quarter.weight ({cont_quarter.weight}) != expected_weight_quarter ({expected_weight_quarter})"
                                        ) ) )
      break;
    endif

    if ( !( ret := ret_error_not_equal( cont_half.weight, expected_weight_half,
                                        $"cont_half.weight ({cont_half.weight}) != expected_weight_half ({expected_weight_half})" ) ) )
      break;
    endif

    ret := 1;
  dowhile ( false );

  if ( item )
    DestroyItem( item );
  endif

  if ( item_split )
    DestroyItem( item_split );
  endif

  if ( cont_normal )
    DestroyItem( cont_normal );
  endif

  if ( cont_half )
    DestroyItem( cont_half );
  endif

  if ( cont_quarter )
    DestroyItem( cont_quarter );
  endif

  return ret;
endfunction

exported function test_held_weight_multi_itemdesc()
  var ret, item;

  do
    var itemdesc := GetItemDescriptor( "backpack" );
    if ( !( ret := itemdesc ) )
      break;
    endif

    itemdesc.HeldWeightMultiplier := 0.5;

    item := CreateItemAtLocation( 0, 0, 0, itemdesc );
    if ( !( ret := item ) )
      break;
    endif

    if ( !( ret := ret_error_not_equal( item.held_weight_multiplier, 0.5,
                                        $"item.held_weight_multiplier ({item.held_weight_multiplier}) != 0.5" ) ) )
      break;
    endif

    ret := 1;
  dowhile ( false );

  if ( item )
    DestroyItem( item );
  endif

  return ret;
endfunction

exported function test_held_weight_multi_cont_full()
  var ret, cont_half;

  do
    cont_half := CreateItemAtLocation( 0, 0, 0, "heldweightmultipliermod_half" );

    if ( !cont_half )
      ret := ret_error( $"Failed to create cont_half: {cont_half}" );
      break;
    endif

    var desc := GetItemDescriptor( cont_half.objtype );

    // Fill container to 50% full (100 weight * 0.5 mod < 100 max weight)
    var item1 := CreateItemInContainer( cont_half, "goldcoin_heavy", 100 );

    if ( !item1 )
      ret := ret_error( $"Failed to create item1: {item1}" );
      break;
    endif

    // Fill container to 100% full (200 weight * 0.5 mod == 100 max weight)
    var item2 := CreateItemInContainer( cont_half, "goldcoin_heavy2", 100 );

    if ( !item2 )
      ret := ret_error( $"Failed to create item2: {item2}" );
      break;
    endif

    // Fail to create item because container is full
    var held_weight_at_item2 := cont_half.weight - desc.weight;
    var item3 := CreateItemInContainer( cont_half, "goldcoin", 1 );

    if ( item3 )
      var held_weight := cont_half.weight - desc.weight;
      ret := ret_error( $"Erroneously successfully created item in full container: held_weight_at_item2={held_weight_at_item2} item3.weight={item3.weight} held_weight={held_weight} cont_half.maxweight={desc.MaxWeight}" );
      break;
    endif

    ret := 1;
  dowhile ( false );

  if ( cont_half )
    DestroyItem( cont_half );
  endif

  return ret;
endfunction

// Tests dynamically changing held_weight_multiplier on containers at
// various depths inside other containers.
exported function test_held_weight_multi_dynamic()
  var ret, cont1;
  do
    cont1 := CreateItemAtLocation( 0, 0, 0, "backpack" );

    if ( !cont1 )
      ret := ret_error( $"Failed to create cont1: {cont1}" );
      break;
    endif

    var cont2 := CreateItemInContainer( cont1, "backpack" );

    if ( !cont2 )
      ret := ret_error( $"Failed to create cont2: {cont2}" );
      break;
    endif

    var cont3 := CreateItemInContainer( cont2, "backpack" );

    if ( !cont3 )
      ret := ret_error( $"Failed to create cont3: {cont3}" );
      break;
    endif

    // Fill container
    var item1 := CreateItemInContainer( cont3, "goldcoin_heavy", 100 );

    if ( !item1 )
      ret := ret_error( $"Failed to create item1: {item1}" );
      break;
    endif

    var expected_weight_cont3, expected_weight_cont2, expected_weight_cont1, expected,
        actual;

    expected_weight_cont3 := 103; // 100 + 3
    expected_weight_cont2 := 106; // (100 + 3) + 3
    expected_weight_cont1 := 109; // ((100 + 3) + 3) + 3
    expected := array{ expected_weight_cont1, expected_weight_cont2, expected_weight_cont3 };
    actual := array{ cont1.weight, cont2.weight, cont3.weight };
    if ( !( ret := ret_error_not_equal( actual, expected,
                                        $"Weights unequal: actual ({actual}) != expected ({expected})" ) ) )
      break;
    endif

    cont1.held_weight_multiplier := 0.5;
    cont2.held_weight_multiplier := 1;
    cont3.held_weight_multiplier := 1;
    expected_weight_cont3 := 103; // 100 + 3
    expected_weight_cont2 := 106; // (100 + 3) + 3
    expected_weight_cont1 := 56; // ((100 + 3) + 3) * 0.5 + 3
    expected := array{ expected_weight_cont1, expected_weight_cont2, expected_weight_cont3 };
    actual := array{ cont1.weight, cont2.weight, cont3.weight };
    if ( !( ret := ret_error_not_equal( actual, expected,
                                        $"Weights unequal: actual ({actual}) != expected ({expected})" ) ) )
      break;
    endif

    cont1.held_weight_multiplier := 1;
    cont2.held_weight_multiplier := 0.5;
    cont3.held_weight_multiplier := 1;
    expected_weight_cont3 := 103; // 100 + 3
    expected_weight_cont2 := 54; // (100 + 3) * 0.5 + 3
    expected_weight_cont1 := 57; // ((100 + 3) * 0.5 + 3) + 3
    expected := array{ expected_weight_cont1, expected_weight_cont2, expected_weight_cont3 };
    actual := array{ cont1.weight, cont2.weight, cont3.weight };
    if ( !( ret := ret_error_not_equal( actual, expected,
                                        $"Weights unequal: actual ({actual}) != expected ({expected})" ) ) )
      break;
    endif

    cont1.held_weight_multiplier := 1;
    cont2.held_weight_multiplier := 1;
    cont3.held_weight_multiplier := 0.5;
    expected_weight_cont3 := 53; // 100 * 0.5 + 3
    expected_weight_cont2 := 56; // (100 * 0.5 + 3) + 3
    expected_weight_cont1 := 59; // ((100 * 0.5 + 3) + 3) + 3
    expected := array{ expected_weight_cont1, expected_weight_cont2, expected_weight_cont3 };
    actual := array{ cont1.weight, cont2.weight, cont3.weight };
    if ( !( ret := ret_error_not_equal( actual, expected,
                                        $"Weights unequal: actual ({actual}) != expected ({expected})" ) ) )
      break;
    endif

    cont1.held_weight_multiplier := 0.5;
    cont2.held_weight_multiplier := 1;
    cont3.held_weight_multiplier := 0.5;
    expected_weight_cont3 := 53; // 100 * 0.5 + 3
    expected_weight_cont2 := 56; // (100 * 0.5 + 3) + 3
    expected_weight_cont1 := 31; // ((100 * 0.5 + 3) + 3) * 0.5 + 3
    expected := array{ expected_weight_cont1, expected_weight_cont2, expected_weight_cont3 };
    actual := array{ cont1.weight, cont2.weight, cont3.weight };
    if ( !( ret := ret_error_not_equal( actual, expected,
                                        $"Weights unequal: actual ({actual}) != expected ({expected})" ) ) )
      break;
    endif

    ret := 1;
  dowhile ( false );

  if ( cont1 )
    DestroyItem( cont1 );
  endif

  return ret;
endfunction
