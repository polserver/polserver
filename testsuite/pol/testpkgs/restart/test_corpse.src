use os;
use uo;
use polsys;
include "testutil";

var testrun := CInt( GetEnvironmentVariable( "POLCORE_TEST_RUN" ) );

program test_corpse()
  return 1;
endprogram

// save/load test for things in Corpse class
exported function load_save_corpse()
  if ( testrun == 1 )
    var npc := CreateNPCFromTemplate( ":testrestart:restart_npc", 100, 100, 0, 0, "britannia2" );
    if ( !npc )
      return ret_error( $"failed to create npc {npc}" );
    endif
    SetGlobalProperty( "test_item_storage_npc_corpse", npc.serial );
    var npcserial := npc.serial;
    npc.kill();
    var item;
    var items := ListObjectsInBoxOfClass( POLCLASS_CORPSE, 100, 100, 0, 100, 100, 0, "britannia2" );
    foreach i in items
      if ( i.ownerserial == npcserial )
        item := i;
        break;
      endif
    endforeach

    if ( !item )
      return ret_error( $"failed to get item {items}" );
    endif
    SetGlobalProperty( "test_item_storage_corpse", item.serial );
  else

    var serial := GetGlobalProperty( "test_item_storage_corpse" );
    var npcserial := GetGlobalProperty( "test_item_storage_npc_corpse" );
    if ( !serial )
      return ret_error( "Global property not found" );
    endif

    var item := SystemFindObjectBySerial( serial );
    if ( !item )
      return ret_error( $"Item with serial {serial:#x} does not exists: {item})" );
    endif
    var props := { { "CorpseType",
                     { "corpsetype", 0x190 }
                   },
                   {
                     "OwnerSerial",
                     { "ownerserial", npcserial }
                   } //    {"TakeContentsToGrave", {"",1}
                   };
    foreach prop in props
      var val := item.get_member( prop[2][1] );
      if ( val != prop[2][2] )
        return ret_error( $"Member {prop[2][1]} {prop[2][2]} != {val}" );
      endif
    endforeach
  endif
  return 1;
endfunction
