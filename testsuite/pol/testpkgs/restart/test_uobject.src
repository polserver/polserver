use os;
use uo;
use polsys;
include "testutil";

var testrun:=CInt(GetEnvironmentVariable("POLCORE_TEST_RUN"));

program test_uobject()
  return 1;
endprogram

// save/load test for things in UObject (uses Item)
exported function load_save_uobject()
  var props:={
                   {"Name", {"name","load_save_uobject"}},
                {"Graphic", {"graphic",0x1234}},
                  {"Color", {"color",0xff0}},
                 {"Facing", {"facing",6}}, // after graphic or it gets resetted
//               {"Revision", {"",1}},
          {"FireResistMod", {"resist_fire_mod",1}},
          {"ColdResistMod", {"resist_cold_mod",2}},
        {"EnergyResistMod", {"resist_energy_mod",3}},
        {"PoisonResistMod", {"resist_poison_mod",4}},
      {"PhysicalResistMod", {"resist_physical_mod",5}},
          {"FireDamageMod", {"damage_fire_mod",6}},
          {"ColdDamageMod", {"damage_cold_mod",7}},
        {"EnergyDamageMod", {"damage_energy_mod",8}},
        {"PoisonDamageMod", {"damage_poison_mod",9}},
      {"PhysicalDamageMod", {"damage_physical_mod",10}},
    {"LowerReagentCostMod", {"lower_reagent_cost_mod",11}},
     {"DefenceIncreaseMod", {"defence_increase_mod",12}},
  {"DefenceIncreaseCapMod", {"defence_increase_cap_mod",13}},
       {"LowerManaCostMod", {"lower_mana_cost_mod",14}},
           {"HitChanceMod", {"hit_chance_mod",15}},
       {"FireResistCapMod", {"resist_fire_cap_mod",16}},
       {"ColdResistCapMod", {"resist_cold_cap_mod",17}},
     {"EnergyResistCapMod", {"resist_energy_cap_mod",18}},
   {"PhysicalResistCapMod", {"resist_physical_cap_mod",19}},
     {"PoisonResistCapMod", {"resist_poison_cap_mod",20}},
 {"SpellDamageIncreaseMod", {"spell_damage_increase_mod",21}},
       {"FasterCastingMod", {"faster_casting_mod",22}},
  {"FasterCastRecoveryMod", {"faster_cast_recovery_mod",23}},
                {"LuckMod", {"luck_mod",24}},
  {"SwingSpeedIncreaseMod", {"swing_speed_increase_mod",25}}
  };

  if (testrun == 1)
    var item := CreateItemAtLocation(10,11,-5, 0xeed,1,"britannia2");
    if (!item)
      return ret_error($"failed to create item {item}");
    endif
    SetGlobalProperty("test_item_storage_uobject", item.serial);
    foreach prop in props
      item.set_member(prop[2][1],prop[2][2]);
    endforeach
    item.setprop("test","testcprop");
  else

    var serial := GetGlobalProperty("test_item_storage_uobject");
    if (!serial)
      return ret_error("Global property not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (!item)
      return ret_error($"Item with serial {serial:#x} does not exists: {item})");
    endif
    foreach prop in props
      var val:=item.get_member(prop[2][1]);
      if (val != prop[2][2])
        return ret_error($"Member {prop[2][1]} {prop[2][2]} != {val}");
      endif
    endforeach
    if (item.objtype != 0xeed)
      return ret_error($"wrong objtype {item.objtype:#x} != 0xeed");
    endif
    if (item.x != 10 || item.y != 11 || item.z != -5 || item.realm != "britannia2")
      return ret_error($"wrong pos {item.x},{item.y},{item.z},{item.realm} != 10,11,-5,britannia2");
    endif
    if (item.getprop("test") != "testcprop")
      return ret_error("failed to load cprop: "+item.getprop("test"));
    endif
  endif
  return 1;
endfunction
